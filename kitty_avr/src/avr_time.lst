   1               		.file	"avr_time.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	__vector_23
  13               	__vector_23:
  14               	.LFB0:
  15               		.file 1 "avr_time.c"
   1:avr_time.c    **** #include "avr_time.h"
   2:avr_time.c    **** #include <avr/io.h>
   3:avr_time.c    **** #include <avr/interrupt.h>
   4:avr_time.c    **** 
   5:avr_time.c    **** #define CLOCK_TICKS_PER_MS F_CPU / 1000UL
   6:avr_time.c    **** // Timer0 is 8 bits and is prescaled by 64
   7:avr_time.c    **** #define CLOCK_TICKS_PER_TIMER0_OVERFLOW 64UL * 256UL
   8:avr_time.c    **** 
   9:avr_time.c    **** volatile static uint32_t timer0_ticks = 0;
  10:avr_time.c    **** volatile static uint32_t overflow_ms = 0;
  11:avr_time.c    **** 
  12:avr_time.c    **** // The Timer0 overflow interrupt handler
  13:avr_time.c    **** ISR(TIMER0_OVF_vect)
  14:avr_time.c    **** {
  16               		.loc 1 14 0
  17               		.cfi_startproc
  18 0000 1F92      		push r1
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 4
  21               		.cfi_offset 1, -3
  22 0002 0F92      		push r0
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 5
  25               		.cfi_offset 0, -4
  26 0004 0FB6      		in r0,__SREG__
  27 0006 0F92      		push r0
  28 0008 1124      		clr __zero_reg__
  29 000a 2F93      		push r18
  30               	.LCFI2:
  31               		.cfi_def_cfa_offset 6
  32               		.cfi_offset 18, -5
  33 000c 8F93      		push r24
  34               	.LCFI3:
  35               		.cfi_def_cfa_offset 7
  36               		.cfi_offset 24, -6
  37 000e 9F93      		push r25
  38               	.LCFI4:
  39               		.cfi_def_cfa_offset 8
  40               		.cfi_offset 25, -7
  41 0010 AF93      		push r26
  42               	.LCFI5:
  43               		.cfi_def_cfa_offset 9
  44               		.cfi_offset 26, -8
  45 0012 BF93      		push r27
  46               	.LCFI6:
  47               		.cfi_def_cfa_offset 10
  48               		.cfi_offset 27, -9
  49               	/* prologue: Signal */
  50               	/* frame size = 0 */
  51               	/* stack size = 8 */
  52               	.L__stack_usage = 8
  15:avr_time.c    ****   // Add an overflow's worth of time
  16:avr_time.c    ****   timer0_ticks += CLOCK_TICKS_PER_TIMER0_OVERFLOW;
  53               		.loc 1 16 0
  54 0014 8091 0000 		lds r24,timer0_ticks
  55 0018 9091 0000 		lds r25,timer0_ticks+1
  56 001c A091 0000 		lds r26,timer0_ticks+2
  57 0020 B091 0000 		lds r27,timer0_ticks+3
  58 0024 905C      		subi r25,-64
  59 0026 AF4F      		sbci r26,-1
  60 0028 BF4F      		sbci r27,-1
  61               	.L4:
  17:avr_time.c    ****   for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
  62               		.loc 1 17 0 discriminator 2
  63 002a 8093 0000 		sts timer0_ticks,r24
  64 002e 9093 0000 		sts timer0_ticks+1,r25
  65 0032 A093 0000 		sts timer0_ticks+2,r26
  66 0036 B093 0000 		sts timer0_ticks+3,r27
  67 003a 8091 0000 		lds r24,timer0_ticks
  68 003e 9091 0000 		lds r25,timer0_ticks+1
  69 0042 A091 0000 		lds r26,timer0_ticks+2
  70 0046 B091 0000 		lds r27,timer0_ticks+3
  71 004a 8138      		cpi r24,-127
  72 004c 9E43      		sbci r25,62
  73 004e A105      		cpc r26,__zero_reg__
  74 0050 B105      		cpc r27,__zero_reg__
  75 0052 00F0      		brlo .L6
  18:avr_time.c    ****   {
  19:avr_time.c    ****     overflow_ms++;
  76               		.loc 1 19 0 discriminator 2
  77 0054 8091 0000 		lds r24,overflow_ms
  78 0058 9091 0000 		lds r25,overflow_ms+1
  79 005c A091 0000 		lds r26,overflow_ms+2
  80 0060 B091 0000 		lds r27,overflow_ms+3
  81 0064 0196      		adiw r24,1
  82 0066 A11D      		adc r26,__zero_reg__
  83 0068 B11D      		adc r27,__zero_reg__
  84 006a 8093 0000 		sts overflow_ms,r24
  85 006e 9093 0000 		sts overflow_ms+1,r25
  86 0072 A093 0000 		sts overflow_ms+2,r26
  87 0076 B093 0000 		sts overflow_ms+3,r27
  17:avr_time.c    ****   for(; timer0_ticks > CLOCK_TICKS_PER_MS; timer0_ticks -= CLOCK_TICKS_PER_MS)
  88               		.loc 1 17 0 discriminator 2
  89 007a 8091 0000 		lds r24,timer0_ticks
  90 007e 9091 0000 		lds r25,timer0_ticks+1
  91 0082 A091 0000 		lds r26,timer0_ticks+2
  92 0086 B091 0000 		lds r27,timer0_ticks+3
  93 008a 8058      		subi r24,-128
  94 008c 9E43      		sbci r25,62
  95 008e A109      		sbc r26,__zero_reg__
  96 0090 B109      		sbc r27,__zero_reg__
  97 0092 00C0      		rjmp .L4
  98               	.L6:
  99               	/* epilogue start */
  20:avr_time.c    ****   }
  21:avr_time.c    **** }
 100               		.loc 1 21 0
 101 0094 BF91      		pop r27
 102 0096 AF91      		pop r26
 103 0098 9F91      		pop r25
 104 009a 8F91      		pop r24
 105 009c 2F91      		pop r18
 106 009e 0F90      		pop r0
 107 00a0 0FBE      		out __SREG__,r0
 108 00a2 0F90      		pop r0
 109 00a4 1F90      		pop r1
 110 00a6 1895      		reti
 111               		.cfi_endproc
 112               	.LFE0:
 114               	.global	avr_time_init
 116               	avr_time_init:
 117               	.LFB1:
  22:avr_time.c    **** 
  23:avr_time.c    **** // Initialize the 8-bit Timer 0.
  24:avr_time.c    **** void avr_time_init(void)
  25:avr_time.c    **** {
 118               		.loc 1 25 0
 119               		.cfi_startproc
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 0 */
 123               	.L__stack_usage = 0
  26:avr_time.c    ****   // Prescale Timer 0 to divide by 64
  27:avr_time.c    ****   TCCR0B |= _BV(CS01) | _BV(CS00);
 124               		.loc 1 27 0
 125 00a8 85B5      		in r24,0x25
 126 00aa 8360      		ori r24,lo8(3)
 127 00ac 85BD      		out 0x25,r24
  28:avr_time.c    ****   // Enable Timer 0 overflow interrupt
  29:avr_time.c    ****   TIMSK0 |= _BV(TOIE0);
 128               		.loc 1 29 0
 129 00ae EEE6      		ldi r30,lo8(110)
 130 00b0 F0E0      		ldi r31,0
 131 00b2 8081      		ld r24,Z
 132 00b4 8160      		ori r24,lo8(1)
 133 00b6 8083      		st Z,r24
 134 00b8 0895      		ret
 135               		.cfi_endproc
 136               	.LFE1:
 138               	.global	avr_time_now
 140               	avr_time_now:
 141               	.LFB2:
  30:avr_time.c    **** }
  31:avr_time.c    **** 
  32:avr_time.c    **** // Get the current time in milliseconds
  33:avr_time.c    **** uint32_t avr_time_now(void)
  34:avr_time.c    **** {
 142               		.loc 1 34 0
 143               		.cfi_startproc
 144               	/* prologue: function */
 145               	/* frame size = 0 */
 146               	/* stack size = 0 */
 147               	.L__stack_usage = 0
  35:avr_time.c    ****   uint32_t now;
  36:avr_time.c    **** 
  37:avr_time.c    ****   // Disable interrupts 
  38:avr_time.c    ****   cli();
 148               		.loc 1 38 0
 149               	/* #APP */
 150               	 ;  38 "avr_time.c" 1
 151 00ba F894      		cli
 152               	 ;  0 "" 2
  39:avr_time.c    ****   now = overflow_ms;
 153               		.loc 1 39 0
 154               	/* #NOAPP */
 155 00bc 6091 0000 		lds r22,overflow_ms
 156 00c0 7091 0000 		lds r23,overflow_ms+1
 157 00c4 8091 0000 		lds r24,overflow_ms+2
 158 00c8 9091 0000 		lds r25,overflow_ms+3
 159               	.LVL0:
  40:avr_time.c    ****   sei();
 160               		.loc 1 40 0
 161               	/* #APP */
 162               	 ;  40 "avr_time.c" 1
 163 00cc 7894      		sei
 164               	 ;  0 "" 2
  41:avr_time.c    **** 
  42:avr_time.c    ****   return now;
  43:avr_time.c    **** }...
 165               		.loc 1 43 0
 166               	/* #NOAPP */
 167 00ce 0895      		ret
 168               		.cfi_endproc
 169               	.LFE2:
 171               		.local	overflow_ms
 172               		.comm	overflow_ms,4,1
 173               		.local	timer0_ticks
 174               		.comm	timer0_ticks,4,1
 175               	.Letext0:
 176               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 avr_time.c
     /tmp/ccwHmbAT.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwHmbAT.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwHmbAT.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwHmbAT.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccwHmbAT.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwHmbAT.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwHmbAT.s:13     .text:0000000000000000 __vector_23
     /tmp/ccwHmbAT.s:172    .bss:0000000000000004 timer0_ticks
                             .bss:0000000000000000 overflow_ms
     /tmp/ccwHmbAT.s:116    .text:00000000000000a8 avr_time_init
     /tmp/ccwHmbAT.s:140    .text:00000000000000ba avr_time_now

UNDEFINED SYMBOLS
__do_clear_bss
