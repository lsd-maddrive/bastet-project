   1               		.file	"utils.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	Digit
  13               	Digit:
  14               	.LFB10:
  15               		.file 1 "dc_step/utils.c"
   1:dc_step/utils.c **** #include "utils.h"
   2:dc_step/utils.c **** 
   3:dc_step/utils.c **** uint8_t Digit(uint16_t d, uint8_t m){
  16               		.loc 1 3 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 4
  22               		.cfi_offset 28, -3
  23               	/* prologue: function */
  24               	/* frame size = 0 */
  25               	/* stack size = 1 */
  26               	.L__stack_usage = 1
  27 0002 382F      		mov r19,r24
  28 0004 492F      		mov r20,r25
  29 0006 C62F      		mov r28,r22
  30               	.LVL1:
   4:dc_step/utils.c **** 	uint8_t i=5, a;
   5:dc_step/utils.c **** 	while(i){ //цикл по разр€дам числа
   6:dc_step/utils.c **** 		a=d%10; //выдел€ем очередной разр€д
   7:dc_step/utils.c **** 		//выделен заданный разр€д - уходим
   8:dc_step/utils.c **** 		if(i-- == m) break;
   9:dc_step/utils.c **** 		d /= 10; //уменьшаем число в 10 раз
  31               		.loc 1 9 0
  32 0008 25E0      		ldi r18,lo8(5)
  33 000a EAE0      		ldi r30,lo8(10)
  34 000c F0E0      		ldi r31,0
  35               	.LVL2:
  36               	.L3:
   8:dc_step/utils.c **** 		d /= 10; //уменьшаем число в 10 раз
  37               		.loc 1 8 0
  38 000e 2C13      		cpse r18,r28
  39 0010 00C0      		rjmp .L2
  40               	.LVL3:
  41               	.L4:
  10:dc_step/utils.c **** 	}
  11:dc_step/utils.c **** 	return(a);
  42               		.loc 1 11 0
  43 0012 832F      		mov r24,r19
  44 0014 942F      		mov r25,r20
  45 0016 6AE0      		ldi r22,lo8(10)
  46 0018 70E0      		ldi r23,0
  47 001a 0E94 0000 		call __udivmodhi4
  48               	/* epilogue start */
  12:dc_step/utils.c **** }
  49               		.loc 1 12 0
  50 001e CF91      		pop r28
  51               	.LVL4:
  52 0020 0895      		ret
  53               	.LVL5:
  54               	.L2:
   9:dc_step/utils.c **** 	}
  55               		.loc 1 9 0
  56 0022 832F      		mov r24,r19
  57 0024 942F      		mov r25,r20
  58 0026 BF01      		movw r22,r30
  59 0028 0E94 0000 		call __udivmodhi4
  60               	.LVL6:
  61 002c 2150      		subi r18,lo8(-(-1))
  62               	.LVL7:
   5:dc_step/utils.c **** 		a=d%10; //выдел€ем очередной разр€д
  63               		.loc 1 5 0
  64 002e 01F0      		breq .L4
   9:dc_step/utils.c **** 	}
  65               		.loc 1 9 0
  66 0030 362F      		mov r19,r22
  67               	.LVL8:
  68 0032 472F      		mov r20,r23
  69 0034 00C0      		rjmp .L3
  70               		.cfi_endproc
  71               	.LFE10:
  73               	.global	FindMiddleValue
  75               	FindMiddleValue:
  76               	.LFB11:
  13:dc_step/utils.c **** 
  14:dc_step/utils.c **** uint16_t FindMiddleValue(uint16_t a, uint16_t b, uint16_t c){
  77               		.loc 1 14 0
  78               		.cfi_startproc
  79               	.LVL9:
  80               	/* prologue: function */
  81               	/* frame size = 0 */
  82               	/* stack size = 0 */
  83               	.L__stack_usage = 0
  15:dc_step/utils.c **** 	if(a>b){
  84               		.loc 1 15 0
  85 0036 6817      		cp r22,r24
  86 0038 7907      		cpc r23,r25
  87 003a 00F4      		brsh .L9
  16:dc_step/utils.c **** 		if(b>c){
  88               		.loc 1 16 0
  89 003c 4617      		cp r20,r22
  90 003e 5707      		cpc r21,r23
  91 0040 00F4      		brsh .L17
  92 0042 00C0      		rjmp .L13
  93               	.L9:
  17:dc_step/utils.c **** 			return(b);
  18:dc_step/utils.c **** 		}
  19:dc_step/utils.c **** 		else if(a>c){
  20:dc_step/utils.c **** 			return(c);
  21:dc_step/utils.c **** 		}
  22:dc_step/utils.c **** 		else{
  23:dc_step/utils.c **** 			return(a);
  24:dc_step/utils.c **** 		}
  25:dc_step/utils.c **** 	}
  26:dc_step/utils.c **** 	else{
  27:dc_step/utils.c **** 		if(a>c){
  94               		.loc 1 27 0
  95 0044 4817      		cp r20,r24
  96 0046 5907      		cpc r21,r25
  97 0048 00F0      		brlo .L10
  98 004a CB01      		movw r24,r22
  99               	.LVL10:
 100               	.L17:
 101 004c 4817      		cp r20,r24
 102 004e 5907      		cpc r21,r25
 103 0050 00F4      		brsh .L10
 104 0052 CA01      		movw r24,r20
 105 0054 0895      		ret
 106               	.LVL11:
 107               	.L13:
 108 0056 CB01      		movw r24,r22
 109               	.LVL12:
 110               	.L10:
  28:dc_step/utils.c **** 			return(a);
  29:dc_step/utils.c **** 		}
  30:dc_step/utils.c **** 		else if(b>c){
  31:dc_step/utils.c **** 			return(c);
  32:dc_step/utils.c **** 		}
  33:dc_step/utils.c **** 		else{
  34:dc_step/utils.c **** 			return(b);
  35:dc_step/utils.c **** 		}
  36:dc_step/utils.c **** 	}
  37:dc_step/utils.c **** }
 111               		.loc 1 37 0
 112 0058 0895      		ret
 113               		.cfi_endproc
 114               	.LFE11:
 116               	.global	FindMaxValue
 118               	FindMaxValue:
 119               	.LFB12:
  38:dc_step/utils.c **** 
  39:dc_step/utils.c **** uint16_t FindMaxValue(uint16_t a, uint16_t b, uint16_t c){
 120               		.loc 1 39 0
 121               		.cfi_startproc
 122               	.LVL13:
 123               	/* prologue: function */
 124               	/* frame size = 0 */
 125               	/* stack size = 0 */
 126               	.L__stack_usage = 0
  40:dc_step/utils.c **** 	if(a>b){
 127               		.loc 1 40 0
 128 005a 6817      		cp r22,r24
 129 005c 7907      		cpc r23,r25
 130 005e 00F4      		brsh .L19
  41:dc_step/utils.c **** 		if(b>c){
 131               		.loc 1 41 0
 132 0060 4617      		cp r20,r22
 133 0062 5707      		cpc r21,r23
 134 0064 00F4      		brsh .L26
 135 0066 00C0      		rjmp .L20
 136               	.L19:
 137 0068 CB01      		movw r24,r22
 138               	.LVL14:
 139               	.L26:
 140 006a 8417      		cp r24,r20
 141 006c 9507      		cpc r25,r21
 142 006e 00F4      		brsh .L20
 143 0070 CA01      		movw r24,r20
 144               	.L20:
  42:dc_step/utils.c **** 			return(a);
  43:dc_step/utils.c **** 		}
  44:dc_step/utils.c **** 		else if(c>a){
  45:dc_step/utils.c **** 			return(c);
  46:dc_step/utils.c **** 		}
  47:dc_step/utils.c **** 		else{
  48:dc_step/utils.c **** 			return(a);
  49:dc_step/utils.c **** 		}
  50:dc_step/utils.c **** 	}
  51:dc_step/utils.c **** 	else{
  52:dc_step/utils.c **** 		if(b>c){
  53:dc_step/utils.c **** 			return(b);
  54:dc_step/utils.c **** 		}
  55:dc_step/utils.c **** 		else{
  56:dc_step/utils.c **** 			return(c);
  57:dc_step/utils.c **** 		}
  58:dc_step/utils.c **** 	}
  59:dc_step/utils.c **** }
 145               		.loc 1 59 0
 146 0072 0895      		ret
 147               		.cfi_endproc
 148               	.LFE12:
 150               	.global	FindMinValue
 152               	FindMinValue:
 153               	.LFB13:
  60:dc_step/utils.c **** 
  61:dc_step/utils.c **** uint16_t FindMinValue(uint16_t a, uint16_t b, uint16_t c){
 154               		.loc 1 61 0
 155               		.cfi_startproc
 156               	.LVL15:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  62:dc_step/utils.c **** 	if(a<b){
 161               		.loc 1 62 0
 162 0074 8617      		cp r24,r22
 163 0076 9707      		cpc r25,r23
 164 0078 00F4      		brsh .L28
  63:dc_step/utils.c **** 		if(b<c){
 165               		.loc 1 63 0
 166 007a 6417      		cp r22,r20
 167 007c 7507      		cpc r23,r21
 168 007e 00F4      		brsh .L35
 169 0080 00C0      		rjmp .L29
 170               	.L28:
 171 0082 CB01      		movw r24,r22
 172               	.LVL16:
 173               	.L35:
 174 0084 4817      		cp r20,r24
 175 0086 5907      		cpc r21,r25
 176 0088 00F4      		brsh .L29
 177 008a CA01      		movw r24,r20
 178               	.L29:
  64:dc_step/utils.c **** 			return(a);
  65:dc_step/utils.c **** 		}
  66:dc_step/utils.c **** 		else if(c<a){
  67:dc_step/utils.c **** 			return(c);
  68:dc_step/utils.c **** 		}
  69:dc_step/utils.c **** 		else{
  70:dc_step/utils.c **** 			return(a);
  71:dc_step/utils.c **** 		}
  72:dc_step/utils.c **** 	}
  73:dc_step/utils.c **** 	else{
  74:dc_step/utils.c **** 		if(b<c){
  75:dc_step/utils.c **** 			return(b);
  76:dc_step/utils.c **** 		}
  77:dc_step/utils.c **** 		else{
  78:dc_step/utils.c **** 			return(c);
  79:dc_step/utils.c **** 		}
  80:dc_step/utils.c **** 	}
  81:dc_step/utils.c **** }...
 179               		.loc 1 81 0
 180 008c 0895      		ret
 181               		.cfi_endproc
 182               	.LFE13:
 184               	.Letext0:
 185               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 utils.c
     /tmp/cco4aXQh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cco4aXQh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cco4aXQh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cco4aXQh.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cco4aXQh.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cco4aXQh.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cco4aXQh.s:13     .text:0000000000000000 Digit
     /tmp/cco4aXQh.s:75     .text:0000000000000036 FindMiddleValue
     /tmp/cco4aXQh.s:118    .text:000000000000005a FindMaxValue
     /tmp/cco4aXQh.s:152    .text:0000000000000074 FindMinValue

UNDEFINED SYMBOLS
__udivmodhi4
