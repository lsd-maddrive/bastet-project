   1               		.file	"dc_motor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	Tim2DcMotInit
  13               	Tim2DcMotInit:
  14               	.LFB10:
  15               		.file 1 "dc_step/dc_motor.c"
   1:dc_step/dc_motor.c **** #include "dc_motor.h"
   2:dc_step/dc_motor.c **** #include <avr/io.h>
   3:dc_step/dc_motor.c **** 
   4:dc_step/dc_motor.c **** //uint16_t tim2_count=0, dc_mot_enc_count = 0, enc_result = 0;
   5:dc_step/dc_motor.c **** uint16_t tim2_count=0, dc_mot_enc_count[4]={0,0,0,0}, enc_result[4]={0,0,0,0};
   6:dc_step/dc_motor.c **** float reg_speed[4]={0,0,0,0}, integral[4]={0,0,0,0};
   7:dc_step/dc_motor.c **** //uint32_t enc_result = 0;
   8:dc_step/dc_motor.c **** float set_speed = 0;
   9:dc_step/dc_motor.c **** 
  10:dc_step/dc_motor.c **** 
  11:dc_step/dc_motor.c **** void Tim2DcMotInit(void){
  16               		.loc 1 11 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  12:dc_step/dc_motor.c **** 	//вывод PH6(OC2B), PB4(OC2A) – ШИМ, вывод PH4 - направление
  13:dc_step/dc_motor.c **** 	TCCR2A |= (1<<COM2A1);
  22               		.loc 1 13 0
  23 0000 A0EB      		ldi r26,lo8(-80)
  24 0002 B0E0      		ldi r27,0
  25 0004 8C91      		ld r24,X
  26 0006 8068      		ori r24,lo8(-128)
  27 0008 8C93      		st X,r24
  14:dc_step/dc_motor.c **** 	TCCR2A |= (1<<COM2B1);
  28               		.loc 1 14 0
  29 000a 8C91      		ld r24,X
  30 000c 8062      		ori r24,lo8(32)
  31 000e 8C93      		st X,r24
  15:dc_step/dc_motor.c **** 	TIMSK2 |=(1<<TOIE2);
  32               		.loc 1 15 0
  33 0010 E0E7      		ldi r30,lo8(112)
  34 0012 F0E0      		ldi r31,0
  35 0014 8081      		ld r24,Z
  36 0016 8160      		ori r24,lo8(1)
  37 0018 8083      		st Z,r24
  16:dc_step/dc_motor.c **** 	//вывод PH3(OC4A), PH5(OC4C) – ШИМ
  17:dc_step/dc_motor.c **** 	TCCR4A |= (1<<COM4A1);
  38               		.loc 1 17 0
  39 001a E0EA      		ldi r30,lo8(-96)
  40 001c F0E0      		ldi r31,0
  41 001e 8081      		ld r24,Z
  42 0020 8068      		ori r24,lo8(-128)
  43 0022 8083      		st Z,r24
  18:dc_step/dc_motor.c **** 	TCCR4A |= (1<<COM4C1);
  44               		.loc 1 18 0
  45 0024 8081      		ld r24,Z
  46 0026 8860      		ori r24,lo8(8)
  47 0028 8083      		st Z,r24
  19:dc_step/dc_motor.c **** 	/* TIMER2 - настройка таймера: ШИМ с фазовой коррекцией,
  20:dc_step/dc_motor.c **** 	неинвертированный режим, предделитель на 256 122.55hz */
  21:dc_step/dc_motor.c **** 	TCCR2A |= (1<<WGM20);
  48               		.loc 1 21 0
  49 002a 8C91      		ld r24,X
  50 002c 8160      		ori r24,lo8(1)
  51 002e 8C93      		st X,r24
  22:dc_step/dc_motor.c **** 	TCCR2B |= (1<<CS22) | (1<<CS21);
  52               		.loc 1 22 0
  53 0030 A1EB      		ldi r26,lo8(-79)
  54 0032 B0E0      		ldi r27,0
  55 0034 8C91      		ld r24,X
  56 0036 8660      		ori r24,lo8(6)
  57 0038 8C93      		st X,r24
  23:dc_step/dc_motor.c **** 	/* TIMER4 - настройка таймера: быстрый ШИМ,
  24:dc_step/dc_motor.c **** 	неинвертированный режим, 8 bit, TOP = 0xFF, предделитель на 256*/
  25:dc_step/dc_motor.c **** 	TCCR4A |= (1 << WGM40);
  58               		.loc 1 25 0
  59 003a 8081      		ld r24,Z
  60 003c 8160      		ori r24,lo8(1)
  61 003e 8083      		st Z,r24
  26:dc_step/dc_motor.c **** 	TCCR4B |= (1<<CS42);
  62               		.loc 1 26 0
  63 0040 E1EA      		ldi r30,lo8(-95)
  64 0042 F0E0      		ldi r31,0
  65 0044 8081      		ld r24,Z
  66 0046 8460      		ori r24,lo8(4)
  67 0048 8083      		st Z,r24
  68 004a 0895      		ret
  69               		.cfi_endproc
  70               	.LFE10:
  72               	.global	GetSpeed
  74               	GetSpeed:
  75               	.LFB12:
  27:dc_step/dc_motor.c **** }
  28:dc_step/dc_motor.c **** 
  29:dc_step/dc_motor.c **** void DcMotInit(void){
  30:dc_step/dc_motor.c **** 	Tim2DcMotInit();
  31:dc_step/dc_motor.c **** 	IntDcMotEcoderInit();
  32:dc_step/dc_motor.c **** 	DC_MOT1_SPEED_DDR|=(1<<DC_MOT1_SPEED_DDR_PIN);
  33:dc_step/dc_motor.c **** 	DC_MOT2_SPEED_DDR|=(1<<DC_MOT2_SPEED_DDR_PIN);
  34:dc_step/dc_motor.c **** 	DC_MOT3_SPEED_DDR|=(1<<DC_MOT3_SPEED_DDR_PIN);
  35:dc_step/dc_motor.c **** 	DC_MOT4_SPEED_DDR|=(1<<DC_MOT4_SPEED_DDR_PIN);
  36:dc_step/dc_motor.c **** 	
  37:dc_step/dc_motor.c **** 	DC_MOT_DIR_DDR|=(1<<DC_MOT_DIR_DDR_PIN);
  38:dc_step/dc_motor.c **** }
  39:dc_step/dc_motor.c **** 
  40:dc_step/dc_motor.c **** 
  41:dc_step/dc_motor.c **** uint16_t* GetSpeed(void){
  76               		.loc 1 41 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  42:dc_step/dc_motor.c **** 	return(enc_result);
  43:dc_step/dc_motor.c **** }
  82               		.loc 1 43 0
  83 004c 80E0      		ldi r24,lo8(enc_result)
  84 004e 90E0      		ldi r25,hi8(enc_result)
  85 0050 0895      		ret
  86               		.cfi_endproc
  87               	.LFE12:
  89               	.global	__gesf2
  90               	.global	__fixsfsi
  91               	.global	__floatsisf
  92               	.global	SetSpeed
  94               	SetSpeed:
  95               	.LFB13:
  44:dc_step/dc_motor.c **** 
  45:dc_step/dc_motor.c **** void SetSpeed(float desired_speed){
  96               		.loc 1 45 0
  97               		.cfi_startproc
  98               	.LVL0:
  99 0052 CF92      		push r12
 100               	.LCFI0:
 101               		.cfi_def_cfa_offset 4
 102               		.cfi_offset 12, -3
 103 0054 DF92      		push r13
 104               	.LCFI1:
 105               		.cfi_def_cfa_offset 5
 106               		.cfi_offset 13, -4
 107 0056 EF92      		push r14
 108               	.LCFI2:
 109               		.cfi_def_cfa_offset 6
 110               		.cfi_offset 14, -5
 111 0058 FF92      		push r15
 112               	.LCFI3:
 113               		.cfi_def_cfa_offset 7
 114               		.cfi_offset 15, -6
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 4 */
 118               	.L__stack_usage = 4
 119 005a 6B01      		movw r12,r22
 120 005c 7C01      		movw r14,r24
  46:dc_step/dc_motor.c **** 	if(desired_speed>=0) DC_MOT_FOR;
 121               		.loc 1 46 0
 122 005e 20E0      		ldi r18,0
 123 0060 30E0      		ldi r19,0
 124 0062 A901      		movw r20,r18
 125 0064 0E94 0000 		call __gesf2
 126               	.LVL1:
 127 0068 87FD      		sbrc r24,7
 128 006a 00C0      		rjmp .L9
 129               		.loc 1 46 0 is_stmt 0 discriminator 1
 130 006c 8091 0201 		lds r24,258
 131 0070 8F7E      		andi r24,lo8(-17)
 132 0072 00C0      		rjmp .L10
 133               	.L9:
  47:dc_step/dc_motor.c **** 	else DC_MOT_REV;
 134               		.loc 1 47 0 is_stmt 1
 135 0074 8091 0201 		lds r24,258
 136 0078 8061      		ori r24,lo8(16)
 137               	.L10:
 138 007a 8093 0201 		sts 258,r24
  48:dc_step/dc_motor.c **** 	
  49:dc_step/dc_motor.c **** 	set_speed = abs(desired_speed);
 139               		.loc 1 49 0
 140 007e C701      		movw r24,r14
 141 0080 B601      		movw r22,r12
 142 0082 0E94 0000 		call __fixsfsi
 143               	.LVL2:
 144 0086 9B01      		movw r18,r22
 145 0088 77FF      		sbrs r23,7
 146 008a 00C0      		rjmp .L7
 147 008c 2227      		clr r18
 148 008e 3327      		clr r19
 149 0090 261B      		sub r18,r22
 150 0092 370B      		sbc r19,r23
 151               	.L7:
 152 0094 B901      		movw r22,r18
 153 0096 330F      		lsl r19
 154 0098 880B      		sbc r24,r24
 155 009a 990B      		sbc r25,r25
 156 009c 0E94 0000 		call __floatsisf
 157               	.LVL3:
 158 00a0 6093 0000 		sts set_speed,r22
 159 00a4 7093 0000 		sts set_speed+1,r23
 160 00a8 8093 0000 		sts set_speed+2,r24
 161 00ac 9093 0000 		sts set_speed+3,r25
 162               	/* epilogue start */
  50:dc_step/dc_motor.c **** }
 163               		.loc 1 50 0
 164 00b0 FF90      		pop r15
 165 00b2 EF90      		pop r14
 166 00b4 DF90      		pop r13
 167 00b6 CF90      		pop r12
 168               	.LVL4:
 169 00b8 0895      		ret
 170               		.cfi_endproc
 171               	.LFE13:
 173               	.global	__fixunssfsi
 174               	.global	DcMotGo
 176               	DcMotGo:
 177               	.LFB14:
  51:dc_step/dc_motor.c **** 
  52:dc_step/dc_motor.c **** 
  53:dc_step/dc_motor.c **** void DcMotGo(float* speed){
 178               		.loc 1 53 0
 179               		.cfi_startproc
 180               	.LVL5:
 181 00ba CF93      		push r28
 182               	.LCFI4:
 183               		.cfi_def_cfa_offset 4
 184               		.cfi_offset 28, -3
 185 00bc DF93      		push r29
 186               	.LCFI5:
 187               		.cfi_def_cfa_offset 5
 188               		.cfi_offset 29, -4
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 2 */
 192               	.L__stack_usage = 2
 193 00be EC01      		movw r28,r24
  54:dc_step/dc_motor.c **** 
  55:dc_step/dc_motor.c **** 	OCR2A = speed[3];
 194               		.loc 1 55 0
 195 00c0 6C85      		ldd r22,Y+12
 196 00c2 7D85      		ldd r23,Y+13
 197 00c4 8E85      		ldd r24,Y+14
 198 00c6 9F85      		ldd r25,Y+15
 199 00c8 0E94 0000 		call __fixunssfsi
 200               	.LVL6:
 201 00cc 6093 B300 		sts 179,r22
  56:dc_step/dc_motor.c **** 	OCR2B = speed[2];
 202               		.loc 1 56 0
 203 00d0 6885      		ldd r22,Y+8
 204 00d2 7985      		ldd r23,Y+9
 205 00d4 8A85      		ldd r24,Y+10
 206 00d6 9B85      		ldd r25,Y+11
 207 00d8 0E94 0000 		call __fixunssfsi
 208               	.LVL7:
 209 00dc 6093 B400 		sts 180,r22
  57:dc_step/dc_motor.c **** 	OCR4A = speed[1];
 210               		.loc 1 57 0
 211 00e0 6C81      		ldd r22,Y+4
 212 00e2 7D81      		ldd r23,Y+5
 213 00e4 8E81      		ldd r24,Y+6
 214 00e6 9F81      		ldd r25,Y+7
 215 00e8 0E94 0000 		call __fixunssfsi
 216               	.LVL8:
 217 00ec 7093 A900 		sts 168+1,r23
 218 00f0 6093 A800 		sts 168,r22
  58:dc_step/dc_motor.c **** 	OCR4C = speed[0];
 219               		.loc 1 58 0
 220 00f4 6881      		ld r22,Y
 221 00f6 7981      		ldd r23,Y+1
 222 00f8 8A81      		ldd r24,Y+2
 223 00fa 9B81      		ldd r25,Y+3
 224 00fc 0E94 0000 		call __fixunssfsi
 225               	.LVL9:
 226 0100 7093 AD00 		sts 172+1,r23
 227 0104 6093 AC00 		sts 172,r22
 228               	/* epilogue start */
  59:dc_step/dc_motor.c **** }
 229               		.loc 1 59 0
 230 0108 DF91      		pop r29
 231 010a CF91      		pop r28
 232               	.LVL10:
 233 010c 0895      		ret
 234               		.cfi_endproc
 235               	.LFE14:
 237               	.global	IntDcMotEcoderInit
 239               	IntDcMotEcoderInit:
 240               	.LFB16:
  60:dc_step/dc_motor.c **** 
  61:dc_step/dc_motor.c **** void DcMotPIDGo(float set_speed){
  62:dc_step/dc_motor.c **** 	//float speed_test[4]={0,0,0,0};
  63:dc_step/dc_motor.c **** 	for(uint8_t i=0; i<4; i++){
  64:dc_step/dc_motor.c **** 		//reg_speed[i] = ComputePI(GetSpeed()[i], input_speed);
  65:dc_step/dc_motor.c **** 		reg_speed[i] = ComputePI(GetSpeed()[i], set_speed, i);
  66:dc_step/dc_motor.c **** 	}
  67:dc_step/dc_motor.c **** 	DcMotGo(reg_speed);
  68:dc_step/dc_motor.c **** }
  69:dc_step/dc_motor.c **** 
  70:dc_step/dc_motor.c **** void IntDcMotEcoderInit(void){
 241               		.loc 1 70 0
 242               		.cfi_startproc
 243               	/* prologue: function */
 244               	/* frame size = 0 */
 245               	/* stack size = 0 */
 246               	.L__stack_usage = 0
  71:dc_step/dc_motor.c **** 	EICRA=(1<<ISC01) | (1<<ISC11) | (1<<ISC21) | (1<<ISC31);
 247               		.loc 1 71 0
 248 010e 8AEA      		ldi r24,lo8(-86)
 249 0110 8093 6900 		sts 105,r24
  72:dc_step/dc_motor.c **** 	EIMSK=(1<<INT0) | (1<<INT1) | (1<<INT2) | (1<<INT3);
 250               		.loc 1 72 0
 251 0114 8FE0      		ldi r24,lo8(15)
 252 0116 8DBB      		out 0x1d,r24
 253 0118 0895      		ret
 254               		.cfi_endproc
 255               	.LFE16:
 257               	.global	DcMotInit
 259               	DcMotInit:
 260               	.LFB11:
  29:dc_step/dc_motor.c **** 	Tim2DcMotInit();
 261               		.loc 1 29 0
 262               		.cfi_startproc
 263               	/* prologue: function */
 264               	/* frame size = 0 */
 265               	/* stack size = 0 */
 266               	.L__stack_usage = 0
  30:dc_step/dc_motor.c **** 	IntDcMotEcoderInit();
 267               		.loc 1 30 0
 268 011a 0E94 0000 		call Tim2DcMotInit
 269               	.LVL11:
  31:dc_step/dc_motor.c **** 	DC_MOT1_SPEED_DDR|=(1<<DC_MOT1_SPEED_DDR_PIN);
 270               		.loc 1 31 0
 271 011e 0E94 0000 		call IntDcMotEcoderInit
 272               	.LVL12:
  32:dc_step/dc_motor.c **** 	DC_MOT2_SPEED_DDR|=(1<<DC_MOT2_SPEED_DDR_PIN);
 273               		.loc 1 32 0
 274 0122 E1E0      		ldi r30,lo8(1)
 275 0124 F1E0      		ldi r31,lo8(1)
 276 0126 8081      		ld r24,Z
 277 0128 8062      		ori r24,lo8(32)
 278 012a 8083      		st Z,r24
  33:dc_step/dc_motor.c **** 	DC_MOT3_SPEED_DDR|=(1<<DC_MOT3_SPEED_DDR_PIN);
 279               		.loc 1 33 0
 280 012c 8081      		ld r24,Z
 281 012e 8860      		ori r24,lo8(8)
 282 0130 8083      		st Z,r24
  34:dc_step/dc_motor.c **** 	DC_MOT4_SPEED_DDR|=(1<<DC_MOT4_SPEED_DDR_PIN);
 283               		.loc 1 34 0
 284 0132 249A      		sbi 0x4,4
  35:dc_step/dc_motor.c **** 	
 285               		.loc 1 35 0
 286 0134 8081      		ld r24,Z
 287 0136 8064      		ori r24,lo8(64)
 288 0138 8083      		st Z,r24
  37:dc_step/dc_motor.c **** }
 289               		.loc 1 37 0
 290 013a 8081      		ld r24,Z
 291 013c 8061      		ori r24,lo8(16)
 292 013e 8083      		st Z,r24
 293 0140 0895      		ret
 294               		.cfi_endproc
 295               	.LFE11:
 297               	.global	__vector_1
 299               	__vector_1:
 300               	.LFB17:
  73:dc_step/dc_motor.c **** 
  74:dc_step/dc_motor.c **** }
  75:dc_step/dc_motor.c **** 
  76:dc_step/dc_motor.c **** 
  77:dc_step/dc_motor.c **** //
  78:dc_step/dc_motor.c **** 
  79:dc_step/dc_motor.c **** ISR (INT0_vect)
  80:dc_step/dc_motor.c **** {
 301               		.loc 1 80 0
 302               		.cfi_startproc
 303 0142 1F92      		push r1
 304               	.LCFI6:
 305               		.cfi_def_cfa_offset 4
 306               		.cfi_offset 1, -3
 307 0144 0F92      		push r0
 308               	.LCFI7:
 309               		.cfi_def_cfa_offset 5
 310               		.cfi_offset 0, -4
 311 0146 0FB6      		in r0,__SREG__
 312 0148 0F92      		push r0
 313 014a 1124      		clr __zero_reg__
 314 014c 0BB6      		in r0,__RAMPZ__
 315 014e 0F92      		push r0
 316 0150 8F93      		push r24
 317               	.LCFI8:
 318               		.cfi_def_cfa_offset 6
 319               		.cfi_offset 24, -5
 320 0152 9F93      		push r25
 321               	.LCFI9:
 322               		.cfi_def_cfa_offset 7
 323               		.cfi_offset 25, -6
 324 0154 EF93      		push r30
 325               	.LCFI10:
 326               		.cfi_def_cfa_offset 8
 327               		.cfi_offset 30, -7
 328 0156 FF93      		push r31
 329               	.LCFI11:
 330               		.cfi_def_cfa_offset 9
 331               		.cfi_offset 31, -8
 332               	/* prologue: Signal */
 333               	/* frame size = 0 */
 334               	/* stack size = 8 */
 335               	.L__stack_usage = 8
  81:dc_step/dc_motor.c **** 	PORTB^=(1<<7);
 336               		.loc 1 81 0
 337 0158 85B1      		in r24,0x5
 338 015a 8058      		subi r24,lo8(-(-128))
 339 015c 85B9      		out 0x5,r24
  82:dc_step/dc_motor.c **** 	dc_mot_enc_count[0]+=1;
 340               		.loc 1 82 0
 341 015e E0E0      		ldi r30,lo8(dc_mot_enc_count)
 342 0160 F0E0      		ldi r31,hi8(dc_mot_enc_count)
 343 0162 8081      		ld r24,Z
 344 0164 9181      		ldd r25,Z+1
 345 0166 0196      		adiw r24,1
 346 0168 9183      		std Z+1,r25
 347 016a 8083      		st Z,r24
 348               	/* epilogue start */
  83:dc_step/dc_motor.c **** }
 349               		.loc 1 83 0
 350 016c FF91      		pop r31
 351 016e EF91      		pop r30
 352 0170 9F91      		pop r25
 353 0172 8F91      		pop r24
 354 0174 0F90      		pop r0
 355 0176 0BBE      		out __RAMPZ__,r0
 356 0178 0F90      		pop r0
 357 017a 0FBE      		out __SREG__,r0
 358 017c 0F90      		pop r0
 359 017e 1F90      		pop r1
 360 0180 1895      		reti
 361               		.cfi_endproc
 362               	.LFE17:
 364               	.global	__vector_2
 366               	__vector_2:
 367               	.LFB18:
  84:dc_step/dc_motor.c **** 
  85:dc_step/dc_motor.c **** ISR (INT1_vect)
  86:dc_step/dc_motor.c **** {
 368               		.loc 1 86 0
 369               		.cfi_startproc
 370 0182 1F92      		push r1
 371               	.LCFI12:
 372               		.cfi_def_cfa_offset 4
 373               		.cfi_offset 1, -3
 374 0184 0F92      		push r0
 375               	.LCFI13:
 376               		.cfi_def_cfa_offset 5
 377               		.cfi_offset 0, -4
 378 0186 0FB6      		in r0,__SREG__
 379 0188 0F92      		push r0
 380 018a 1124      		clr __zero_reg__
 381 018c 0BB6      		in r0,__RAMPZ__
 382 018e 0F92      		push r0
 383 0190 8F93      		push r24
 384               	.LCFI14:
 385               		.cfi_def_cfa_offset 6
 386               		.cfi_offset 24, -5
 387 0192 9F93      		push r25
 388               	.LCFI15:
 389               		.cfi_def_cfa_offset 7
 390               		.cfi_offset 25, -6
 391 0194 EF93      		push r30
 392               	.LCFI16:
 393               		.cfi_def_cfa_offset 8
 394               		.cfi_offset 30, -7
 395 0196 FF93      		push r31
 396               	.LCFI17:
 397               		.cfi_def_cfa_offset 9
 398               		.cfi_offset 31, -8
 399               	/* prologue: Signal */
 400               	/* frame size = 0 */
 401               	/* stack size = 8 */
 402               	.L__stack_usage = 8
  87:dc_step/dc_motor.c **** 	//PORTB^=(1<<7);
  88:dc_step/dc_motor.c **** 	dc_mot_enc_count[1]+=1;
 403               		.loc 1 88 0
 404 0198 E0E0      		ldi r30,lo8(dc_mot_enc_count)
 405 019a F0E0      		ldi r31,hi8(dc_mot_enc_count)
 406 019c 8281      		ldd r24,Z+2
 407 019e 9381      		ldd r25,Z+3
 408 01a0 0196      		adiw r24,1
 409 01a2 9383      		std Z+3,r25
 410 01a4 8283      		std Z+2,r24
 411               	/* epilogue start */
  89:dc_step/dc_motor.c **** }
 412               		.loc 1 89 0
 413 01a6 FF91      		pop r31
 414 01a8 EF91      		pop r30
 415 01aa 9F91      		pop r25
 416 01ac 8F91      		pop r24
 417 01ae 0F90      		pop r0
 418 01b0 0BBE      		out __RAMPZ__,r0
 419 01b2 0F90      		pop r0
 420 01b4 0FBE      		out __SREG__,r0
 421 01b6 0F90      		pop r0
 422 01b8 1F90      		pop r1
 423 01ba 1895      		reti
 424               		.cfi_endproc
 425               	.LFE18:
 427               	.global	__vector_3
 429               	__vector_3:
 430               	.LFB19:
  90:dc_step/dc_motor.c **** 
  91:dc_step/dc_motor.c **** ISR (INT2_vect)
  92:dc_step/dc_motor.c **** {
 431               		.loc 1 92 0
 432               		.cfi_startproc
 433 01bc 1F92      		push r1
 434               	.LCFI18:
 435               		.cfi_def_cfa_offset 4
 436               		.cfi_offset 1, -3
 437 01be 0F92      		push r0
 438               	.LCFI19:
 439               		.cfi_def_cfa_offset 5
 440               		.cfi_offset 0, -4
 441 01c0 0FB6      		in r0,__SREG__
 442 01c2 0F92      		push r0
 443 01c4 1124      		clr __zero_reg__
 444 01c6 0BB6      		in r0,__RAMPZ__
 445 01c8 0F92      		push r0
 446 01ca 8F93      		push r24
 447               	.LCFI20:
 448               		.cfi_def_cfa_offset 6
 449               		.cfi_offset 24, -5
 450 01cc 9F93      		push r25
 451               	.LCFI21:
 452               		.cfi_def_cfa_offset 7
 453               		.cfi_offset 25, -6
 454 01ce EF93      		push r30
 455               	.LCFI22:
 456               		.cfi_def_cfa_offset 8
 457               		.cfi_offset 30, -7
 458 01d0 FF93      		push r31
 459               	.LCFI23:
 460               		.cfi_def_cfa_offset 9
 461               		.cfi_offset 31, -8
 462               	/* prologue: Signal */
 463               	/* frame size = 0 */
 464               	/* stack size = 8 */
 465               	.L__stack_usage = 8
  93:dc_step/dc_motor.c **** 	//PORTB^=(1<<7);
  94:dc_step/dc_motor.c **** 	dc_mot_enc_count[2]+=1;
 466               		.loc 1 94 0
 467 01d2 E0E0      		ldi r30,lo8(dc_mot_enc_count)
 468 01d4 F0E0      		ldi r31,hi8(dc_mot_enc_count)
 469 01d6 8481      		ldd r24,Z+4
 470 01d8 9581      		ldd r25,Z+5
 471 01da 0196      		adiw r24,1
 472 01dc 9583      		std Z+5,r25
 473 01de 8483      		std Z+4,r24
 474               	/* epilogue start */
  95:dc_step/dc_motor.c **** }
 475               		.loc 1 95 0
 476 01e0 FF91      		pop r31
 477 01e2 EF91      		pop r30
 478 01e4 9F91      		pop r25
 479 01e6 8F91      		pop r24
 480 01e8 0F90      		pop r0
 481 01ea 0BBE      		out __RAMPZ__,r0
 482 01ec 0F90      		pop r0
 483 01ee 0FBE      		out __SREG__,r0
 484 01f0 0F90      		pop r0
 485 01f2 1F90      		pop r1
 486 01f4 1895      		reti
 487               		.cfi_endproc
 488               	.LFE19:
 490               	.global	__vector_4
 492               	__vector_4:
 493               	.LFB20:
  96:dc_step/dc_motor.c **** 
  97:dc_step/dc_motor.c **** ISR (INT3_vect)
  98:dc_step/dc_motor.c **** {
 494               		.loc 1 98 0
 495               		.cfi_startproc
 496 01f6 1F92      		push r1
 497               	.LCFI24:
 498               		.cfi_def_cfa_offset 4
 499               		.cfi_offset 1, -3
 500 01f8 0F92      		push r0
 501               	.LCFI25:
 502               		.cfi_def_cfa_offset 5
 503               		.cfi_offset 0, -4
 504 01fa 0FB6      		in r0,__SREG__
 505 01fc 0F92      		push r0
 506 01fe 1124      		clr __zero_reg__
 507 0200 0BB6      		in r0,__RAMPZ__
 508 0202 0F92      		push r0
 509 0204 8F93      		push r24
 510               	.LCFI26:
 511               		.cfi_def_cfa_offset 6
 512               		.cfi_offset 24, -5
 513 0206 9F93      		push r25
 514               	.LCFI27:
 515               		.cfi_def_cfa_offset 7
 516               		.cfi_offset 25, -6
 517 0208 EF93      		push r30
 518               	.LCFI28:
 519               		.cfi_def_cfa_offset 8
 520               		.cfi_offset 30, -7
 521 020a FF93      		push r31
 522               	.LCFI29:
 523               		.cfi_def_cfa_offset 9
 524               		.cfi_offset 31, -8
 525               	/* prologue: Signal */
 526               	/* frame size = 0 */
 527               	/* stack size = 8 */
 528               	.L__stack_usage = 8
  99:dc_step/dc_motor.c **** 	//PORTB^=(1<<7);
 100:dc_step/dc_motor.c **** 	dc_mot_enc_count[3]+=1;
 529               		.loc 1 100 0
 530 020c E0E0      		ldi r30,lo8(dc_mot_enc_count)
 531 020e F0E0      		ldi r31,hi8(dc_mot_enc_count)
 532 0210 8681      		ldd r24,Z+6
 533 0212 9781      		ldd r25,Z+7
 534 0214 0196      		adiw r24,1
 535 0216 9783      		std Z+7,r25
 536 0218 8683      		std Z+6,r24
 537               	/* epilogue start */
 101:dc_step/dc_motor.c **** }
 538               		.loc 1 101 0
 539 021a FF91      		pop r31
 540 021c EF91      		pop r30
 541 021e 9F91      		pop r25
 542 0220 8F91      		pop r24
 543 0222 0F90      		pop r0
 544 0224 0BBE      		out __RAMPZ__,r0
 545 0226 0F90      		pop r0
 546 0228 0FBE      		out __SREG__,r0
 547 022a 0F90      		pop r0
 548 022c 1F90      		pop r1
 549 022e 1895      		reti
 550               		.cfi_endproc
 551               	.LFE20:
 553               	.global	__floatunsisf
 554               	.global	__subsf3
 555               	.global	__mulsf3
 556               	.global	__addsf3
 557               	.global	__gtsf2
 558               	.global	__ltsf2
 559               	.global	ComputePI
 561               	ComputePI:
 562               	.LFB22:
 102:dc_step/dc_motor.c **** 
 103:dc_step/dc_motor.c **** ISR(TIMER2_OVF_vect){ //isr executes every 8 ms
 104:dc_step/dc_motor.c **** 	if(tim2_count<10) tim2_count++; //every 80 ms
 105:dc_step/dc_motor.c **** 	else{
 106:dc_step/dc_motor.c **** 		for(uint8_t i=0; i<4; i++){
 107:dc_step/dc_motor.c **** 			enc_result[i]=((uint32_t)dc_mot_enc_count[i]*12.5*60)/115; //rev per minute
 108:dc_step/dc_motor.c **** 			dc_mot_enc_count[i]=0;
 109:dc_step/dc_motor.c **** 		}
 110:dc_step/dc_motor.c **** 		DcMotPIDGo(set_speed);
 111:dc_step/dc_motor.c **** 		//PORTB^=(1<<7);
 112:dc_step/dc_motor.c **** 		tim2_count=0;
 113:dc_step/dc_motor.c **** 	}
 114:dc_step/dc_motor.c **** }
 115:dc_step/dc_motor.c **** 
 116:dc_step/dc_motor.c **** 
 117:dc_step/dc_motor.c **** float ComputePI(uint16_t input, float setpoint, uint8_t integral_num){
 563               		.loc 1 117 0
 564               		.cfi_startproc
 565               	.LVL13:
 566 0230 8F92      		push r8
 567               	.LCFI30:
 568               		.cfi_def_cfa_offset 4
 569               		.cfi_offset 8, -3
 570 0232 9F92      		push r9
 571               	.LCFI31:
 572               		.cfi_def_cfa_offset 5
 573               		.cfi_offset 9, -4
 574 0234 AF92      		push r10
 575               	.LCFI32:
 576               		.cfi_def_cfa_offset 6
 577               		.cfi_offset 10, -5
 578 0236 BF92      		push r11
 579               	.LCFI33:
 580               		.cfi_def_cfa_offset 7
 581               		.cfi_offset 11, -6
 582 0238 CF92      		push r12
 583               	.LCFI34:
 584               		.cfi_def_cfa_offset 8
 585               		.cfi_offset 12, -7
 586 023a DF92      		push r13
 587               	.LCFI35:
 588               		.cfi_def_cfa_offset 9
 589               		.cfi_offset 13, -8
 590 023c EF92      		push r14
 591               	.LCFI36:
 592               		.cfi_def_cfa_offset 10
 593               		.cfi_offset 14, -9
 594 023e FF92      		push r15
 595               	.LCFI37:
 596               		.cfi_def_cfa_offset 11
 597               		.cfi_offset 15, -10
 598 0240 CF93      		push r28
 599               	.LCFI38:
 600               		.cfi_def_cfa_offset 12
 601               		.cfi_offset 28, -11
 602 0242 DF93      		push r29
 603               	.LCFI39:
 604               		.cfi_def_cfa_offset 13
 605               		.cfi_offset 29, -12
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 10 */
 609               	.L__stack_usage = 10
 610 0244 6A01      		movw r12,r20
 611 0246 7B01      		movw r14,r22
 612 0248 C22F      		mov r28,r18
 613               	.LVL14:
 118:dc_step/dc_motor.c **** 	float kp = 0.7;
 119:dc_step/dc_motor.c **** 	float ki = 0.3;
 120:dc_step/dc_motor.c **** 	float dt = 0.08;
 121:dc_step/dc_motor.c **** 	float error = setpoint - input;
 614               		.loc 1 121 0
 615 024a BC01      		movw r22,r24
 616 024c 80E0      		ldi r24,0
 617 024e 90E0      		ldi r25,0
 618               	.LVL15:
 619 0250 0E94 0000 		call __floatunsisf
 620               	.LVL16:
 621 0254 9B01      		movw r18,r22
 622 0256 AC01      		movw r20,r24
 623 0258 C701      		movw r24,r14
 624 025a B601      		movw r22,r12
 625 025c 0E94 0000 		call __subsf3
 626               	.LVL17:
 627 0260 4B01      		movw r8,r22
 628 0262 5C01      		movw r10,r24
 629               	.LVL18:
 122:dc_step/dc_motor.c **** 	integral[integral_num] = integral[integral_num] + (error*dt);
 630               		.loc 1 122 0
 631 0264 84E0      		ldi r24,lo8(4)
 632 0266 C89F      		mul r28,r24
 633 0268 E001      		movw r28,r0
 634 026a 1124      		clr __zero_reg__
 635               	.LVL19:
 636 026c C050      		subi r28,lo8(-(integral))
 637 026e D040      		sbci r29,hi8(-(integral))
 638 0270 2AE0      		ldi r18,lo8(10)
 639 0272 37ED      		ldi r19,lo8(-41)
 640 0274 43EA      		ldi r20,lo8(-93)
 641 0276 5DE3      		ldi r21,lo8(61)
 642 0278 C501      		movw r24,r10
 643 027a B401      		movw r22,r8
 644 027c 0E94 0000 		call __mulsf3
 645               	.LVL20:
 646 0280 2881      		ld r18,Y
 647 0282 3981      		ldd r19,Y+1
 648 0284 4A81      		ldd r20,Y+2
 649 0286 5B81      		ldd r21,Y+3
 650 0288 0E94 0000 		call __addsf3
 651               	.LVL21:
 652 028c 6B01      		movw r12,r22
 653 028e 7C01      		movw r14,r24
 654               	.LVL22:
 655 0290 6883      		st Y,r22
 656 0292 7983      		std Y+1,r23
 657 0294 8A83      		std Y+2,r24
 658 0296 9B83      		std Y+3,r25
 123:dc_step/dc_motor.c **** 	float control = (error * kp) + (integral[integral_num] * ki);
 659               		.loc 1 123 0
 660 0298 23E3      		ldi r18,lo8(51)
 661 029a 33E3      		ldi r19,lo8(51)
 662 029c 43E3      		ldi r20,lo8(51)
 663 029e 5FE3      		ldi r21,lo8(63)
 664 02a0 C501      		movw r24,r10
 665 02a2 B401      		movw r22,r8
 666 02a4 0E94 0000 		call __mulsf3
 667               	.LVL23:
 668 02a8 4B01      		movw r8,r22
 669 02aa 5C01      		movw r10,r24
 670               	.LVL24:
 671 02ac 2AE9      		ldi r18,lo8(-102)
 672 02ae 39E9      		ldi r19,lo8(-103)
 673 02b0 49E9      		ldi r20,lo8(-103)
 674 02b2 5EE3      		ldi r21,lo8(62)
 675 02b4 C701      		movw r24,r14
 676 02b6 B601      		movw r22,r12
 677 02b8 0E94 0000 		call __mulsf3
 678               	.LVL25:
 679 02bc 9B01      		movw r18,r22
 680 02be AC01      		movw r20,r24
 681 02c0 C501      		movw r24,r10
 682 02c2 B401      		movw r22,r8
 683 02c4 0E94 0000 		call __addsf3
 684               	.LVL26:
 685 02c8 6B01      		movw r12,r22
 686 02ca 7C01      		movw r14,r24
 687               	.LVL27:
 124:dc_step/dc_motor.c **** 	if(control > 255) //ограничение сигнала управления сверху
 688               		.loc 1 124 0
 689 02cc 20E0      		ldi r18,0
 690 02ce 30E0      		ldi r19,0
 691 02d0 4FE7      		ldi r20,lo8(127)
 692 02d2 53E4      		ldi r21,lo8(67)
 693 02d4 0E94 0000 		call __gtsf2
 694               	.LVL28:
 695 02d8 1816      		cp __zero_reg__,r24
 696 02da 04F0      		brlt .L22
 125:dc_step/dc_motor.c **** 	control = 100;
 126:dc_step/dc_motor.c **** 	if(control < 0) //ограничение сигнала управления снизу
 697               		.loc 1 126 0
 698 02dc 20E0      		ldi r18,0
 699 02de 30E0      		ldi r19,0
 700 02e0 A901      		movw r20,r18
 701 02e2 C701      		movw r24,r14
 702 02e4 B601      		movw r22,r12
 703 02e6 0E94 0000 		call __ltsf2
 704               	.LVL29:
 705 02ea 87FF      		sbrs r24,7
 706 02ec 00C0      		rjmp .L20
 127:dc_step/dc_motor.c **** 	control = 0;
 707               		.loc 1 127 0
 708 02ee C12C      		mov r12,__zero_reg__
 709 02f0 D12C      		mov r13,__zero_reg__
 710 02f2 7601      		movw r14,r12
 711               	.LVL30:
 712 02f4 00C0      		rjmp .L20
 713               	.LVL31:
 714               	.L22:
 125:dc_step/dc_motor.c **** 	control = 100;
 715               		.loc 1 125 0
 716 02f6 C12C      		mov r12,__zero_reg__
 717 02f8 D12C      		mov r13,__zero_reg__
 718 02fa 88EC      		ldi r24,lo8(-56)
 719 02fc E82E      		mov r14,r24
 720 02fe 82E4      		ldi r24,lo8(66)
 721 0300 F82E      		mov r15,r24
 722               	.LVL32:
 723               	.L20:
 128:dc_step/dc_motor.c **** 	return(control);
 129:dc_step/dc_motor.c **** }
 724               		.loc 1 129 0
 725 0302 C701      		movw r24,r14
 726 0304 B601      		movw r22,r12
 727               	/* epilogue start */
 728 0306 DF91      		pop r29
 729 0308 CF91      		pop r28
 730 030a FF90      		pop r15
 731 030c EF90      		pop r14
 732 030e DF90      		pop r13
 733 0310 CF90      		pop r12
 734               	.LVL33:
 735 0312 BF90      		pop r11
 736 0314 AF90      		pop r10
 737 0316 9F90      		pop r9
 738 0318 8F90      		pop r8
 739 031a 0895      		ret
 740               		.cfi_endproc
 741               	.LFE22:
 743               	.global	DcMotPIDGo
 745               	DcMotPIDGo:
 746               	.LFB15:
  61:dc_step/dc_motor.c **** 	//float speed_test[4]={0,0,0,0};
 747               		.loc 1 61 0
 748               		.cfi_startproc
 749               	.LVL34:
 750 031c 8F92      		push r8
 751               	.LCFI40:
 752               		.cfi_def_cfa_offset 4
 753               		.cfi_offset 8, -3
 754 031e 9F92      		push r9
 755               	.LCFI41:
 756               		.cfi_def_cfa_offset 5
 757               		.cfi_offset 9, -4
 758 0320 AF92      		push r10
 759               	.LCFI42:
 760               		.cfi_def_cfa_offset 6
 761               		.cfi_offset 10, -5
 762 0322 BF92      		push r11
 763               	.LCFI43:
 764               		.cfi_def_cfa_offset 7
 765               		.cfi_offset 11, -6
 766 0324 EF92      		push r14
 767               	.LCFI44:
 768               		.cfi_def_cfa_offset 8
 769               		.cfi_offset 14, -7
 770 0326 FF92      		push r15
 771               	.LCFI45:
 772               		.cfi_def_cfa_offset 9
 773               		.cfi_offset 15, -8
 774 0328 0F93      		push r16
 775               	.LCFI46:
 776               		.cfi_def_cfa_offset 10
 777               		.cfi_offset 16, -9
 778 032a 1F93      		push r17
 779               	.LCFI47:
 780               		.cfi_def_cfa_offset 11
 781               		.cfi_offset 17, -10
 782 032c CF93      		push r28
 783               	.LCFI48:
 784               		.cfi_def_cfa_offset 12
 785               		.cfi_offset 28, -11
 786               	/* prologue: function */
 787               	/* frame size = 0 */
 788               	/* stack size = 9 */
 789               	.L__stack_usage = 9
 790 032e 4B01      		movw r8,r22
 791 0330 5C01      		movw r10,r24
 792               	.LVL35:
 793 0332 80E0      		ldi r24,lo8(enc_result)
 794 0334 E82E      		mov r14,r24
 795 0336 80E0      		ldi r24,hi8(enc_result)
 796 0338 F82E      		mov r15,r24
 797 033a 00E0      		ldi r16,lo8(reg_speed)
 798 033c 10E0      		ldi r17,hi8(reg_speed)
 799               	.LBB5:
  63:dc_step/dc_motor.c **** 		//reg_speed[i] = ComputePI(GetSpeed()[i], input_speed);
 800               		.loc 1 63 0
 801 033e C0E0      		ldi r28,0
 802               	.LVL36:
 803               	.L25:
  65:dc_step/dc_motor.c **** 	}
 804               		.loc 1 65 0 discriminator 3
 805 0340 2C2F      		mov r18,r28
 806 0342 B501      		movw r22,r10
 807 0344 A401      		movw r20,r8
 808 0346 F701      		movw r30,r14
 809 0348 8191      		ld r24,Z+
 810 034a 9191      		ld r25,Z+
 811 034c 7F01      		movw r14,r30
 812 034e 0E94 0000 		call ComputePI
 813               	.LVL37:
 814 0352 F801      		movw r30,r16
 815 0354 6193      		st Z+,r22
 816 0356 7193      		st Z+,r23
 817 0358 8193      		st Z+,r24
 818 035a 9193      		st Z+,r25
 819 035c 8F01      		movw r16,r30
  63:dc_step/dc_motor.c **** 		//reg_speed[i] = ComputePI(GetSpeed()[i], input_speed);
 820               		.loc 1 63 0 discriminator 3
 821 035e CF5F      		subi r28,lo8(-(1))
 822               	.LVL38:
 823 0360 C430      		cpi r28,lo8(4)
 824 0362 01F4      		brne .L25
 825               	.LBE5:
  67:dc_step/dc_motor.c **** }
 826               		.loc 1 67 0
 827 0364 80E0      		ldi r24,lo8(reg_speed)
 828 0366 90E0      		ldi r25,hi8(reg_speed)
 829               	/* epilogue start */
  68:dc_step/dc_motor.c **** 
 830               		.loc 1 68 0
 831 0368 CF91      		pop r28
 832               	.LVL39:
 833 036a 1F91      		pop r17
 834 036c 0F91      		pop r16
 835 036e FF90      		pop r15
 836 0370 EF90      		pop r14
 837 0372 BF90      		pop r11
 838 0374 AF90      		pop r10
 839 0376 9F90      		pop r9
 840 0378 8F90      		pop r8
 841               	.LVL40:
  67:dc_step/dc_motor.c **** }
 842               		.loc 1 67 0
 843 037a 0C94 0000 		jmp DcMotGo
 844               	.LVL41:
 845               		.cfi_endproc
 846               	.LFE15:
 848               	.global	__divsf3
 849               	.global	__vector_15
 851               	__vector_15:
 852               	.LFB21:
 103:dc_step/dc_motor.c **** 	if(tim2_count<10) tim2_count++; //every 80 ms
 853               		.loc 1 103 0
 854               		.cfi_startproc
 855 037e 1F92      		push r1
 856               	.LCFI49:
 857               		.cfi_def_cfa_offset 4
 858               		.cfi_offset 1, -3
 859 0380 0F92      		push r0
 860               	.LCFI50:
 861               		.cfi_def_cfa_offset 5
 862               		.cfi_offset 0, -4
 863 0382 0FB6      		in r0,__SREG__
 864 0384 0F92      		push r0
 865 0386 1124      		clr __zero_reg__
 866 0388 0BB6      		in r0,__RAMPZ__
 867 038a 0F92      		push r0
 868 038c 0F93      		push r16
 869               	.LCFI51:
 870               		.cfi_def_cfa_offset 6
 871               		.cfi_offset 16, -5
 872 038e 1F93      		push r17
 873               	.LCFI52:
 874               		.cfi_def_cfa_offset 7
 875               		.cfi_offset 17, -6
 876 0390 2F93      		push r18
 877               	.LCFI53:
 878               		.cfi_def_cfa_offset 8
 879               		.cfi_offset 18, -7
 880 0392 3F93      		push r19
 881               	.LCFI54:
 882               		.cfi_def_cfa_offset 9
 883               		.cfi_offset 19, -8
 884 0394 4F93      		push r20
 885               	.LCFI55:
 886               		.cfi_def_cfa_offset 10
 887               		.cfi_offset 20, -9
 888 0396 5F93      		push r21
 889               	.LCFI56:
 890               		.cfi_def_cfa_offset 11
 891               		.cfi_offset 21, -10
 892 0398 6F93      		push r22
 893               	.LCFI57:
 894               		.cfi_def_cfa_offset 12
 895               		.cfi_offset 22, -11
 896 039a 7F93      		push r23
 897               	.LCFI58:
 898               		.cfi_def_cfa_offset 13
 899               		.cfi_offset 23, -12
 900 039c 8F93      		push r24
 901               	.LCFI59:
 902               		.cfi_def_cfa_offset 14
 903               		.cfi_offset 24, -13
 904 039e 9F93      		push r25
 905               	.LCFI60:
 906               		.cfi_def_cfa_offset 15
 907               		.cfi_offset 25, -14
 908 03a0 AF93      		push r26
 909               	.LCFI61:
 910               		.cfi_def_cfa_offset 16
 911               		.cfi_offset 26, -15
 912 03a2 BF93      		push r27
 913               	.LCFI62:
 914               		.cfi_def_cfa_offset 17
 915               		.cfi_offset 27, -16
 916 03a4 CF93      		push r28
 917               	.LCFI63:
 918               		.cfi_def_cfa_offset 18
 919               		.cfi_offset 28, -17
 920 03a6 DF93      		push r29
 921               	.LCFI64:
 922               		.cfi_def_cfa_offset 19
 923               		.cfi_offset 29, -18
 924 03a8 EF93      		push r30
 925               	.LCFI65:
 926               		.cfi_def_cfa_offset 20
 927               		.cfi_offset 30, -19
 928 03aa FF93      		push r31
 929               	.LCFI66:
 930               		.cfi_def_cfa_offset 21
 931               		.cfi_offset 31, -20
 932               	/* prologue: Signal */
 933               	/* frame size = 0 */
 934               	/* stack size = 20 */
 935               	.L__stack_usage = 20
 104:dc_step/dc_motor.c **** 	else{
 936               		.loc 1 104 0
 937 03ac 8091 0000 		lds r24,tim2_count
 938 03b0 9091 0000 		lds r25,tim2_count+1
 939 03b4 8A30      		cpi r24,10
 940 03b6 9105      		cpc r25,__zero_reg__
 941 03b8 00F4      		brsh .L28
 104:dc_step/dc_motor.c **** 	else{
 942               		.loc 1 104 0 is_stmt 0 discriminator 1
 943 03ba 0196      		adiw r24,1
 944 03bc 9093 0000 		sts tim2_count+1,r25
 945 03c0 8093 0000 		sts tim2_count,r24
 946 03c4 00C0      		rjmp .L27
 947               	.L28:
 948 03c6 00E0      		ldi r16,lo8(enc_result)
 949 03c8 10E0      		ldi r17,hi8(enc_result)
 950 03ca C0E0      		ldi r28,lo8(dc_mot_enc_count)
 951 03cc D0E0      		ldi r29,hi8(dc_mot_enc_count)
 952               	.L30:
 953               	.LBB6:
 107:dc_step/dc_motor.c **** 			dc_mot_enc_count[i]=0;
 954               		.loc 1 107 0 is_stmt 1 discriminator 3
 955 03ce 6881      		ld r22,Y
 956 03d0 7981      		ldd r23,Y+1
 957 03d2 80E0      		ldi r24,0
 958 03d4 90E0      		ldi r25,0
 959 03d6 0E94 0000 		call __floatunsisf
 960               	.LVL42:
 961 03da 20E0      		ldi r18,0
 962 03dc 30E0      		ldi r19,0
 963 03de 48E4      		ldi r20,lo8(72)
 964 03e0 51E4      		ldi r21,lo8(65)
 965 03e2 0E94 0000 		call __mulsf3
 966               	.LVL43:
 967 03e6 20E0      		ldi r18,0
 968 03e8 30E0      		ldi r19,0
 969 03ea 40E7      		ldi r20,lo8(112)
 970 03ec 52E4      		ldi r21,lo8(66)
 971 03ee 0E94 0000 		call __mulsf3
 972               	.LVL44:
 973 03f2 20E0      		ldi r18,0
 974 03f4 30E0      		ldi r19,0
 975 03f6 46EE      		ldi r20,lo8(-26)
 976 03f8 52E4      		ldi r21,lo8(66)
 977 03fa 0E94 0000 		call __divsf3
 978               	.LVL45:
 979 03fe 0E94 0000 		call __fixunssfsi
 980               	.LVL46:
 981 0402 F801      		movw r30,r16
 982 0404 6193      		st Z+,r22
 983 0406 7193      		st Z+,r23
 984 0408 8F01      		movw r16,r30
 108:dc_step/dc_motor.c **** 		}
 985               		.loc 1 108 0 discriminator 3
 986 040a 1992      		st Y+,__zero_reg__
 987 040c 1992      		st Y+,__zero_reg__
 988               	.LVL47:
 106:dc_step/dc_motor.c **** 			enc_result[i]=((uint32_t)dc_mot_enc_count[i]*12.5*60)/115; //rev per minute
 989               		.loc 1 106 0 discriminator 3
 990 040e F0E0      		ldi r31,hi8(dc_mot_enc_count+8)
 991 0410 C030      		cpi r28,lo8(dc_mot_enc_count+8)
 992 0412 DF07      		cpc r29,r31
 993 0414 01F4      		brne .L30
 994               	.LBE6:
 110:dc_step/dc_motor.c **** 		//PORTB^=(1<<7);
 995               		.loc 1 110 0
 996 0416 6091 0000 		lds r22,set_speed
 997 041a 7091 0000 		lds r23,set_speed+1
 998 041e 8091 0000 		lds r24,set_speed+2
 999 0422 9091 0000 		lds r25,set_speed+3
 1000 0426 0E94 0000 		call DcMotPIDGo
 1001               	.LVL48:
 112:dc_step/dc_motor.c **** 	}
 1002               		.loc 1 112 0
 1003 042a 1092 0000 		sts tim2_count+1,__zero_reg__
 1004 042e 1092 0000 		sts tim2_count,__zero_reg__
 1005               	.L27:
 1006               	/* epilogue start */
 114:dc_step/dc_motor.c **** 
 1007               		.loc 1 114 0
 1008 0432 FF91      		pop r31
 1009 0434 EF91      		pop r30
 1010 0436 DF91      		pop r29
 1011 0438 CF91      		pop r28
 1012 043a BF91      		pop r27
 1013 043c AF91      		pop r26
 1014 043e 9F91      		pop r25
 1015 0440 8F91      		pop r24
 1016 0442 7F91      		pop r23
 1017 0444 6F91      		pop r22
 1018 0446 5F91      		pop r21
 1019 0448 4F91      		pop r20
 1020 044a 3F91      		pop r19
 1021 044c 2F91      		pop r18
 1022 044e 1F91      		pop r17
 1023 0450 0F91      		pop r16
 1024 0452 0F90      		pop r0
 1025 0454 0BBE      		out __RAMPZ__,r0
 1026 0456 0F90      		pop r0
 1027 0458 0FBE      		out __SREG__,r0
 1028 045a 0F90      		pop r0
 1029 045c 1F90      		pop r1
 1030 045e 1895      		reti
 1031               		.cfi_endproc
 1032               	.LFE21:
 1034               	.global	set_speed
 1035               		.section .bss
 1038               	set_speed:
 1039 0000 0000 0000 		.zero	4
 1040               	.global	integral
 1043               	integral:
 1044 0004 0000 0000 		.zero	16
 1044      0000 0000 
 1044      0000 0000 
 1044      0000 0000 
 1045               	.global	reg_speed
 1048               	reg_speed:
 1049 0014 0000 0000 		.zero	16
 1049      0000 0000 
 1049      0000 0000 
 1049      0000 0000 
 1050               	.global	enc_result
 1053               	enc_result:
 1054 0024 0000 0000 		.zero	8
 1054      0000 0000 
 1055               	.global	dc_mot_enc_count
 1058               	dc_mot_enc_count:
 1059 002c 0000 0000 		.zero	8
 1059      0000 0000 
 1060               	.global	tim2_count
 1063               	tim2_count:
 1064 0034 0000      		.zero	2
 1065               		.text
 1066               	.Letext0:
 1067               		.file 2 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 dc_motor.c
     /tmp/ccbNYWmO.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccbNYWmO.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccbNYWmO.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccbNYWmO.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccbNYWmO.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccbNYWmO.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccbNYWmO.s:13     .text:0000000000000000 Tim2DcMotInit
     /tmp/ccbNYWmO.s:74     .text:000000000000004c GetSpeed
     /tmp/ccbNYWmO.s:1053   .bss:0000000000000024 enc_result
     /tmp/ccbNYWmO.s:94     .text:0000000000000052 SetSpeed
     /tmp/ccbNYWmO.s:1038   .bss:0000000000000000 set_speed
     /tmp/ccbNYWmO.s:176    .text:00000000000000ba DcMotGo
     /tmp/ccbNYWmO.s:239    .text:000000000000010e IntDcMotEcoderInit
     /tmp/ccbNYWmO.s:259    .text:000000000000011a DcMotInit
     /tmp/ccbNYWmO.s:299    .text:0000000000000142 __vector_1
     /tmp/ccbNYWmO.s:1058   .bss:000000000000002c dc_mot_enc_count
     /tmp/ccbNYWmO.s:366    .text:0000000000000182 __vector_2
     /tmp/ccbNYWmO.s:429    .text:00000000000001bc __vector_3
     /tmp/ccbNYWmO.s:492    .text:00000000000001f6 __vector_4
     /tmp/ccbNYWmO.s:561    .text:0000000000000230 ComputePI
     /tmp/ccbNYWmO.s:1043   .bss:0000000000000004 integral
     /tmp/ccbNYWmO.s:745    .text:000000000000031c DcMotPIDGo
     /tmp/ccbNYWmO.s:1048   .bss:0000000000000014 reg_speed
     /tmp/ccbNYWmO.s:851    .text:000000000000037e __vector_15
     /tmp/ccbNYWmO.s:1063   .bss:0000000000000034 tim2_count

UNDEFINED SYMBOLS
__gesf2
__fixsfsi
__floatsisf
__fixunssfsi
__floatunsisf
__subsf3
__mulsf3
__addsf3
__gtsf2
__ltsf2
__divsf3
__do_clear_bss
