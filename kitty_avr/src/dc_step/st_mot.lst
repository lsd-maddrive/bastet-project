   1               		.file	"st_mot.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	StMotTim1Init
  13               	StMotTim1Init:
  14               	.LFB10:
  15               		.file 1 "dc_step/st_mot.c"
   1:dc_step/st_mot.c **** #include "st_mot.h"
   2:dc_step/st_mot.c **** 
   3:dc_step/st_mot.c **** #ifdef ALL_MOT //4WD mode
   4:dc_step/st_mot.c **** uint8_t operate_flag[4]={0, 0, 0, 0};
   5:dc_step/st_mot.c **** uint8_t st_mot_chosen=0;
   6:dc_step/st_mot.c **** uint8_t	operate_master_flag=0;
   7:dc_step/st_mot.c **** 
   8:dc_step/st_mot.c **** uint16_t pulse_count[4]={0,0,0,0}, pulse_setpoint[4]={0,0,0,0};
   9:dc_step/st_mot.c **** float angle_setpoint=0, current_angle=0, set_angle = 0, real_mot_pos = 0;
  10:dc_step/st_mot.c **** uint16_t set_counter =0;
  11:dc_step/st_mot.c **** 
  12:dc_step/st_mot.c **** 
  13:dc_step/st_mot.c **** //pot_koefs
  14:dc_step/st_mot.c **** float p_k[4]={0.268,0.268,0.268,0.268};
  15:dc_step/st_mot.c **** float info[3]={0, 0 ,0};
  16:dc_step/st_mot.c **** 
  17:dc_step/st_mot.c **** 
  18:dc_step/st_mot.c **** 
  19:dc_step/st_mot.c **** 
  20:dc_step/st_mot.c **** void StMotTim1Init(void){
  16               		.loc 1 20 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  21:dc_step/st_mot.c **** 	////timer in normal mode
  22:dc_step/st_mot.c **** 	TCCR1B|=(1<<CS11) | (1<<CS10); //prescaler 64
  22               		.loc 1 22 0
  23 0000 E1E8      		ldi r30,lo8(-127)
  24 0002 F0E0      		ldi r31,0
  25 0004 8081      		ld r24,Z
  26 0006 8360      		ori r24,lo8(3)
  27 0008 8083      		st Z,r24
  23:dc_step/st_mot.c **** 	//TCCR1B|=(1<<CS12); //prescaler 256
  24:dc_step/st_mot.c **** 	
  25:dc_step/st_mot.c **** 	TCNT1=65535-100; //timer period = 400 us, delta = 100
  28               		.loc 1 25 0
  29 000a 8BE9      		ldi r24,lo8(-101)
  30 000c 9FEF      		ldi r25,lo8(-1)
  31 000e 9093 8500 		sts 132+1,r25
  32 0012 8093 8400 		sts 132,r24
  26:dc_step/st_mot.c **** 	TIMSK1|=(1<<TOIE1);
  33               		.loc 1 26 0
  34 0016 EFE6      		ldi r30,lo8(111)
  35 0018 F0E0      		ldi r31,0
  36 001a 8081      		ld r24,Z
  37 001c 8160      		ori r24,lo8(1)
  38 001e 8083      		st Z,r24
  39 0020 0895      		ret
  40               		.cfi_endproc
  41               	.LFE10:
  43               	.global	StMotInit
  45               	StMotInit:
  46               	.LFB11:
  27:dc_step/st_mot.c **** }
  28:dc_step/st_mot.c **** 
  29:dc_step/st_mot.c **** void StMotInit(void){
  47               		.loc 1 29 0
  48               		.cfi_startproc
  49               	/* prologue: function */
  50               	/* frame size = 0 */
  51               	/* stack size = 0 */
  52               	.L__stack_usage = 0
  30:dc_step/st_mot.c **** 	StMotTim1Init();
  53               		.loc 1 30 0
  54 0022 0E94 0000 		call StMotTim1Init
  55               	.LVL0:
  31:dc_step/st_mot.c **** 	
  32:dc_step/st_mot.c **** 	ST_MOT_PUL_DDR|=(1<<DD_PUL1)|(1<<DD_PUL2)|(1<<DD_PUL3)|(1<<DD_PUL4);
  56               		.loc 1 32 0
  57 0026 81B1      		in r24,0x1
  58 0028 8565      		ori r24,lo8(85)
  59 002a 81B9      		out 0x1,r24
  33:dc_step/st_mot.c **** 	ST_MOT_DIR_DDR|=(1<<DD_DIR1)|(1<<DD_DIR2)|(1<<DD_DIR3)|(1<<DD_DIR4);
  60               		.loc 1 33 0
  61 002c 81B1      		in r24,0x1
  62 002e 8A6A      		ori r24,lo8(-86)
  63 0030 81B9      		out 0x1,r24
  64 0032 0895      		ret
  65               		.cfi_endproc
  66               	.LFE11:
  68               	.global	GetInfo
  70               	GetInfo:
  71               	.LFB14:
  34:dc_step/st_mot.c **** 	//ST_MOT_PUL_DDR|=(1<<DD_PUL1);
  35:dc_step/st_mot.c **** 	//ST_MOT_DIR_DDR|=(1<<DD_DIR1); 
  36:dc_step/st_mot.c **** 
  37:dc_step/st_mot.c **** }
  38:dc_step/st_mot.c **** 
  39:dc_step/st_mot.c **** ISR(TIMER1_OVF_vect){
  40:dc_step/st_mot.c **** 	TCNT1=65535-100; //timer period = 400 us
  41:dc_step/st_mot.c **** 	for(int n = 0; n<4; n++){
  42:dc_step/st_mot.c **** 		if (operate_flag[n])
  43:dc_step/st_mot.c **** 		{
  44:dc_step/st_mot.c **** 			if (pulse_count[n] < pulse_setpoint[n]){
  45:dc_step/st_mot.c **** 				StMotPul(n);
  46:dc_step/st_mot.c **** 				pulse_count[n]++;
  47:dc_step/st_mot.c **** 				
  48:dc_step/st_mot.c **** 			}
  49:dc_step/st_mot.c **** 			else
  50:dc_step/st_mot.c **** 			{
  51:dc_step/st_mot.c **** 				float real_mot_pos;
  52:dc_step/st_mot.c **** 				real_mot_pos = GetMotPos(n);
  53:dc_step/st_mot.c **** 				StMotCorrectPos(n, real_mot_pos);
  54:dc_step/st_mot.c **** 			}
  55:dc_step/st_mot.c **** 		}
  56:dc_step/st_mot.c **** 	}
  57:dc_step/st_mot.c **** }
  58:dc_step/st_mot.c **** 
  59:dc_step/st_mot.c **** 
  60:dc_step/st_mot.c **** void StMotCorrectPos(uint8_t n, float real_mot_pos){
  61:dc_step/st_mot.c **** 	if((real_mot_pos>=(set_angle-POS_ERR)) && (real_mot_pos<=(set_angle+POS_ERR)))
  62:dc_step/st_mot.c **** 	{
  63:dc_step/st_mot.c **** 		operate_flag[n]=0;
  64:dc_step/st_mot.c **** 		current_angle=set_angle;
  65:dc_step/st_mot.c **** 		pulse_count[n]=0;
  66:dc_step/st_mot.c **** 		
  67:dc_step/st_mot.c **** 	}
  68:dc_step/st_mot.c **** 	else
  69:dc_step/st_mot.c **** 	{
  70:dc_step/st_mot.c **** 		operate_flag[n]=1;
  71:dc_step/st_mot.c **** 		float angle_setpoint_delta=set_angle-real_mot_pos;
  72:dc_step/st_mot.c **** 		StMotDir(angle_setpoint_delta, n);
  73:dc_step/st_mot.c **** 		pulse_setpoint[n]=abs(angle_setpoint_delta) * ANGLE_TO_STEPS;
  74:dc_step/st_mot.c **** 		pulse_count[n]=0;
  75:dc_step/st_mot.c **** 	}
  76:dc_step/st_mot.c **** 	
  77:dc_step/st_mot.c **** }
  78:dc_step/st_mot.c **** float* GetInfo(void){
  72               		.loc 1 78 0
  73               		.cfi_startproc
  74               	/* prologue: function */
  75               	/* frame size = 0 */
  76               	/* stack size = 0 */
  77               	.L__stack_usage = 0
  79:dc_step/st_mot.c **** 	info[0] = set_angle;
  78               		.loc 1 79 0
  79 0034 E0E0      		ldi r30,lo8(info)
  80 0036 F0E0      		ldi r31,hi8(info)
  81 0038 8091 0000 		lds r24,set_angle
  82 003c 9091 0000 		lds r25,set_angle+1
  83 0040 A091 0000 		lds r26,set_angle+2
  84 0044 B091 0000 		lds r27,set_angle+3
  85 0048 8083      		st Z,r24
  86 004a 9183      		std Z+1,r25
  87 004c A283      		std Z+2,r26
  88 004e B383      		std Z+3,r27
  80:dc_step/st_mot.c **** 	info[1] = POS_ERR;
  89               		.loc 1 80 0
  90 0050 80E0      		ldi r24,0
  91 0052 90E0      		ldi r25,0
  92 0054 A0E0      		ldi r26,0
  93 0056 B0E4      		ldi r27,lo8(64)
  94 0058 8483      		std Z+4,r24
  95 005a 9583      		std Z+5,r25
  96 005c A683      		std Z+6,r26
  97 005e B783      		std Z+7,r27
  81:dc_step/st_mot.c **** 	//info[2] = operate_flag;
  82:dc_step/st_mot.c **** 	return info;
  83:dc_step/st_mot.c **** }
  98               		.loc 1 83 0
  99 0060 CF01      		movw r24,r30
 100 0062 0895      		ret
 101               		.cfi_endproc
 102               	.LFE14:
 104               	.global	StMotPul
 106               	StMotPul:
 107               	.LFB15:
  84:dc_step/st_mot.c **** 
  85:dc_step/st_mot.c **** 
  86:dc_step/st_mot.c **** 
  87:dc_step/st_mot.c **** void StMotPul(uint8_t n){
 108               		.loc 1 87 0
 109               		.cfi_startproc
 110               	.LVL1:
 111               	/* prologue: function */
 112               	/* frame size = 0 */
 113               	/* stack size = 0 */
 114               	.L__stack_usage = 0
  88:dc_step/st_mot.c **** 	//PUL pin are 0 2 4 6
  89:dc_step/st_mot.c **** 	ST_MOT_PUL_PORT^=(1<<(n*2));
 115               		.loc 1 89 0
 116 0064 42B1      		in r20,0x2
 117 0066 880F      		lsl r24
 118               	.LVL2:
 119 0068 21E0      		ldi r18,lo8(1)
 120 006a 30E0      		ldi r19,0
 121 006c B901      		movw r22,r18
 122 006e 00C0      		rjmp 2f
 123               		1:
 124 0070 660F      		lsl r22
 125 0072 771F      		rol r23
 126               		2:
 127 0074 8A95      		dec r24
 128 0076 02F4      		brpl 1b
 129 0078 CB01      		movw r24,r22
 130 007a 8427      		eor r24,r20
 131 007c 82B9      		out 0x2,r24
 132 007e 0895      		ret
 133               		.cfi_endproc
 134               	.LFE15:
 136               	.global	__gesf2
 137               	.global	StMotDir
 139               	StMotDir:
 140               	.LFB16:
  90:dc_step/st_mot.c **** 
  91:dc_step/st_mot.c **** }
  92:dc_step/st_mot.c **** 
  93:dc_step/st_mot.c **** void StMotDir(float direction, uint8_t n){
 141               		.loc 1 93 0
 142               		.cfi_startproc
 143               	.LVL3:
 144 0080 CF93      		push r28
 145               	.LCFI0:
 146               		.cfi_def_cfa_offset 4
 147               		.cfi_offset 28, -3
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 1 */
 151               	.L__stack_usage = 1
 152 0082 C42F      		mov r28,r20
 153               	.LVL4:
  94:dc_step/st_mot.c **** 	uint8_t port_num = 2*n+1;
  95:dc_step/st_mot.c **** 	if (direction >= 0){
 154               		.loc 1 95 0
 155 0084 20E0      		ldi r18,0
 156 0086 30E0      		ldi r19,0
 157 0088 A901      		movw r20,r18
 158 008a 0E94 0000 		call __gesf2
 159               	.LVL5:
 160 008e 87FD      		sbrc r24,7
 161 0090 00C0      		rjmp .L10
  96:dc_step/st_mot.c **** 		ST_MOT_DIR_PORT|=(1<<port_num);
 162               		.loc 1 96 0
 163 0092 22B1      		in r18,0x2
 164 0094 CC0F      		lsl r28
 165               	.LVL6:
 166 0096 CF5F      		subi r28,lo8(-(1))
 167               	.LVL7:
 168 0098 81E0      		ldi r24,lo8(1)
 169 009a 90E0      		ldi r25,0
 170 009c 00C0      		rjmp 2f
 171               		1:
 172 009e 880F      		lsl r24
 173               		2:
 174 00a0 CA95      		dec r28
 175 00a2 02F4      		brpl 1b
 176 00a4 822B      		or r24,r18
 177 00a6 82B9      		out 0x2,r24
 178 00a8 00C0      		rjmp .L5
 179               	.LVL8:
 180               	.L10:
  97:dc_step/st_mot.c **** 	}
  98:dc_step/st_mot.c **** 	else{
  99:dc_step/st_mot.c **** 		ST_MOT_DIR_PORT&=(0<<port_num);
 181               		.loc 1 99 0
 182 00aa 82B1      		in r24,0x2
 183 00ac 12B8      		out 0x2,__zero_reg__
 184               	.LVL9:
 185               	.L5:
 186               	/* epilogue start */
 100:dc_step/st_mot.c **** 	}
 101:dc_step/st_mot.c **** }
 187               		.loc 1 101 0
 188 00ae CF91      		pop r28
 189 00b0 0895      		ret
 190               		.cfi_endproc
 191               	.LFE16:
 193               	.global	__subsf3
 194               	.global	__lesf2
 195               	.global	__addsf3
 196               	.global	__fixsfsi
 197               	.global	__floatsisf
 198               	.global	__mulsf3
 199               	.global	__divsf3
 200               	.global	__fixunssfsi
 201               	.global	StMotCorrectPos
 203               	StMotCorrectPos:
 204               	.LFB13:
  60:dc_step/st_mot.c **** 	if((real_mot_pos>=(set_angle-POS_ERR)) && (real_mot_pos<=(set_angle+POS_ERR)))
 205               		.loc 1 60 0
 206               		.cfi_startproc
 207               	.LVL10:
 208 00b2 8F92      		push r8
 209               	.LCFI1:
 210               		.cfi_def_cfa_offset 4
 211               		.cfi_offset 8, -3
 212 00b4 9F92      		push r9
 213               	.LCFI2:
 214               		.cfi_def_cfa_offset 5
 215               		.cfi_offset 9, -4
 216 00b6 AF92      		push r10
 217               	.LCFI3:
 218               		.cfi_def_cfa_offset 6
 219               		.cfi_offset 10, -5
 220 00b8 BF92      		push r11
 221               	.LCFI4:
 222               		.cfi_def_cfa_offset 7
 223               		.cfi_offset 11, -6
 224 00ba CF92      		push r12
 225               	.LCFI5:
 226               		.cfi_def_cfa_offset 8
 227               		.cfi_offset 12, -7
 228 00bc DF92      		push r13
 229               	.LCFI6:
 230               		.cfi_def_cfa_offset 9
 231               		.cfi_offset 13, -8
 232 00be EF92      		push r14
 233               	.LCFI7:
 234               		.cfi_def_cfa_offset 10
 235               		.cfi_offset 14, -9
 236 00c0 FF92      		push r15
 237               	.LCFI8:
 238               		.cfi_def_cfa_offset 11
 239               		.cfi_offset 15, -10
 240 00c2 0F93      		push r16
 241               	.LCFI9:
 242               		.cfi_def_cfa_offset 12
 243               		.cfi_offset 16, -11
 244 00c4 1F93      		push r17
 245               	.LCFI10:
 246               		.cfi_def_cfa_offset 13
 247               		.cfi_offset 17, -12
 248 00c6 CF93      		push r28
 249               	.LCFI11:
 250               		.cfi_def_cfa_offset 14
 251               		.cfi_offset 28, -13
 252 00c8 DF93      		push r29
 253               	.LCFI12:
 254               		.cfi_def_cfa_offset 15
 255               		.cfi_offset 29, -14
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 12 */
 259               	.L__stack_usage = 12
 260 00ca 182F      		mov r17,r24
 261 00cc 4A01      		movw r8,r20
 262 00ce 5B01      		movw r10,r22
  61:dc_step/st_mot.c **** 	{
 263               		.loc 1 61 0
 264 00d0 C090 0000 		lds r12,set_angle
 265 00d4 D090 0000 		lds r13,set_angle+1
 266 00d8 E090 0000 		lds r14,set_angle+2
 267 00dc F090 0000 		lds r15,set_angle+3
 268 00e0 20E0      		ldi r18,0
 269 00e2 30E0      		ldi r19,0
 270 00e4 40E0      		ldi r20,0
 271 00e6 50E4      		ldi r21,lo8(64)
 272 00e8 C701      		movw r24,r14
 273 00ea B601      		movw r22,r12
 274 00ec 0E94 0000 		call __subsf3
 275               	.LVL11:
 276 00f0 A501      		movw r20,r10
 277 00f2 9401      		movw r18,r8
 278 00f4 0E94 0000 		call __lesf2
 279               	.LVL12:
 280 00f8 C12F      		mov r28,r17
 281 00fa D0E0      		ldi r29,0
 282 00fc 1816      		cp __zero_reg__,r24
 283 00fe 04F0      		brlt .L13
  61:dc_step/st_mot.c **** 	{
 284               		.loc 1 61 0 is_stmt 0 discriminator 1
 285 0100 20E0      		ldi r18,0
 286 0102 30E0      		ldi r19,0
 287 0104 40E0      		ldi r20,0
 288 0106 50E4      		ldi r21,lo8(64)
 289 0108 C701      		movw r24,r14
 290 010a B601      		movw r22,r12
 291 010c 0E94 0000 		call __addsf3
 292               	.LVL13:
 293 0110 9B01      		movw r18,r22
 294 0112 AC01      		movw r20,r24
 295 0114 C501      		movw r24,r10
 296 0116 B401      		movw r22,r8
 297 0118 0E94 0000 		call __lesf2
 298               	.LVL14:
 299 011c 1816      		cp __zero_reg__,r24
 300 011e 04F0      		brlt .L13
  63:dc_step/st_mot.c **** 		current_angle=set_angle;
 301               		.loc 1 63 0 is_stmt 1
 302 0120 FE01      		movw r30,r28
 303 0122 E050      		subi r30,lo8(-(operate_flag))
 304 0124 F040      		sbci r31,hi8(-(operate_flag))
 305 0126 1082      		st Z,__zero_reg__
  64:dc_step/st_mot.c **** 		pulse_count[n]=0;
 306               		.loc 1 64 0
 307 0128 C092 0000 		sts current_angle,r12
 308 012c D092 0000 		sts current_angle+1,r13
 309 0130 E092 0000 		sts current_angle+2,r14
 310 0134 F092 0000 		sts current_angle+3,r15
  65:dc_step/st_mot.c **** 		
 311               		.loc 1 65 0
 312 0138 CC0F      		lsl r28
 313 013a DD1F      		rol r29
 314 013c 00C0      		rjmp .L20
 315               	.L13:
 316               	.LBB2:
  70:dc_step/st_mot.c **** 		float angle_setpoint_delta=set_angle-real_mot_pos;
 317               		.loc 1 70 0
 318 013e FE01      		movw r30,r28
 319 0140 E050      		subi r30,lo8(-(operate_flag))
 320 0142 F040      		sbci r31,hi8(-(operate_flag))
 321 0144 81E0      		ldi r24,lo8(1)
 322 0146 8083      		st Z,r24
  71:dc_step/st_mot.c **** 		StMotDir(angle_setpoint_delta, n);
 323               		.loc 1 71 0
 324 0148 A501      		movw r20,r10
 325 014a 9401      		movw r18,r8
 326 014c C701      		movw r24,r14
 327 014e B601      		movw r22,r12
 328 0150 0E94 0000 		call __subsf3
 329               	.LVL15:
 330 0154 6B01      		movw r12,r22
 331 0156 7C01      		movw r14,r24
 332               	.LVL16:
  72:dc_step/st_mot.c **** 		pulse_setpoint[n]=abs(angle_setpoint_delta) * ANGLE_TO_STEPS;
 333               		.loc 1 72 0
 334 0158 412F      		mov r20,r17
 335 015a 0E94 0000 		call StMotDir
 336               	.LVL17:
  73:dc_step/st_mot.c **** 		pulse_count[n]=0;
 337               		.loc 1 73 0
 338 015e CC0F      		lsl r28
 339 0160 DD1F      		rol r29
 340 0162 8E01      		movw r16,r28
 341 0164 0050      		subi r16,lo8(-(pulse_setpoint))
 342 0166 1040      		sbci r17,hi8(-(pulse_setpoint))
 343 0168 C701      		movw r24,r14
 344 016a B601      		movw r22,r12
 345 016c 0E94 0000 		call __fixsfsi
 346               	.LVL18:
 347 0170 9B01      		movw r18,r22
 348 0172 77FF      		sbrs r23,7
 349 0174 00C0      		rjmp .L17
 350 0176 2227      		clr r18
 351 0178 3327      		clr r19
 352 017a 261B      		sub r18,r22
 353 017c 370B      		sbc r19,r23
 354               	.L17:
 355 017e B901      		movw r22,r18
 356 0180 330F      		lsl r19
 357 0182 880B      		sbc r24,r24
 358 0184 990B      		sbc r25,r25
 359 0186 0E94 0000 		call __floatsisf
 360               	.LVL19:
 361 018a 20E0      		ldi r18,0
 362 018c 30E0      		ldi r19,0
 363 018e 48E4      		ldi r20,lo8(72)
 364 0190 55E4      		ldi r21,lo8(69)
 365 0192 0E94 0000 		call __mulsf3
 366               	.LVL20:
 367 0196 9B01      		movw r18,r22
 368 0198 AC01      		movw r20,r24
 369 019a 0E94 0000 		call __addsf3
 370               	.LVL21:
 371 019e 20E0      		ldi r18,0
 372 01a0 30E0      		ldi r19,0
 373 01a2 44EB      		ldi r20,lo8(-76)
 374 01a4 53E4      		ldi r21,lo8(67)
 375 01a6 0E94 0000 		call __divsf3
 376               	.LVL22:
 377 01aa 0E94 0000 		call __fixunssfsi
 378               	.LVL23:
 379 01ae F801      		movw r30,r16
 380 01b0 7183      		std Z+1,r23
 381 01b2 6083      		st Z,r22
 382               	.LVL24:
 383               	.L20:
  74:dc_step/st_mot.c **** 	}
 384               		.loc 1 74 0
 385 01b4 C050      		subi r28,lo8(-(pulse_count))
 386 01b6 D040      		sbci r29,hi8(-(pulse_count))
 387 01b8 1982      		std Y+1,__zero_reg__
 388 01ba 1882      		st Y,__zero_reg__
 389               	/* epilogue start */
 390               	.LBE2:
  77:dc_step/st_mot.c **** float* GetInfo(void){
 391               		.loc 1 77 0
 392 01bc DF91      		pop r29
 393 01be CF91      		pop r28
 394 01c0 1F91      		pop r17
 395               	.LVL25:
 396 01c2 0F91      		pop r16
 397 01c4 FF90      		pop r15
 398 01c6 EF90      		pop r14
 399 01c8 DF90      		pop r13
 400 01ca CF90      		pop r12
 401 01cc BF90      		pop r11
 402 01ce AF90      		pop r10
 403 01d0 9F90      		pop r9
 404 01d2 8F90      		pop r8
 405               	.LVL26:
 406 01d4 0895      		ret
 407               		.cfi_endproc
 408               	.LFE13:
 410               	.global	__ltsf2
 411               	.global	__gtsf2
 412               	.global	__nesf2
 413               	.global	SetAngle
 415               	SetAngle:
 416               	.LFB17:
 102:dc_step/st_mot.c **** 
 103:dc_step/st_mot.c **** void SetAngle(float angle){
 417               		.loc 1 103 0
 418               		.cfi_startproc
 419               	.LVL27:
 420 01d6 8F92      		push r8
 421               	.LCFI13:
 422               		.cfi_def_cfa_offset 4
 423               		.cfi_offset 8, -3
 424 01d8 9F92      		push r9
 425               	.LCFI14:
 426               		.cfi_def_cfa_offset 5
 427               		.cfi_offset 9, -4
 428 01da AF92      		push r10
 429               	.LCFI15:
 430               		.cfi_def_cfa_offset 6
 431               		.cfi_offset 10, -5
 432 01dc BF92      		push r11
 433               	.LCFI16:
 434               		.cfi_def_cfa_offset 7
 435               		.cfi_offset 11, -6
 436 01de CF92      		push r12
 437               	.LCFI17:
 438               		.cfi_def_cfa_offset 8
 439               		.cfi_offset 12, -7
 440 01e0 DF92      		push r13
 441               	.LCFI18:
 442               		.cfi_def_cfa_offset 9
 443               		.cfi_offset 13, -8
 444 01e2 EF92      		push r14
 445               	.LCFI19:
 446               		.cfi_def_cfa_offset 10
 447               		.cfi_offset 14, -9
 448 01e4 FF92      		push r15
 449               	.LCFI20:
 450               		.cfi_def_cfa_offset 11
 451               		.cfi_offset 15, -10
 452 01e6 0F93      		push r16
 453               	.LCFI21:
 454               		.cfi_def_cfa_offset 12
 455               		.cfi_offset 16, -11
 456 01e8 1F93      		push r17
 457               	.LCFI22:
 458               		.cfi_def_cfa_offset 13
 459               		.cfi_offset 17, -12
 460 01ea CF93      		push r28
 461               	.LCFI23:
 462               		.cfi_def_cfa_offset 14
 463               		.cfi_offset 28, -13
 464 01ec DF93      		push r29
 465               	.LCFI24:
 466               		.cfi_def_cfa_offset 15
 467               		.cfi_offset 29, -14
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 12 */
 471               	.L__stack_usage = 12
 472 01ee 6B01      		movw r12,r22
 473 01f0 7C01      		movw r14,r24
 104:dc_step/st_mot.c **** 
 105:dc_step/st_mot.c **** 	if(angle<MIN_ANGLE) angle=MIN_ANGLE;
 474               		.loc 1 105 0
 475 01f2 20E0      		ldi r18,0
 476 01f4 30E0      		ldi r19,0
 477 01f6 44EB      		ldi r20,lo8(-76)
 478 01f8 52EC      		ldi r21,lo8(-62)
 479 01fa 0E94 0000 		call __ltsf2
 480               	.LVL28:
 481 01fe 87FD      		sbrc r24,7
 482 0200 00C0      		rjmp .L31
 106:dc_step/st_mot.c **** 	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
 483               		.loc 1 106 0
 484 0202 20E0      		ldi r18,0
 485 0204 30E0      		ldi r19,0
 486 0206 44EB      		ldi r20,lo8(-76)
 487 0208 52E4      		ldi r21,lo8(66)
 488 020a C701      		movw r24,r14
 489 020c B601      		movw r22,r12
 490 020e 0E94 0000 		call __gtsf2
 491               	.LVL29:
 492 0212 1816      		cp __zero_reg__,r24
 493 0214 04F4      		brge .L22
 494 0216 C12C      		mov r12,__zero_reg__
 495 0218 D12C      		mov r13,__zero_reg__
 496 021a 94EB      		ldi r25,lo8(-76)
 497 021c E92E      		mov r14,r25
 498 021e 92E4      		ldi r25,lo8(66)
 499 0220 F92E      		mov r15,r25
 500               	.LVL30:
 501 0222 00C0      		rjmp .L22
 502               	.LVL31:
 503               	.L31:
 105:dc_step/st_mot.c **** 	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
 504               		.loc 1 105 0
 505 0224 C12C      		mov r12,__zero_reg__
 506 0226 D12C      		mov r13,__zero_reg__
 507 0228 84EB      		ldi r24,lo8(-76)
 508 022a E82E      		mov r14,r24
 509 022c 82EC      		ldi r24,lo8(-62)
 510 022e F82E      		mov r15,r24
 511               	.LVL32:
 512               	.L22:
 107:dc_step/st_mot.c **** 	operate_master_flag = operate_flag[0] | operate_flag[1] | operate_flag[2] | operate_flag[3];
 513               		.loc 1 107 0
 514 0230 C091 0000 		lds r28,operate_flag
 515 0234 8091 0000 		lds r24,operate_flag+1
 516 0238 C82B      		or r28,r24
 517 023a 8091 0000 		lds r24,operate_flag+2
 518 023e C82B      		or r28,r24
 519 0240 8091 0000 		lds r24,operate_flag+3
 520 0244 C82B      		or r28,r24
 521 0246 C093 0000 		sts operate_master_flag,r28
 108:dc_step/st_mot.c **** 	if ((angle!=current_angle) & (operate_master_flag == 0))
 522               		.loc 1 108 0
 523 024a 8090 0000 		lds r8,current_angle
 524 024e 9090 0000 		lds r9,current_angle+1
 525 0252 A090 0000 		lds r10,current_angle+2
 526 0256 B090 0000 		lds r11,current_angle+3
 527 025a A501      		movw r20,r10
 528 025c 9401      		movw r18,r8
 529 025e C701      		movw r24,r14
 530 0260 B601      		movw r22,r12
 531 0262 0E94 0000 		call __nesf2
 532               	.LVL33:
 533 0266 8823      		tst r24
 534 0268 01F4      		brne .+2
 535 026a 00C0      		rjmp .L21
 536 026c C111      		cpse r28,__zero_reg__
 537 026e 00C0      		rjmp .L21
 109:dc_step/st_mot.c **** 	{
 110:dc_step/st_mot.c **** 		set_angle = angle;
 538               		.loc 1 110 0
 539 0270 C092 0000 		sts set_angle,r12
 540 0274 D092 0000 		sts set_angle+1,r13
 541 0278 E092 0000 		sts set_angle+2,r14
 542 027c F092 0000 		sts set_angle+3,r15
 111:dc_step/st_mot.c **** 		angle_setpoint = angle - current_angle;
 543               		.loc 1 111 0
 544 0280 A501      		movw r20,r10
 545 0282 9401      		movw r18,r8
 546 0284 C701      		movw r24,r14
 547 0286 B601      		movw r22,r12
 548 0288 0E94 0000 		call __subsf3
 549               	.LVL34:
 550 028c 6093 0000 		sts angle_setpoint,r22
 551 0290 7093 0000 		sts angle_setpoint+1,r23
 552 0294 8093 0000 		sts angle_setpoint+2,r24
 553 0298 9093 0000 		sts angle_setpoint+3,r25
 554               	.LVL35:
 555 029c 00E0      		ldi r16,lo8(pulse_setpoint)
 556 029e 10E0      		ldi r17,hi8(pulse_setpoint)
 557 02a0 C0E0      		ldi r28,lo8(operate_flag)
 558 02a2 D0E0      		ldi r29,hi8(operate_flag)
 559 02a4 F12C      		mov r15,__zero_reg__
 560               	.LBB3:
 112:dc_step/st_mot.c **** 		for (int i=0; i<4; i++)
 113:dc_step/st_mot.c **** 		{
 114:dc_step/st_mot.c **** 			StMotDir(angle_setpoint, i);
 115:dc_step/st_mot.c **** 			pulse_setpoint[i]=abs(angle_setpoint) * ANGLE_TO_STEPS;
 116:dc_step/st_mot.c **** 			operate_flag[i] = 1;
 561               		.loc 1 116 0
 562 02a6 EE24      		clr r14
 563 02a8 E394      		inc r14
 564               	.LVL36:
 565               	.L29:
 114:dc_step/st_mot.c **** 			pulse_setpoint[i]=abs(angle_setpoint) * ANGLE_TO_STEPS;
 566               		.loc 1 114 0 discriminator 3
 567 02aa 6091 0000 		lds r22,angle_setpoint
 568 02ae 7091 0000 		lds r23,angle_setpoint+1
 569 02b2 8091 0000 		lds r24,angle_setpoint+2
 570 02b6 9091 0000 		lds r25,angle_setpoint+3
 571 02ba 4F2D      		mov r20,r15
 572 02bc 0E94 0000 		call StMotDir
 573               	.LVL37:
 115:dc_step/st_mot.c **** 			operate_flag[i] = 1;
 574               		.loc 1 115 0 discriminator 3
 575 02c0 6091 0000 		lds r22,angle_setpoint
 576 02c4 7091 0000 		lds r23,angle_setpoint+1
 577 02c8 8091 0000 		lds r24,angle_setpoint+2
 578 02cc 9091 0000 		lds r25,angle_setpoint+3
 579 02d0 0E94 0000 		call __fixsfsi
 580               	.LVL38:
 581 02d4 9B01      		movw r18,r22
 582 02d6 77FF      		sbrs r23,7
 583 02d8 00C0      		rjmp .L28
 584 02da 2227      		clr r18
 585 02dc 3327      		clr r19
 586 02de 261B      		sub r18,r22
 587 02e0 370B      		sbc r19,r23
 588               	.L28:
 589 02e2 B901      		movw r22,r18
 590 02e4 330F      		lsl r19
 591 02e6 880B      		sbc r24,r24
 592 02e8 990B      		sbc r25,r25
 593 02ea 0E94 0000 		call __floatsisf
 594               	.LVL39:
 595 02ee 20E0      		ldi r18,0
 596 02f0 30E0      		ldi r19,0
 597 02f2 48E4      		ldi r20,lo8(72)
 598 02f4 55E4      		ldi r21,lo8(69)
 599 02f6 0E94 0000 		call __mulsf3
 600               	.LVL40:
 601 02fa 9B01      		movw r18,r22
 602 02fc AC01      		movw r20,r24
 603 02fe 0E94 0000 		call __addsf3
 604               	.LVL41:
 605 0302 20E0      		ldi r18,0
 606 0304 30E0      		ldi r19,0
 607 0306 44EB      		ldi r20,lo8(-76)
 608 0308 53E4      		ldi r21,lo8(67)
 609 030a 0E94 0000 		call __divsf3
 610               	.LVL42:
 611 030e 0E94 0000 		call __fixunssfsi
 612               	.LVL43:
 613 0312 F801      		movw r30,r16
 614 0314 6193      		st Z+,r22
 615 0316 7193      		st Z+,r23
 616 0318 8F01      		movw r16,r30
 617               		.loc 1 116 0 discriminator 3
 618 031a E992      		st Y+,r14
 619               	.LVL44:
 620 031c F394      		inc r15
 112:dc_step/st_mot.c **** 		for (int i=0; i<4; i++)
 621               		.loc 1 112 0 discriminator 3
 622 031e F4E0      		ldi r31,lo8(4)
 623 0320 FF12      		cpse r15,r31
 624 0322 00C0      		rjmp .L29
 625               	.LVL45:
 626               	.L21:
 627               	/* epilogue start */
 628               	.LBE3:
 117:dc_step/st_mot.c **** 		}
 118:dc_step/st_mot.c **** 	}
 119:dc_step/st_mot.c **** 
 120:dc_step/st_mot.c **** }
 629               		.loc 1 120 0
 630 0324 DF91      		pop r29
 631 0326 CF91      		pop r28
 632 0328 1F91      		pop r17
 633 032a 0F91      		pop r16
 634 032c FF90      		pop r15
 635 032e EF90      		pop r14
 636 0330 DF90      		pop r13
 637 0332 CF90      		pop r12
 638               	.LVL46:
 639 0334 BF90      		pop r11
 640 0336 AF90      		pop r10
 641 0338 9F90      		pop r9
 642 033a 8F90      		pop r8
 643 033c 0895      		ret
 644               		.cfi_endproc
 645               	.LFE17:
 647               	.global	__floatunsisf
 648               	.global	GetMotPos
 650               	GetMotPos:
 651               	.LFB18:
 121:dc_step/st_mot.c **** 
 122:dc_step/st_mot.c **** float GetMotPos(uint8_t n){
 652               		.loc 1 122 0
 653               		.cfi_startproc
 654               	.LVL47:
 655 033e CF93      		push r28
 656               	.LCFI25:
 657               		.cfi_def_cfa_offset 4
 658               		.cfi_offset 28, -3
 659 0340 DF93      		push r29
 660               	.LCFI26:
 661               		.cfi_def_cfa_offset 5
 662               		.cfi_offset 29, -4
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 2 */
 666               	.L__stack_usage = 2
 667 0342 C82F      		mov r28,r24
 123:dc_step/st_mot.c **** 	float real_mot_pos;
 124:dc_step/st_mot.c **** 	real_mot_pos=(512.0f-(float)AdcGetPos()[n])*p_k[n];
 668               		.loc 1 124 0
 669 0344 0E94 0000 		call AdcGetPos
 670               	.LVL48:
 671 0348 D0E0      		ldi r29,0
 672 034a 9E01      		movw r18,r28
 673 034c 220F      		lsl r18
 674 034e 331F      		rol r19
 675 0350 820F      		add r24,r18
 676 0352 931F      		adc r25,r19
 677               	.LVL49:
 125:dc_step/st_mot.c **** 	return -real_mot_pos;
 678               		.loc 1 125 0
 679 0354 FC01      		movw r30,r24
 680 0356 6081      		ld r22,Z
 681 0358 7181      		ldd r23,Z+1
 682 035a 80E0      		ldi r24,0
 683 035c 90E0      		ldi r25,0
 684 035e 0E94 0000 		call __floatunsisf
 685               	.LVL50:
 686 0362 9B01      		movw r18,r22
 687 0364 AC01      		movw r20,r24
 688 0366 60E0      		ldi r22,0
 689 0368 70E0      		ldi r23,0
 690 036a 80E0      		ldi r24,0
 691 036c 94E4      		ldi r25,lo8(68)
 692 036e 0E94 0000 		call __subsf3
 693               	.LVL51:
 124:dc_step/st_mot.c **** 	return -real_mot_pos;
 694               		.loc 1 124 0
 695 0372 CC0F      		lsl r28
 696 0374 DD1F      		rol r29
 697 0376 CC0F      		lsl r28
 698 0378 DD1F      		rol r29
 699               	.LVL52:
 700 037a C050      		subi r28,lo8(-(p_k))
 701 037c D040      		sbci r29,hi8(-(p_k))
 702               		.loc 1 125 0
 703 037e 2881      		ld r18,Y
 704 0380 3981      		ldd r19,Y+1
 705 0382 4A81      		ldd r20,Y+2
 706 0384 5B81      		ldd r21,Y+3
 707 0386 0E94 0000 		call __mulsf3
 708               	.LVL53:
 709 038a 9058      		subi r25,0x80
 710               	/* epilogue start */
 126:dc_step/st_mot.c **** 	
 127:dc_step/st_mot.c **** }
 711               		.loc 1 127 0
 712 038c DF91      		pop r29
 713 038e CF91      		pop r28
 714 0390 0895      		ret
 715               		.cfi_endproc
 716               	.LFE18:
 718               	.global	__vector_20
 720               	__vector_20:
 721               	.LFB12:
  39:dc_step/st_mot.c **** 	TCNT1=65535-100; //timer period = 400 us
 722               		.loc 1 39 0
 723               		.cfi_startproc
 724 0392 1F92      		push r1
 725               	.LCFI27:
 726               		.cfi_def_cfa_offset 4
 727               		.cfi_offset 1, -3
 728 0394 0F92      		push r0
 729               	.LCFI28:
 730               		.cfi_def_cfa_offset 5
 731               		.cfi_offset 0, -4
 732 0396 0FB6      		in r0,__SREG__
 733 0398 0F92      		push r0
 734 039a 1124      		clr __zero_reg__
 735 039c 0BB6      		in r0,__RAMPZ__
 736 039e 0F92      		push r0
 737 03a0 CF92      		push r12
 738               	.LCFI29:
 739               		.cfi_def_cfa_offset 6
 740               		.cfi_offset 12, -5
 741 03a2 DF92      		push r13
 742               	.LCFI30:
 743               		.cfi_def_cfa_offset 7
 744               		.cfi_offset 13, -6
 745 03a4 EF92      		push r14
 746               	.LCFI31:
 747               		.cfi_def_cfa_offset 8
 748               		.cfi_offset 14, -7
 749 03a6 FF92      		push r15
 750               	.LCFI32:
 751               		.cfi_def_cfa_offset 9
 752               		.cfi_offset 15, -8
 753 03a8 0F93      		push r16
 754               	.LCFI33:
 755               		.cfi_def_cfa_offset 10
 756               		.cfi_offset 16, -9
 757 03aa 1F93      		push r17
 758               	.LCFI34:
 759               		.cfi_def_cfa_offset 11
 760               		.cfi_offset 17, -10
 761 03ac 2F93      		push r18
 762               	.LCFI35:
 763               		.cfi_def_cfa_offset 12
 764               		.cfi_offset 18, -11
 765 03ae 3F93      		push r19
 766               	.LCFI36:
 767               		.cfi_def_cfa_offset 13
 768               		.cfi_offset 19, -12
 769 03b0 4F93      		push r20
 770               	.LCFI37:
 771               		.cfi_def_cfa_offset 14
 772               		.cfi_offset 20, -13
 773 03b2 5F93      		push r21
 774               	.LCFI38:
 775               		.cfi_def_cfa_offset 15
 776               		.cfi_offset 21, -14
 777 03b4 6F93      		push r22
 778               	.LCFI39:
 779               		.cfi_def_cfa_offset 16
 780               		.cfi_offset 22, -15
 781 03b6 7F93      		push r23
 782               	.LCFI40:
 783               		.cfi_def_cfa_offset 17
 784               		.cfi_offset 23, -16
 785 03b8 8F93      		push r24
 786               	.LCFI41:
 787               		.cfi_def_cfa_offset 18
 788               		.cfi_offset 24, -17
 789 03ba 9F93      		push r25
 790               	.LCFI42:
 791               		.cfi_def_cfa_offset 19
 792               		.cfi_offset 25, -18
 793 03bc AF93      		push r26
 794               	.LCFI43:
 795               		.cfi_def_cfa_offset 20
 796               		.cfi_offset 26, -19
 797 03be BF93      		push r27
 798               	.LCFI44:
 799               		.cfi_def_cfa_offset 21
 800               		.cfi_offset 27, -20
 801 03c0 CF93      		push r28
 802               	.LCFI45:
 803               		.cfi_def_cfa_offset 22
 804               		.cfi_offset 28, -21
 805 03c2 EF93      		push r30
 806               	.LCFI46:
 807               		.cfi_def_cfa_offset 23
 808               		.cfi_offset 30, -22
 809 03c4 FF93      		push r31
 810               	.LCFI47:
 811               		.cfi_def_cfa_offset 24
 812               		.cfi_offset 31, -23
 813               	/* prologue: Signal */
 814               	/* frame size = 0 */
 815               	/* stack size = 23 */
 816               	.L__stack_usage = 23
  40:dc_step/st_mot.c **** 	for(int n = 0; n<4; n++){
 817               		.loc 1 40 0
 818 03c6 8BE9      		ldi r24,lo8(-101)
 819 03c8 9FEF      		ldi r25,lo8(-1)
 820 03ca 9093 8500 		sts 132+1,r25
 821 03ce 8093 8400 		sts 132,r24
 822               	.LVL54:
 823 03d2 80E0      		ldi r24,lo8(operate_flag)
 824 03d4 C82E      		mov r12,r24
 825 03d6 80E0      		ldi r24,hi8(operate_flag)
 826 03d8 D82E      		mov r13,r24
 827 03da 00E0      		ldi r16,lo8(pulse_count)
 828 03dc 10E0      		ldi r17,hi8(pulse_count)
 829 03de 90E0      		ldi r25,lo8(pulse_setpoint)
 830 03e0 E92E      		mov r14,r25
 831 03e2 90E0      		ldi r25,hi8(pulse_setpoint)
 832 03e4 F92E      		mov r15,r25
 833 03e6 C0E0      		ldi r28,0
 834               	.LVL55:
 835               	.L41:
 836               	.LBB4:
  42:dc_step/st_mot.c **** 		{
 837               		.loc 1 42 0
 838 03e8 F601      		movw r30,r12
 839 03ea 8191      		ld r24,Z+
 840 03ec 6F01      		movw r12,r30
 841               	.LVL56:
 842 03ee 8823      		tst r24
 843 03f0 01F0      		breq .L39
  44:dc_step/st_mot.c **** 				StMotPul(n);
 844               		.loc 1 44 0
 845 03f2 F801      		movw r30,r16
 846 03f4 2081      		ld r18,Z
 847 03f6 3181      		ldd r19,Z+1
 848 03f8 F701      		movw r30,r14
 849 03fa 8081      		ld r24,Z
 850 03fc 9181      		ldd r25,Z+1
 851 03fe 2817      		cp r18,r24
 852 0400 3907      		cpc r19,r25
 853 0402 00F4      		brsh .L40
  45:dc_step/st_mot.c **** 				pulse_count[n]++;
 854               		.loc 1 45 0
 855 0404 8C2F      		mov r24,r28
 856 0406 0E94 0000 		call StMotPul
 857               	.LVL57:
  46:dc_step/st_mot.c **** 				
 858               		.loc 1 46 0
 859 040a F801      		movw r30,r16
 860 040c 8081      		ld r24,Z
 861 040e 9181      		ldd r25,Z+1
 862 0410 0196      		adiw r24,1
 863 0412 9183      		std Z+1,r25
 864 0414 8083      		st Z,r24
 865 0416 00C0      		rjmp .L39
 866               	.L40:
 867               	.LBB5:
  52:dc_step/st_mot.c **** 				StMotCorrectPos(n, real_mot_pos);
 868               		.loc 1 52 0
 869 0418 8C2F      		mov r24,r28
 870 041a 0E94 0000 		call GetMotPos
 871               	.LVL58:
 872 041e AB01      		movw r20,r22
 873 0420 BC01      		movw r22,r24
 874               	.LVL59:
  53:dc_step/st_mot.c **** 			}
 875               		.loc 1 53 0
 876 0422 8C2F      		mov r24,r28
 877 0424 0E94 0000 		call StMotCorrectPos
 878               	.LVL60:
 879               	.L39:
 880 0428 CF5F      		subi r28,lo8(-(1))
 881 042a 0E5F      		subi r16,-2
 882 042c 1F4F      		sbci r17,-1
 883 042e F2E0      		ldi r31,2
 884 0430 EF0E      		add r14,r31
 885 0432 F11C      		adc r15,__zero_reg__
 886               	.LBE5:
  41:dc_step/st_mot.c **** 		if (operate_flag[n])
 887               		.loc 1 41 0 discriminator 2
 888 0434 C430      		cpi r28,lo8(4)
 889 0436 01F4      		brne .L41
 890               	/* epilogue start */
 891               	.LBE4:
  57:dc_step/st_mot.c **** 
 892               		.loc 1 57 0
 893 0438 FF91      		pop r31
 894 043a EF91      		pop r30
 895 043c CF91      		pop r28
 896 043e BF91      		pop r27
 897 0440 AF91      		pop r26
 898 0442 9F91      		pop r25
 899 0444 8F91      		pop r24
 900 0446 7F91      		pop r23
 901 0448 6F91      		pop r22
 902 044a 5F91      		pop r21
 903 044c 4F91      		pop r20
 904 044e 3F91      		pop r19
 905 0450 2F91      		pop r18
 906 0452 1F91      		pop r17
 907 0454 0F91      		pop r16
 908 0456 FF90      		pop r15
 909 0458 EF90      		pop r14
 910 045a DF90      		pop r13
 911 045c CF90      		pop r12
 912               	.LVL61:
 913 045e 0F90      		pop r0
 914 0460 0BBE      		out __RAMPZ__,r0
 915 0462 0F90      		pop r0
 916 0464 0FBE      		out __SREG__,r0
 917 0466 0F90      		pop r0
 918 0468 1F90      		pop r1
 919 046a 1895      		reti
 920               		.cfi_endproc
 921               	.LFE12:
 923               	.global	info
 924               		.section .bss
 927               	info:
 928 0000 0000 0000 		.zero	12
 928      0000 0000 
 928      0000 0000 
 929               	.global	p_k
 930               		.data
 933               	p_k:
 934 0000 4C        		.byte	76
 935 0001 37        		.byte	55
 936 0002 89        		.byte	-119
 937 0003 3E        		.byte	62
 938 0004 4C        		.byte	76
 939 0005 37        		.byte	55
 940 0006 89        		.byte	-119
 941 0007 3E        		.byte	62
 942 0008 4C        		.byte	76
 943 0009 37        		.byte	55
 944 000a 89        		.byte	-119
 945 000b 3E        		.byte	62
 946 000c 4C        		.byte	76
 947 000d 37        		.byte	55
 948 000e 89        		.byte	-119
 949 000f 3E        		.byte	62
 950               	.global	set_counter
 951               		.section .bss
 954               	set_counter:
 955 000c 0000      		.zero	2
 956               	.global	real_mot_pos
 959               	real_mot_pos:
 960 000e 0000 0000 		.zero	4
 961               	.global	set_angle
 964               	set_angle:
 965 0012 0000 0000 		.zero	4
 966               	.global	current_angle
 969               	current_angle:
 970 0016 0000 0000 		.zero	4
 971               	.global	angle_setpoint
 974               	angle_setpoint:
 975 001a 0000 0000 		.zero	4
 976               	.global	pulse_setpoint
 979               	pulse_setpoint:
 980 001e 0000 0000 		.zero	8
 980      0000 0000 
 981               	.global	pulse_count
 984               	pulse_count:
 985 0026 0000 0000 		.zero	8
 985      0000 0000 
 986               	.global	operate_master_flag
 989               	operate_master_flag:
 990 002e 00        		.zero	1
 991               	.global	st_mot_chosen
 994               	st_mot_chosen:
 995 002f 00        		.zero	1
 996               	.global	operate_flag
 999               	operate_flag:
 1000 0030 0000 0000 		.zero	4
 1001               		.text
 1002               	.Letext0:
 1003               		.file 2 "/usr/lib/avr/include/stdint.h"
 1004               		.file 3 "dc_step/adc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 st_mot.c
     /tmp/cccwfIiK.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccwfIiK.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccwfIiK.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccwfIiK.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cccwfIiK.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccwfIiK.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccwfIiK.s:13     .text:0000000000000000 StMotTim1Init
     /tmp/cccwfIiK.s:45     .text:0000000000000022 StMotInit
     /tmp/cccwfIiK.s:70     .text:0000000000000034 GetInfo
     /tmp/cccwfIiK.s:927    .bss:0000000000000000 info
     /tmp/cccwfIiK.s:964    .bss:0000000000000012 set_angle
     /tmp/cccwfIiK.s:106    .text:0000000000000064 StMotPul
     /tmp/cccwfIiK.s:139    .text:0000000000000080 StMotDir
     /tmp/cccwfIiK.s:203    .text:00000000000000b2 StMotCorrectPos
     /tmp/cccwfIiK.s:999    .bss:0000000000000030 operate_flag
     /tmp/cccwfIiK.s:969    .bss:0000000000000016 current_angle
     /tmp/cccwfIiK.s:979    .bss:000000000000001e pulse_setpoint
     /tmp/cccwfIiK.s:984    .bss:0000000000000026 pulse_count
     /tmp/cccwfIiK.s:415    .text:00000000000001d6 SetAngle
     /tmp/cccwfIiK.s:989    .bss:000000000000002e operate_master_flag
     /tmp/cccwfIiK.s:974    .bss:000000000000001a angle_setpoint
     /tmp/cccwfIiK.s:650    .text:000000000000033e GetMotPos
     /tmp/cccwfIiK.s:933    .data:0000000000000000 p_k
     /tmp/cccwfIiK.s:720    .text:0000000000000392 __vector_20
     /tmp/cccwfIiK.s:954    .bss:000000000000000c set_counter
     /tmp/cccwfIiK.s:959    .bss:000000000000000e real_mot_pos
     /tmp/cccwfIiK.s:994    .bss:000000000000002f st_mot_chosen

UNDEFINED SYMBOLS
__gesf2
__subsf3
__lesf2
__addsf3
__fixsfsi
__floatsisf
__mulsf3
__divsf3
__fixunssfsi
__ltsf2
__gtsf2
__nesf2
__floatunsisf
AdcGetPos
__do_copy_data
__do_clear_bss
