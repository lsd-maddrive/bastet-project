
uart_enc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800208  00800208  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145e  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f7f  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e5  00000000  00000000  00002d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003714  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000761  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000803  00000000  00000000  00004149  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000494c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	11 c1       	rjmp	.+546    	; 0x228 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	0c c1       	rjmp	.+536    	; 0x256 <__vector_15>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	fa d0       	rcall	.+500    	; 0x314 <main>
 120:	07 c3       	rjmp	.+1550   	; 0x730 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Tim2DcMotInit>:
uint8_t prev_state=0, current_state=0;


void Tim2DcMotInit(void){
	//вывод PH6(OC2B), PB4(OC2A) – ШИМ, вывод PH4 - направление
	TCCR2A |= (1<<COM2A1);
 124:	a0 eb       	ldi	r26, 0xB0	; 176
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	8c 91       	ld	r24, X
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2B1);
 12e:	8c 91       	ld	r24, X
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8c 93       	st	X, r24
	TIMSK2 |=(1<<TOIE2);
 134:	e0 e7       	ldi	r30, 0x70	; 112
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
	//вывод PH3(OC4A), PH5(OC4C) – ШИМ
	TCCR4A |= (1<<COM4A1);
 13e:	e0 ea       	ldi	r30, 0xA0	; 160
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	TCCR4A |= (1<<COM4C1);
 148:	80 81       	ld	r24, Z
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	80 83       	st	Z, r24
	/* TIMER2 - настройка таймера: быстрый ШИМ,
	неинвертированный режим, предделитель на 256 244hz */
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
 14e:	8c 91       	ld	r24, X
 150:	83 60       	ori	r24, 0x03	; 3
 152:	8c 93       	st	X, r24
	//phase correct
	//TCCR2A |= (1<<WGM20);
	TCCR2B |= (1<<CS22) | (1<<CS21);
 154:	a1 eb       	ldi	r26, 0xB1	; 177
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	8c 91       	ld	r24, X
 15a:	86 60       	ori	r24, 0x06	; 6
 15c:	8c 93       	st	X, r24
	/* TIMER4 - настройка таймера: быстрый ШИМ,
	неинвертированный режим, 8 bit, TOP = 0xFF, предделитель на 256*/
	TCCR4A |= (1 << WGM40);
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42);
 164:	e1 ea       	ldi	r30, 0xA1	; 161
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS42);
 16e:	80 81       	ld	r24, Z
 170:	84 60       	ori	r24, 0x04	; 4
 172:	80 83       	st	Z, r24
 174:	08 95       	ret

00000176 <IntDcMotEcoderInit>:
	
	DC_MOT_DIR_DDR|=(1<<DC_MOT_DIR_DDR_PIN);
}

void IntDcMotEcoderInit(void){
	EICRA=(1<<ISC01);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EIMSK=(1<<INT0);
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	8d bb       	out	0x1d, r24	; 29
 180:	08 95       	ret

00000182 <DcMotInit>:
	TCCR4B |= (1 << WGM42);
	TCCR4B |= (1<<CS42);
}

void DcMotInit(void){
	Tim2DcMotInit();
 182:	d0 df       	rcall	.-96     	; 0x124 <Tim2DcMotInit>
	IntDcMotEcoderInit();
 184:	f8 df       	rcall	.-16     	; 0x176 <IntDcMotEcoderInit>
 186:	e1 e0       	ldi	r30, 0x01	; 1
	DC_MOT1_SPEED_DDR|=(1<<DC_MOT1_SPEED_DDR_PIN);
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	80 81       	ld	r24, Z
 18c:	80 62       	ori	r24, 0x20	; 32
 18e:	80 83       	st	Z, r24
 190:	80 81       	ld	r24, Z
	DC_MOT2_SPEED_DDR|=(1<<DC_MOT2_SPEED_DDR_PIN);
 192:	88 60       	ori	r24, 0x08	; 8
 194:	80 83       	st	Z, r24
 196:	24 9a       	sbi	0x04, 4	; 4
	DC_MOT3_SPEED_DDR|=(1<<DC_MOT3_SPEED_DDR_PIN);
 198:	80 81       	ld	r24, Z
	DC_MOT4_SPEED_DDR|=(1<<DC_MOT4_SPEED_DDR_PIN);
 19a:	80 64       	ori	r24, 0x40	; 64
 19c:	80 83       	st	Z, r24
 19e:	80 81       	ld	r24, Z
	
	DC_MOT_DIR_DDR|=(1<<DC_MOT_DIR_DDR_PIN);
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	80 83       	st	Z, r24
 1a4:	08 95       	ret

000001a6 <DcMotGo>:
 1a6:	cf 92       	push	r12
void IntDcMotEcoderInit(void){
	EICRA=(1<<ISC01);
	EIMSK=(1<<INT0);
}

void DcMotGo(float speed){
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	6b 01       	movw	r12, r22
 1b0:	7c 01       	movw	r14, r24
	if(speed>=0) DC_MOT_FOR;
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a9 01       	movw	r20, r18
 1b8:	5d d2       	rcall	.+1210   	; 0x674 <__gesf2>
 1ba:	88 23       	and	r24, r24
 1bc:	34 f0       	brlt	.+12     	; 0x1ca <DcMotGo+0x24>
 1be:	e2 e0       	ldi	r30, 0x02	; 2
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	80 81       	ld	r24, Z
 1c4:	8f 7e       	andi	r24, 0xEF	; 239
 1c6:	80 83       	st	Z, r24
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <DcMotGo+0x2e>
	else DC_MOT_REV;
 1ca:	e2 e0       	ldi	r30, 0x02	; 2
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 81       	ld	r24, Z
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	80 83       	st	Z, r24
	OCR2A = (uint8_t)((abs(speed)*255)/100);
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	b6 d1       	rcall	.+876    	; 0x546 <__fixsfsi>
 1da:	9b 01       	movw	r18, r22
 1dc:	77 23       	and	r23, r23
 1de:	24 f4       	brge	.+8      	; 0x1e8 <DcMotGo+0x42>
 1e0:	22 27       	eor	r18, r18
 1e2:	33 27       	eor	r19, r19
 1e4:	26 1b       	sub	r18, r22
 1e6:	37 0b       	sbc	r19, r23
 1e8:	4f ef       	ldi	r20, 0xFF	; 255
 1ea:	42 9f       	mul	r20, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	43 9f       	mul	r20, r19
 1f0:	90 0d       	add	r25, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	64 e6       	ldi	r22, 0x64	; 100
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	65 d2       	rcall	.+1226   	; 0x6c4 <__divmodhi4>
 1fa:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	OCR2B = (uint8_t)((abs(speed)*255)/100);
 1fe:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
	OCR4A = (uint8_t)((abs(speed)*255)/100);
 202:	77 27       	eor	r23, r23
 204:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 208:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4C = (uint8_t)((abs(speed)*255)/100);
 20c:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
 210:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
}
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	df 90       	pop	r13
 21a:	cf 90       	pop	r12
 21c:	08 95       	ret

0000021e <GetSpeed>:

uint16_t* GetSpeed(void){
	return(enc_result);
	//return(dc_mot_enc_count);
	
}
 21e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 222:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 226:	08 95       	ret

00000228 <__vector_1>:
//}
//}
//

ISR (INT0_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
	//PORTB^=(1<<7);
	dc_mot_enc_count+=1;
 236:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <dc_mot_enc_count>
 23a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <dc_mot_enc_count+0x1>
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <dc_mot_enc_count+0x1>
 244:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <dc_mot_enc_count>
}
 248:	9f 91       	pop	r25
 24a:	8f 91       	pop	r24
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <__vector_15>:

ISR(TIMER2_OVF_vect){ //isr executes every 4 ms
 256:	1f 92       	push	r1
 258:	0f 92       	push	r0
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	0f 92       	push	r0
 25e:	11 24       	eor	r1, r1
 260:	2f 93       	push	r18
 262:	3f 93       	push	r19
 264:	4f 93       	push	r20
 266:	5f 93       	push	r21
 268:	6f 93       	push	r22
 26a:	7f 93       	push	r23
 26c:	8f 93       	push	r24
 26e:	9f 93       	push	r25
 270:	af 93       	push	r26
 272:	bf 93       	push	r27
	if(tim2_count<50) tim2_count++; //every 200 ms
 274:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <tim2_count>
 278:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <tim2_count+0x1>
 27c:	82 33       	cpi	r24, 0x32	; 50
 27e:	91 05       	cpc	r25, r1
 280:	30 f4       	brcc	.+12     	; 0x28e <__vector_15+0x38>
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <tim2_count+0x1>
 288:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <tim2_count>
 28c:	2f c0       	rjmp	.+94     	; 0x2ec <__vector_15+0x96>
	else{
		enc_result=(dc_mot_enc_count*5*60)/115; //rev per minute
 28e:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <dc_mot_enc_count>
 292:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <dc_mot_enc_count+0x1>
 296:	8c e2       	ldi	r24, 0x2C	; 44
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	28 9f       	mul	r18, r24
 29c:	a0 01       	movw	r20, r0
 29e:	29 9f       	mul	r18, r25
 2a0:	50 0d       	add	r21, r0
 2a2:	38 9f       	mul	r19, r24
 2a4:	50 0d       	add	r21, r0
 2a6:	11 24       	eor	r1, r1
 2a8:	9a 01       	movw	r18, r20
 2aa:	a1 ef       	ldi	r26, 0xF1	; 241
 2ac:	bc e1       	ldi	r27, 0x1C	; 28
 2ae:	1d d2       	rcall	.+1082   	; 0x6ea <__umulhisi3>
 2b0:	48 1b       	sub	r20, r24
 2b2:	59 0b       	sbc	r21, r25
 2b4:	56 95       	lsr	r21
 2b6:	47 95       	ror	r20
 2b8:	84 0f       	add	r24, r20
 2ba:	95 1f       	adc	r25, r21
 2bc:	00 24       	eor	r0, r0
 2be:	88 0f       	add	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	00 1c       	adc	r0, r0
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	00 1c       	adc	r0, r0
 2ca:	89 2f       	mov	r24, r25
 2cc:	90 2d       	mov	r25, r0
 2ce:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x1>
 2d2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		dc_mot_enc_count=0;
 2d6:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <dc_mot_enc_count+0x1>
 2da:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <dc_mot_enc_count>
		PORTB^=(1<<7);
 2de:	85 b1       	in	r24, 0x05	; 5
 2e0:	80 58       	subi	r24, 0x80	; 128
 2e2:	85 b9       	out	0x05, r24	; 5
		tim2_count=0;
 2e4:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <tim2_count+0x1>
 2e8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <tim2_count>
	}
}
 2ec:	bf 91       	pop	r27
 2ee:	af 91       	pop	r26
 2f0:	9f 91       	pop	r25
 2f2:	8f 91       	pop	r24
 2f4:	7f 91       	pop	r23
 2f6:	6f 91       	pop	r22
 2f8:	5f 91       	pop	r21
 2fa:	4f 91       	pop	r20
 2fc:	3f 91       	pop	r19
 2fe:	2f 91       	pop	r18
 300:	0f 90       	pop	r0
 302:	0f be       	out	0x3f, r0	; 63
 304:	0f 90       	pop	r0
 306:	1f 90       	pop	r1
 308:	18 95       	reti

0000030a <InitAll>:
		UartTransmitByte('\r');
	}
}

void InitAll(void){
	UartInit();
 30a:	99 d0       	rcall	.+306    	; 0x43e <UartInit>
	//I2cInit();
	//ExpInit(EXP_DEF_ADDR);
	//AdcInit();
	DcMotInit();
 30c:	3a df       	rcall	.-396    	; 0x182 <DcMotInit>
 30e:	27 9a       	sbi	0x04, 7	; 4
	DDRB|=(1<<7);
 310:	78 94       	sei
	//StMotInit();
	//StMotGo(0);
	//_delay_ms(100);
	sei();
 312:	08 95       	ret

00000314 <main>:
 314:	fa df       	rcall	.-12     	; 0x30a <InitAll>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 316:	2f ef       	ldi	r18, 0xFF	; 255
 318:	80 e7       	ldi	r24, 0x70	; 112
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	21 50       	subi	r18, 0x01	; 1
 31e:	80 40       	sbci	r24, 0x00	; 0
 320:	90 40       	sbci	r25, 0x00	; 0
 322:	e1 f7       	brne	.-8      	; 0x31c <main+0x8>
 324:	00 c0       	rjmp	.+0      	; 0x326 <main+0x12>
	float data;
	//настройка формы сигнала	
	while (1)
	{
		//// получаем данные с терминала 0…100 – скважность ШИМ
		data = UartReceiveDec();
 326:	00 00       	nop
 328:	5f d0       	rcall	.+190    	; 0x3e8 <UartReceiveDec>
		//// выставляем скорость вращения двигателя
		DcMotGo(data);
 32a:	bc 01       	movw	r22, r24
 32c:	99 0f       	add	r25, r25
 32e:	88 0b       	sbc	r24, r24
 330:	99 0b       	sbc	r25, r25
 332:	3c d1       	rcall	.+632    	; 0x5ac <__floatsisf>
		// табуляция положения курсора в терминале
		UartTransmitByte('\t');
 334:	38 df       	rcall	.-400    	; 0x1a6 <DcMotGo>
 336:	89 e0       	ldi	r24, 0x09	; 9
		// выводим только что переданное значение
		//UartSendDec(data);
		UartSendDec(GetSpeed());
 338:	05 d0       	rcall	.+10     	; 0x344 <UartTransmitByte>
 33a:	71 df       	rcall	.-286    	; 0x21e <GetSpeed>
 33c:	13 d0       	rcall	.+38     	; 0x364 <UartSendDec>
 33e:	8d e0       	ldi	r24, 0x0D	; 13
		UartTransmitByte('\r');
 340:	01 d0       	rcall	.+2      	; 0x344 <UartTransmitByte>
 342:	f2 cf       	rjmp	.-28     	; 0x328 <main+0x14>

00000344 <UartTransmitByte>:
 344:	e0 ec       	ldi	r30, 0xC0	; 192
 346:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t msb=(val & 0xF0) >> 4, lsb=val & 0x0F;
	msb += msb > 9 ? 'A' - 10 : '0';
	lsb += lsb > 9 ? 'A' - 10 : '0';	
	UartTransmitByte(msb);
	UartTransmitByte(lsb);
}
 348:	90 81       	ld	r25, Z
 34a:	95 ff       	sbrs	r25, 5
 34c:	fd cf       	rjmp	.-6      	; 0x348 <UartTransmitByte+0x4>
 34e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 352:	08 95       	ret

00000354 <UartReceiveByte>:
 354:	e0 ec       	ldi	r30, 0xC0	; 192
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	88 23       	and	r24, r24
 35c:	ec f7       	brge	.-6      	; 0x358 <UartReceiveByte+0x4>
 35e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 362:	08 95       	ret

00000364 <UartSendDec>:
 364:	ef 92       	push	r14
 366:	ff 92       	push	r15
 368:	0f 93       	push	r16
 36a:	1f 93       	push	r17
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	7c 01       	movw	r14, r24
 372:	00 97       	sbiw	r24, 0x00	; 0
 374:	11 f1       	breq	.+68     	; 0x3ba <UartSendDec+0x56>
 376:	2c f4       	brge	.+10     	; 0x382 <UartSendDec+0x1e>
 378:	f1 94       	neg	r15
 37a:	e1 94       	neg	r14
 37c:	f1 08       	sbc	r15, r1
 37e:	8d e2       	ldi	r24, 0x2D	; 45
 380:	e1 df       	rcall	.-62     	; 0x344 <UartTransmitByte>
 382:	c1 e0       	ldi	r28, 0x01	; 1
 384:	1e 2d       	mov	r17, r14
 386:	df 2d       	mov	r29, r15
 388:	01 c0       	rjmp	.+2      	; 0x38c <UartSendDec+0x28>
 38a:	ce 2d       	mov	r28, r14
 38c:	ee 24       	eor	r14, r14
 38e:	e3 94       	inc	r14
 390:	ec 0e       	add	r14, r28
 392:	01 2f       	mov	r16, r17
 394:	fd 2e       	mov	r15, r29
 396:	6c 2f       	mov	r22, r28
 398:	81 2f       	mov	r24, r17
 39a:	9d 2f       	mov	r25, r29
 39c:	80 d0       	rcall	.+256    	; 0x49e <Digit>
 39e:	88 23       	and	r24, r24
 3a0:	a1 f3       	breq	.-24     	; 0x38a <UartSendDec+0x26>
 3a2:	c6 30       	cpi	r28, 0x06	; 6
 3a4:	60 f4       	brcc	.+24     	; 0x3be <UartSendDec+0x5a>
 3a6:	6c 2f       	mov	r22, r28
 3a8:	80 2f       	mov	r24, r16
 3aa:	9f 2d       	mov	r25, r15
 3ac:	78 d0       	rcall	.+240    	; 0x49e <Digit>
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	c9 df       	rcall	.-110    	; 0x344 <UartTransmitByte>
 3b2:	cf 5f       	subi	r28, 0xFF	; 255
 3b4:	c6 30       	cpi	r28, 0x06	; 6
 3b6:	b9 f7       	brne	.-18     	; 0x3a6 <UartSendDec+0x42>
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <UartSendDec+0x5a>
 3ba:	80 e3       	ldi	r24, 0x30	; 48
 3bc:	c3 df       	rcall	.-122    	; 0x344 <UartTransmitByte>
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	ff 90       	pop	r15
 3c8:	ef 90       	pop	r14
 3ca:	08 95       	ret

000003cc <UartSendStr>:
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ec 01       	movw	r28, r24
 3d2:	88 81       	ld	r24, Y
 3d4:	88 23       	and	r24, r24
 3d6:	29 f0       	breq	.+10     	; 0x3e2 <UartSendStr+0x16>
 3d8:	21 96       	adiw	r28, 0x01	; 1
 3da:	b4 df       	rcall	.-152    	; 0x344 <UartTransmitByte>
 3dc:	89 91       	ld	r24, Y+
 3de:	81 11       	cpse	r24, r1
 3e0:	fc cf       	rjmp	.-8      	; 0x3da <UartSendStr+0xe>
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <UartReceiveDec>:

// приём десятичного 16-битного числа на МК с терминала
int16_t UartReceiveDec(void){
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
	int16_t data=0;
	uint8_t digit=0, negative_flag=0;
 3f0:	10 e0       	ldi	r17, 0x00	; 0
	UartTransmitByte(lsb);
}

// приём десятичного 16-битного числа на МК с терминала
int16_t UartReceiveDec(void){
	int16_t data=0;
 3f2:	c0 e0       	ldi	r28, 0x00	; 0
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
		// принимаем, пока не увидим признак конца строки
		if(digit=='\r') continue;
		if(digit=='\n') break;
		//if(!((digit>='0') && (digit<='9'))) break;
		// выводим ASCII коды цифр
		if(digit=='-') negative_flag=1;
 3f6:	01 e0       	ldi	r16, 0x01	; 1
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <UartReceiveDec+0x14>
 3fa:	10 2f       	mov	r17, r16
int16_t UartReceiveDec(void){
	int16_t data=0;
	uint8_t digit=0, negative_flag=0;
	// принимаем пятиразрядное число
	do{
		digit=UartReceiveByte();  
 3fc:	ab df       	rcall	.-170    	; 0x354 <UartReceiveByte>
		// принимаем, пока не увидим признак конца строки
		if(digit=='\r') continue;
 3fe:	8d 30       	cpi	r24, 0x0D	; 13
 400:	e9 f3       	breq	.-6      	; 0x3fc <UartReceiveDec+0x14>
		if(digit=='\n') break;
 402:	8a 30       	cpi	r24, 0x0A	; 10
 404:	89 f0       	breq	.+34     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		//if(!((digit>='0') && (digit<='9'))) break;
		// выводим ASCII коды цифр
		if(digit=='-') negative_flag=1;
 406:	8d 32       	cpi	r24, 0x2D	; 45
 408:	c1 f3       	breq	.-16     	; 0x3fa <UartReceiveDec+0x12>
		else{
			digit-='0';
			data*=10;
 40a:	9e 01       	movw	r18, r28
 40c:	22 0f       	add	r18, r18
 40e:	33 1f       	adc	r19, r19
 410:	cc 0f       	add	r28, r28
 412:	dd 1f       	adc	r29, r29
 414:	cc 0f       	add	r28, r28
 416:	dd 1f       	adc	r29, r29
 418:	cc 0f       	add	r28, r28
 41a:	dd 1f       	adc	r29, r29
 41c:	c2 0f       	add	r28, r18
 41e:	d3 1f       	adc	r29, r19
			data+=digit;
 420:	80 53       	subi	r24, 0x30	; 48
 422:	c8 0f       	add	r28, r24
 424:	d1 1d       	adc	r29, r1
 426:	ea cf       	rjmp	.-44     	; 0x3fc <UartReceiveDec+0x14>
		}
	}
	while(1);
	if(negative_flag==1) data=-data;
 428:	11 30       	cpi	r17, 0x01	; 1
 42a:	19 f4       	brne	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42c:	d1 95       	neg	r29
 42e:	c1 95       	neg	r28
 430:	d1 09       	sbc	r29, r1
	// заканчиваем, когда увидели признак \r\n
	return(data);
}
 432:	ce 01       	movw	r24, r28
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <UartInit>:

#define NO_INTERRUPTS
/* функция инициализации: настройка МК на приём и передачу данных, 
длина сообщения – 8 бит, один СТОП бит, без паритета, скорость обмена – 19200 бод */
void UartInit(void){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	cd b7       	in	r28, 0x3d	; 61
 444:	de b7       	in	r29, 0x3e	; 62
 446:	28 97       	sbiw	r28, 0x08	; 8
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
	uint8_t word[]={"UART_OK"};
 452:	88 e0       	ldi	r24, 0x08	; 8
 454:	e0 e0       	ldi	r30, 0x00	; 0
 456:	f2 e0       	ldi	r31, 0x02	; 2
 458:	de 01       	movw	r26, r28
 45a:	11 96       	adiw	r26, 0x01	; 1
 45c:	01 90       	ld	r0, Z+
 45e:	0d 92       	st	X+, r0
 460:	8a 95       	dec	r24
 462:	e1 f7       	brne	.-8      	; 0x45c <UartInit+0x1e>
	#ifdef INTERRUPTS
		UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
	#endif
	#ifdef NO_INTERRUPTS
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);	
 464:	e1 ec       	ldi	r30, 0xC1	; 193
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	88 61       	ori	r24, 0x18	; 24
 46c:	80 83       	st	Z, r24
	#endif
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 46e:	e2 ec       	ldi	r30, 0xC2	; 194
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	86 60       	ori	r24, 0x06	; 6
 476:	80 83       	st	Z, r24
	//скорость передачи 19200 бод
	UBRR0H=0;
 478:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	//для значения UBRR0L = 51 = 0x33	UBRR0L=0x33;
	UBRR0L=0x33;
 47c:	83 e3       	ldi	r24, 0x33	; 51
 47e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	// выводим в терминал слово TEST_OK
	UartSendStr(word);
 482:	ce 01       	movw	r24, r28
 484:	01 96       	adiw	r24, 0x01	; 1
 486:	a2 df       	rcall	.-188    	; 0x3cc <UartSendStr>
	// переходим в начало следующей строки
	UartTransmitByte('\r');
 488:	8d e0       	ldi	r24, 0x0D	; 13
 48a:	5c df       	rcall	.-328    	; 0x344 <UartTransmitByte>
}
 48c:	28 96       	adiw	r28, 0x08	; 8
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	08 95       	ret

0000049e <Digit>:
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
 49e:	cf 93       	push	r28
 4a0:	f8 2f       	mov	r31, r24
 4a2:	c6 2f       	mov	r28, r22
	uint8_t i=5, a;
	while(i){ //цикл по разрядам числа
		a=d%10; //выделяем очередной разряд
		//выделен заданный разряд - уходим
		if(i-- == m) break;
 4a4:	65 30       	cpi	r22, 0x05	; 5
 4a6:	09 f0       	breq	.+2      	; 0x4aa <Digit+0xc>
 4a8:	3d c0       	rjmp	.+122    	; 0x524 <Digit+0x86>
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разрядам числа
		a=d%10; //выделяем очередной разряд
 4aa:	28 2f       	mov	r18, r24
 4ac:	39 2f       	mov	r19, r25
 4ae:	ad ec       	ldi	r26, 0xCD	; 205
 4b0:	bc ec       	ldi	r27, 0xCC	; 204
 4b2:	1b d1       	rcall	.+566    	; 0x6ea <__umulhisi3>
 4b4:	96 95       	lsr	r25
 4b6:	87 95       	ror	r24
 4b8:	96 95       	lsr	r25
 4ba:	87 95       	ror	r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	9c 01       	movw	r18, r24
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	f8 1b       	sub	r31, r24
 4d8:	33 c0       	rjmp	.+102    	; 0x540 <Digit+0xa2>
 4da:	9a 01       	movw	r18, r20
 4dc:	ad ec       	ldi	r26, 0xCD	; 205
 4de:	bc ec       	ldi	r27, 0xCC	; 204
 4e0:	04 d1       	rcall	.+520    	; 0x6ea <__umulhisi3>
 4e2:	96 95       	lsr	r25
 4e4:	87 95       	ror	r24
 4e6:	96 95       	lsr	r25
 4e8:	87 95       	ror	r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	9c 01       	movw	r18, r24
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	82 0f       	add	r24, r18
 502:	93 1f       	adc	r25, r19
 504:	f4 2f       	mov	r31, r20
 506:	f8 1b       	sub	r31, r24
		//выделен заданный разряд - уходим
		if(i-- == m) break;
 508:	ce 17       	cp	r28, r30
		d /= 10; //уменьшаем число в 10 раз
 50a:	d1 f0       	breq	.+52     	; 0x540 <Digit+0xa2>
 50c:	9a 01       	movw	r18, r20
 50e:	ed d0       	rcall	.+474    	; 0x6ea <__umulhisi3>
 510:	ac 01       	movw	r20, r24
 512:	56 95       	lsr	r21
 514:	47 95       	ror	r20
 516:	56 95       	lsr	r21
 518:	47 95       	ror	r20
 51a:	56 95       	lsr	r21
 51c:	47 95       	ror	r20
 51e:	e1 50       	subi	r30, 0x01	; 1
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разрядам числа
 520:	e1 f6       	brne	.-72     	; 0x4da <Digit+0x3c>
 522:	0e c0       	rjmp	.+28     	; 0x540 <Digit+0xa2>
		a=d%10; //выделяем очередной разряд
		//выделен заданный разряд - уходим
		if(i-- == m) break;
		d /= 10; //уменьшаем число в 10 раз
 524:	28 2f       	mov	r18, r24
 526:	39 2f       	mov	r19, r25
 528:	ad ec       	ldi	r26, 0xCD	; 205
 52a:	bc ec       	ldi	r27, 0xCC	; 204
 52c:	de d0       	rcall	.+444    	; 0x6ea <__umulhisi3>
 52e:	ac 01       	movw	r20, r24
 530:	56 95       	lsr	r21
 532:	47 95       	ror	r20
 534:	56 95       	lsr	r21
 536:	47 95       	ror	r20
 538:	56 95       	lsr	r21
 53a:	47 95       	ror	r20
 53c:	e4 e0       	ldi	r30, 0x04	; 4
 53e:	cd cf       	rjmp	.-102    	; 0x4da <Digit+0x3c>
	}
	return(a);
}
 540:	8f 2f       	mov	r24, r31
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <__fixsfsi>:
 546:	04 d0       	rcall	.+8      	; 0x550 <__fixunssfsi>
 548:	68 94       	set
 54a:	b1 11       	cpse	r27, r1
 54c:	8d c0       	rjmp	.+282    	; 0x668 <__fp_szero>
 54e:	08 95       	ret

00000550 <__fixunssfsi>:
 550:	70 d0       	rcall	.+224    	; 0x632 <__fp_splitA>
 552:	88 f0       	brcs	.+34     	; 0x576 <__fixunssfsi+0x26>
 554:	9f 57       	subi	r25, 0x7F	; 127
 556:	90 f0       	brcs	.+36     	; 0x57c <__fixunssfsi+0x2c>
 558:	b9 2f       	mov	r27, r25
 55a:	99 27       	eor	r25, r25
 55c:	b7 51       	subi	r27, 0x17	; 23
 55e:	a0 f0       	brcs	.+40     	; 0x588 <__fixunssfsi+0x38>
 560:	d1 f0       	breq	.+52     	; 0x596 <__fixunssfsi+0x46>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	88 1f       	adc	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	1a f0       	brmi	.+6      	; 0x572 <__fixunssfsi+0x22>
 56c:	ba 95       	dec	r27
 56e:	c9 f7       	brne	.-14     	; 0x562 <__fixunssfsi+0x12>
 570:	12 c0       	rjmp	.+36     	; 0x596 <__fixunssfsi+0x46>
 572:	b1 30       	cpi	r27, 0x01	; 1
 574:	81 f0       	breq	.+32     	; 0x596 <__fixunssfsi+0x46>
 576:	77 d0       	rcall	.+238    	; 0x666 <__fp_zero>
 578:	b1 e0       	ldi	r27, 0x01	; 1
 57a:	08 95       	ret
 57c:	74 c0       	rjmp	.+232    	; 0x666 <__fp_zero>
 57e:	67 2f       	mov	r22, r23
 580:	78 2f       	mov	r23, r24
 582:	88 27       	eor	r24, r24
 584:	b8 5f       	subi	r27, 0xF8	; 248
 586:	39 f0       	breq	.+14     	; 0x596 <__fixunssfsi+0x46>
 588:	b9 3f       	cpi	r27, 0xF9	; 249
 58a:	cc f3       	brlt	.-14     	; 0x57e <__fixunssfsi+0x2e>
 58c:	86 95       	lsr	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b3 95       	inc	r27
 594:	d9 f7       	brne	.-10     	; 0x58c <__fixunssfsi+0x3c>
 596:	3e f4       	brtc	.+14     	; 0x5a6 <__fixunssfsi+0x56>
 598:	90 95       	com	r25
 59a:	80 95       	com	r24
 59c:	70 95       	com	r23
 59e:	61 95       	neg	r22
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__floatunsisf>:
 5a8:	e8 94       	clt
 5aa:	09 c0       	rjmp	.+18     	; 0x5be <__floatsisf+0x12>

000005ac <__floatsisf>:
 5ac:	97 fb       	bst	r25, 7
 5ae:	3e f4       	brtc	.+14     	; 0x5be <__floatsisf+0x12>
 5b0:	90 95       	com	r25
 5b2:	80 95       	com	r24
 5b4:	70 95       	com	r23
 5b6:	61 95       	neg	r22
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	99 23       	and	r25, r25
 5c0:	a9 f0       	breq	.+42     	; 0x5ec <__floatsisf+0x40>
 5c2:	f9 2f       	mov	r31, r25
 5c4:	96 e9       	ldi	r25, 0x96	; 150
 5c6:	bb 27       	eor	r27, r27
 5c8:	93 95       	inc	r25
 5ca:	f6 95       	lsr	r31
 5cc:	87 95       	ror	r24
 5ce:	77 95       	ror	r23
 5d0:	67 95       	ror	r22
 5d2:	b7 95       	ror	r27
 5d4:	f1 11       	cpse	r31, r1
 5d6:	f8 cf       	rjmp	.-16     	; 0x5c8 <__floatsisf+0x1c>
 5d8:	fa f4       	brpl	.+62     	; 0x618 <__floatsisf+0x6c>
 5da:	bb 0f       	add	r27, r27
 5dc:	11 f4       	brne	.+4      	; 0x5e2 <__floatsisf+0x36>
 5de:	60 ff       	sbrs	r22, 0
 5e0:	1b c0       	rjmp	.+54     	; 0x618 <__floatsisf+0x6c>
 5e2:	6f 5f       	subi	r22, 0xFF	; 255
 5e4:	7f 4f       	sbci	r23, 0xFF	; 255
 5e6:	8f 4f       	sbci	r24, 0xFF	; 255
 5e8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ea:	16 c0       	rjmp	.+44     	; 0x618 <__floatsisf+0x6c>
 5ec:	88 23       	and	r24, r24
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <__floatsisf+0x48>
 5f0:	96 e9       	ldi	r25, 0x96	; 150
 5f2:	11 c0       	rjmp	.+34     	; 0x616 <__floatsisf+0x6a>
 5f4:	77 23       	and	r23, r23
 5f6:	21 f0       	breq	.+8      	; 0x600 <__floatsisf+0x54>
 5f8:	9e e8       	ldi	r25, 0x8E	; 142
 5fa:	87 2f       	mov	r24, r23
 5fc:	76 2f       	mov	r23, r22
 5fe:	05 c0       	rjmp	.+10     	; 0x60a <__floatsisf+0x5e>
 600:	66 23       	and	r22, r22
 602:	71 f0       	breq	.+28     	; 0x620 <__floatsisf+0x74>
 604:	96 e8       	ldi	r25, 0x86	; 134
 606:	86 2f       	mov	r24, r22
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	2a f0       	brmi	.+10     	; 0x618 <__floatsisf+0x6c>
 60e:	9a 95       	dec	r25
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	88 1f       	adc	r24, r24
 616:	da f7       	brpl	.-10     	; 0x60e <__floatsisf+0x62>
 618:	88 0f       	add	r24, r24
 61a:	96 95       	lsr	r25
 61c:	87 95       	ror	r24
 61e:	97 f9       	bld	r25, 7
 620:	08 95       	ret

00000622 <__fp_split3>:
 622:	57 fd       	sbrc	r21, 7
 624:	90 58       	subi	r25, 0x80	; 128
 626:	44 0f       	add	r20, r20
 628:	55 1f       	adc	r21, r21
 62a:	59 f0       	breq	.+22     	; 0x642 <__fp_splitA+0x10>
 62c:	5f 3f       	cpi	r21, 0xFF	; 255
 62e:	71 f0       	breq	.+28     	; 0x64c <__fp_splitA+0x1a>
 630:	47 95       	ror	r20

00000632 <__fp_splitA>:
 632:	88 0f       	add	r24, r24
 634:	97 fb       	bst	r25, 7
 636:	99 1f       	adc	r25, r25
 638:	61 f0       	breq	.+24     	; 0x652 <__fp_splitA+0x20>
 63a:	9f 3f       	cpi	r25, 0xFF	; 255
 63c:	79 f0       	breq	.+30     	; 0x65c <__fp_splitA+0x2a>
 63e:	87 95       	ror	r24
 640:	08 95       	ret
 642:	12 16       	cp	r1, r18
 644:	13 06       	cpc	r1, r19
 646:	14 06       	cpc	r1, r20
 648:	55 1f       	adc	r21, r21
 64a:	f2 cf       	rjmp	.-28     	; 0x630 <__fp_split3+0xe>
 64c:	46 95       	lsr	r20
 64e:	f1 df       	rcall	.-30     	; 0x632 <__fp_splitA>
 650:	08 c0       	rjmp	.+16     	; 0x662 <__fp_splitA+0x30>
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	18 06       	cpc	r1, r24
 658:	99 1f       	adc	r25, r25
 65a:	f1 cf       	rjmp	.-30     	; 0x63e <__fp_splitA+0xc>
 65c:	86 95       	lsr	r24
 65e:	71 05       	cpc	r23, r1
 660:	61 05       	cpc	r22, r1
 662:	08 94       	sec
 664:	08 95       	ret

00000666 <__fp_zero>:
 666:	e8 94       	clt

00000668 <__fp_szero>:
 668:	bb 27       	eor	r27, r27
 66a:	66 27       	eor	r22, r22
 66c:	77 27       	eor	r23, r23
 66e:	cb 01       	movw	r24, r22
 670:	97 f9       	bld	r25, 7
 672:	08 95       	ret

00000674 <__gesf2>:
 674:	03 d0       	rcall	.+6      	; 0x67c <__fp_cmp>
 676:	08 f4       	brcc	.+2      	; 0x67a <__gesf2+0x6>
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__fp_cmp>:
 67c:	99 0f       	add	r25, r25
 67e:	00 08       	sbc	r0, r0
 680:	55 0f       	add	r21, r21
 682:	aa 0b       	sbc	r26, r26
 684:	e0 e8       	ldi	r30, 0x80	; 128
 686:	fe ef       	ldi	r31, 0xFE	; 254
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	e8 07       	cpc	r30, r24
 68e:	f9 07       	cpc	r31, r25
 690:	c0 f0       	brcs	.+48     	; 0x6c2 <__fp_cmp+0x46>
 692:	12 16       	cp	r1, r18
 694:	13 06       	cpc	r1, r19
 696:	e4 07       	cpc	r30, r20
 698:	f5 07       	cpc	r31, r21
 69a:	98 f0       	brcs	.+38     	; 0x6c2 <__fp_cmp+0x46>
 69c:	62 1b       	sub	r22, r18
 69e:	73 0b       	sbc	r23, r19
 6a0:	84 0b       	sbc	r24, r20
 6a2:	95 0b       	sbc	r25, r21
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <__fp_cmp+0x38>
 6a6:	0a 26       	eor	r0, r26
 6a8:	61 f0       	breq	.+24     	; 0x6c2 <__fp_cmp+0x46>
 6aa:	23 2b       	or	r18, r19
 6ac:	24 2b       	or	r18, r20
 6ae:	25 2b       	or	r18, r21
 6b0:	21 f4       	brne	.+8      	; 0x6ba <__fp_cmp+0x3e>
 6b2:	08 95       	ret
 6b4:	0a 26       	eor	r0, r26
 6b6:	09 f4       	brne	.+2      	; 0x6ba <__fp_cmp+0x3e>
 6b8:	a1 40       	sbci	r26, 0x01	; 1
 6ba:	a6 95       	lsr	r26
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	81 1d       	adc	r24, r1
 6c0:	81 1d       	adc	r24, r1
 6c2:	08 95       	ret

000006c4 <__divmodhi4>:
 6c4:	97 fb       	bst	r25, 7
 6c6:	07 2e       	mov	r0, r23
 6c8:	16 f4       	brtc	.+4      	; 0x6ce <__divmodhi4+0xa>
 6ca:	00 94       	com	r0
 6cc:	06 d0       	rcall	.+12     	; 0x6da <__divmodhi4_neg1>
 6ce:	77 fd       	sbrc	r23, 7
 6d0:	08 d0       	rcall	.+16     	; 0x6e2 <__divmodhi4_neg2>
 6d2:	1a d0       	rcall	.+52     	; 0x708 <__udivmodhi4>
 6d4:	07 fc       	sbrc	r0, 7
 6d6:	05 d0       	rcall	.+10     	; 0x6e2 <__divmodhi4_neg2>
 6d8:	3e f4       	brtc	.+14     	; 0x6e8 <__divmodhi4_exit>

000006da <__divmodhi4_neg1>:
 6da:	90 95       	com	r25
 6dc:	81 95       	neg	r24
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__divmodhi4_neg2>:
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255

000006e8 <__divmodhi4_exit>:
 6e8:	08 95       	ret

000006ea <__umulhisi3>:
 6ea:	a2 9f       	mul	r26, r18
 6ec:	b0 01       	movw	r22, r0
 6ee:	b3 9f       	mul	r27, r19
 6f0:	c0 01       	movw	r24, r0
 6f2:	a3 9f       	mul	r26, r19
 6f4:	70 0d       	add	r23, r0
 6f6:	81 1d       	adc	r24, r1
 6f8:	11 24       	eor	r1, r1
 6fa:	91 1d       	adc	r25, r1
 6fc:	b2 9f       	mul	r27, r18
 6fe:	70 0d       	add	r23, r0
 700:	81 1d       	adc	r24, r1
 702:	11 24       	eor	r1, r1
 704:	91 1d       	adc	r25, r1
 706:	08 95       	ret

00000708 <__udivmodhi4>:
 708:	aa 1b       	sub	r26, r26
 70a:	bb 1b       	sub	r27, r27
 70c:	51 e1       	ldi	r21, 0x11	; 17
 70e:	07 c0       	rjmp	.+14     	; 0x71e <__udivmodhi4_ep>

00000710 <__udivmodhi4_loop>:
 710:	aa 1f       	adc	r26, r26
 712:	bb 1f       	adc	r27, r27
 714:	a6 17       	cp	r26, r22
 716:	b7 07       	cpc	r27, r23
 718:	10 f0       	brcs	.+4      	; 0x71e <__udivmodhi4_ep>
 71a:	a6 1b       	sub	r26, r22
 71c:	b7 0b       	sbc	r27, r23

0000071e <__udivmodhi4_ep>:
 71e:	88 1f       	adc	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	5a 95       	dec	r21
 724:	a9 f7       	brne	.-22     	; 0x710 <__udivmodhi4_loop>
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	bc 01       	movw	r22, r24
 72c:	cd 01       	movw	r24, r26
 72e:	08 95       	ret

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
