
3_dc_motor_enc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e94  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c62  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000427  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ea  00000000  00000000  000027e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000029cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	4a d0       	rcall	.+148    	; 0x18a <main>
  f6:	7c c0       	rjmp	.+248    	; 0x1f0 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <motor_go>:
#include <util/delay.h>

void motor_go(uint8_t dir, uint8_t speed)
{
	
	if(dir == 0)
  fa:	81 11       	cpse	r24, r1
  fc:	06 c0       	rjmp	.+12     	; 0x10a <motor_go+0x10>
	{
		PORTH |= (1<<4); //определяем направление вращения	
  fe:	e2 e0       	ldi	r30, 0x02	; 2
 100:	f1 e0       	ldi	r31, 0x01	; 1
 102:	80 81       	ld	r24, Z
 104:	80 61       	ori	r24, 0x10	; 16
 106:	80 83       	st	Z, r24
 108:	05 c0       	rjmp	.+10     	; 0x114 <motor_go+0x1a>
	}
	else
	{
		PORTH &= ~(1<<4);
 10a:	e2 e0       	ldi	r30, 0x02	; 2
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	80 81       	ld	r24, Z
 110:	8f 7e       	andi	r24, 0xEF	; 239
 112:	80 83       	st	Z, r24
	}
	OCR2A = speed; //определяем скорость вращения
 114:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	OCR2B = speed; //определяем скорость вращения
 118:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
	OCR4A = speed; //определяем скорость вращения
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 122:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4C = speed; //определяем скорость вращения
 126:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
 12a:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
 12e:	08 95       	ret

00000130 <init_pwm>:
}

void init_pwm()
{
  //вывод PH6(OC2B), PB4(OC2A) – ШИМ, вывод PH4 - направление
  DDRH |= (1<<4) | (1<<6);
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	80 81       	ld	r24, Z
 136:	80 65       	ori	r24, 0x50	; 80
 138:	80 83       	st	Z, r24
  DDRB |= (1<<4);
 13a:	24 9a       	sbi	0x04, 4	; 4
  TCCR2A |= (1<<COM2A1);
 13c:	a0 eb       	ldi	r26, 0xB0	; 176
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	8c 91       	ld	r24, X
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8c 93       	st	X, r24
  TCCR2A |= (1<<COM2B1);
 146:	8c 91       	ld	r24, X
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	8c 93       	st	X, r24
  //вывод PH3(OC4A), PH5(OC4C) – ШИМ
  DDRH |= (1 << PORTH3) | (1 << PORTH5);
 14c:	80 81       	ld	r24, Z
 14e:	88 62       	ori	r24, 0x28	; 40
 150:	80 83       	st	Z, r24
  TCCR4A |= (1<<COM4A1);
 152:	e0 ea       	ldi	r30, 0xA0	; 160
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 68       	ori	r24, 0x80	; 128
 15a:	80 83       	st	Z, r24
  TCCR4A |= (1<<COM4C1);
 15c:	80 81       	ld	r24, Z
 15e:	88 60       	ori	r24, 0x08	; 8
 160:	80 83       	st	Z, r24
  
  /* TIMER2 - настройка таймера: быстрый ШИМ,
  неинвертированный режим, предделитель на 1 */
  TCCR2A |= (1<<WGM20) | (1<<WGM21);
 162:	8c 91       	ld	r24, X
 164:	83 60       	ori	r24, 0x03	; 3
 166:	8c 93       	st	X, r24
  TCCR2B |= (1<<CS20);
 168:	a1 eb       	ldi	r26, 0xB1	; 177
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	8c 91       	ld	r24, X
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	8c 93       	st	X, r24
  
  /* TIMER4 - настройка таймера: быстрый ШИМ,
  неинвертированный режим, 8 bit, TOP = 0xFF, предделитель на 1*/
  TCCR4A |= (1 << WGM40);
 172:	80 81       	ld	r24, Z
 174:	81 60       	ori	r24, 0x01	; 1
 176:	80 83       	st	Z, r24
  TCCR4B |= (1 << WGM42);
 178:	e1 ea       	ldi	r30, 0xA1	; 161
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	80 83       	st	Z, r24
  TCCR4B |= (1<<CS40);
 182:	80 81       	ld	r24, Z
 184:	81 60       	ori	r24, 0x01	; 1
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <main>:


int main(void)
{

  init_pwm();
 18a:	d2 df       	rcall	.-92     	; 0x130 <init_pwm>
  while(1)
  {
    for(uint8_t i=1; i<255; i++)
 18c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		motor_go(0, i);
 18e:	6c 2f       	mov	r22, r28
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	b3 df       	rcall	.-154    	; 0xfa <motor_go>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	9f e1       	ldi	r25, 0x1F	; 31
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0xe>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x14>
 19e:	00 00       	nop
{

  init_pwm();
  while(1)
  {
    for(uint8_t i=1; i<255; i++)
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	cf 3f       	cpi	r28, 0xFF	; 255
 1a4:	a1 f7       	brne	.-24     	; 0x18e <main+0x4>
		motor_go(0, i);
		_delay_ms(2);	
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, 256-i);
 1a6:	6c 2f       	mov	r22, r28
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	a7 df       	rcall	.-178    	; 0xfa <motor_go>
 1ac:	8f e3       	ldi	r24, 0x3F	; 63
 1ae:	9f e1       	ldi	r25, 0x1F	; 31
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0x26>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x2c>
 1b6:	00 00       	nop
 1b8:	c1 50       	subi	r28, 0x01	; 1
    for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, i);
		_delay_ms(2);	
	}
	for(uint8_t i=1; i<255; i++)
 1ba:	c1 30       	cpi	r28, 0x01	; 1
		motor_go(0, 256-i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, i);
 1bc:	a1 f7       	brne	.-24     	; 0x1a6 <main+0x1c>
 1be:	6c 2f       	mov	r22, r28
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	9b df       	rcall	.-202    	; 0xfa <motor_go>
 1c4:	8f e3       	ldi	r24, 0x3F	; 63
 1c6:	9f e1       	ldi	r25, 0x1F	; 31
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x3e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x44>
 1ce:	00 00       	nop
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, 256-i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
 1d0:	cf 5f       	subi	r28, 0xFF	; 255
 1d2:	cf 3f       	cpi	r28, 0xFF	; 255
		motor_go(1, i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, 256-i);
 1d4:	a1 f7       	brne	.-24     	; 0x1be <main+0x34>
 1d6:	6c 2f       	mov	r22, r28
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	8f df       	rcall	.-226    	; 0xfa <motor_go>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x56>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x5c>
 1e6:	00 00       	nop
 1e8:	c1 50       	subi	r28, 0x01	; 1
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
 1ea:	c1 30       	cpi	r28, 0x01	; 1
 1ec:	a1 f7       	brne	.-24     	; 0x1d6 <main+0x4c>
 1ee:	ce cf       	rjmp	.-100    	; 0x18c <main+0x2>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
