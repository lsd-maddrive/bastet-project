
3_dc_motor_enc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000402  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800200  00800200  00000476  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4b  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb7  00000000  00000000  000013a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047c  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  000024d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e3  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c9  00000000  00000000  00002b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	02 c1       	rjmp	.+516    	; 0x20a <__vector_1>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a1 30       	cpi	r26, 0x01	; 1
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	73 d0       	rcall	.+230    	; 0x1ec <main>
 106:	7b c1       	rjmp	.+758    	; 0x3fe <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <Tim2DcMotInit>:
uint16_t tim2_count=0, dc_mot_enc_count[4]={0,0,0,0}, enc_result[4]={0,0,0,0};
uint8_t prev_state=0, current_state=0;

void Tim2DcMotInit(void){
	//вывод PH6(OC2B), PB4(OC2A) – ШИМ, вывод PH4 - направление
	TCCR2A |= (1<<COM2A1);
 10a:	a0 eb       	ldi	r26, 0xB0	; 176
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	8c 91       	ld	r24, X
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8c 93       	st	X, r24
	TCCR2A |= (1<<COM2B1);
 114:	8c 91       	ld	r24, X
 116:	80 62       	ori	r24, 0x20	; 32
 118:	8c 93       	st	X, r24
	//вывод PH3(OC4A), PH5(OC4C) – ШИМ
	TCCR4A |= (1<<COM4A1);
 11a:	e0 ea       	ldi	r30, 0xA0	; 160
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 68       	ori	r24, 0x80	; 128
 122:	80 83       	st	Z, r24
	TCCR4A |= (1<<COM4C1);
 124:	80 81       	ld	r24, Z
 126:	88 60       	ori	r24, 0x08	; 8
 128:	80 83       	st	Z, r24
	/* TIMER2 - настройка таймера: быстрый ШИМ,
	неинвертированный режим, предделитель на 1 */
	TCCR2A |= (1<<WGM20) | (1<<WGM21);
 12a:	8c 91       	ld	r24, X
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	8c 93       	st	X, r24
	TCCR2B |= (1<<CS20);
 130:	a1 eb       	ldi	r26, 0xB1	; 177
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	8c 91       	ld	r24, X
 136:	81 60       	ori	r24, 0x01	; 1
 138:	8c 93       	st	X, r24
	/* TIMER4 - настройка таймера: быстрый ШИМ,
	неинвертированный режим, 8 bit, TOP = 0xFF, предделитель на 1*/
	TCCR4A |= (1 << WGM40);
 13a:	80 81       	ld	r24, Z
 13c:	81 60       	ori	r24, 0x01	; 1
 13e:	80 83       	st	Z, r24
	TCCR4B |= (1 << WGM42);
 140:	e1 ea       	ldi	r30, 0xA1	; 161
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS40);
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <DcMotInit>:
}

void DcMotInit(void){
	Tim2DcMotInit();
 152:	db df       	rcall	.-74     	; 0x10a <Tim2DcMotInit>
	IntDcMotEcoderInit();
	//DC_MOT1_SPEED_DDR|=(1<<DC_MOT1_SPEED_DDR_PIN);
	DC_MOT2_SPEED_DDR|=(1<<DC_MOT2_SPEED_DDR_PIN);
 154:	e1 e0       	ldi	r30, 0x01	; 1
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
	DC_MOT3_SPEED_DDR|=(1<<DC_MOT3_SPEED_DDR_PIN);
 15e:	24 9a       	sbi	0x04, 4	; 4
	DC_MOT4_SPEED_DDR|=(1<<DC_MOT4_SPEED_DDR_PIN);
 160:	80 81       	ld	r24, Z
 162:	80 64       	ori	r24, 0x40	; 64
 164:	80 83       	st	Z, r24
	
	DC_MOT_DIR_DDR|=(1<<DC_MOT_DIR_DDR_PIN);
 166:	80 81       	ld	r24, Z
 168:	80 61       	ori	r24, 0x10	; 16
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <DcMotGo>:
}



void DcMotGo(float speed){
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	6b 01       	movw	r12, r22
 178:	7c 01       	movw	r14, r24
	if(speed>=0) DC_MOT_FOR;
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	a9 01       	movw	r20, r18
 180:	ef d0       	rcall	.+478    	; 0x360 <__gesf2>
 182:	88 23       	and	r24, r24
 184:	34 f0       	brlt	.+12     	; 0x192 <DcMotGo+0x24>
 186:	e2 e0       	ldi	r30, 0x02	; 2
 188:	f1 e0       	ldi	r31, 0x01	; 1
 18a:	80 81       	ld	r24, Z
 18c:	8f 7e       	andi	r24, 0xEF	; 239
 18e:	80 83       	st	Z, r24
 190:	05 c0       	rjmp	.+10     	; 0x19c <DcMotGo+0x2e>
	else DC_MOT_REV;
 192:	e2 e0       	ldi	r30, 0x02	; 2
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	80 81       	ld	r24, Z
 198:	80 61       	ori	r24, 0x10	; 16
 19a:	80 83       	st	Z, r24
	OCR2A = (uint8_t)((abs(speed)*255)/100);
 19c:	c7 01       	movw	r24, r14
 19e:	b6 01       	movw	r22, r12
 1a0:	48 d0       	rcall	.+144    	; 0x232 <__fixsfsi>
 1a2:	9b 01       	movw	r18, r22
 1a4:	77 23       	and	r23, r23
 1a6:	24 f4       	brge	.+8      	; 0x1b0 <DcMotGo+0x42>
 1a8:	22 27       	eor	r18, r18
 1aa:	33 27       	eor	r19, r19
 1ac:	26 1b       	sub	r18, r22
 1ae:	37 0b       	sbc	r19, r23
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	42 9f       	mul	r20, r18
 1b4:	c0 01       	movw	r24, r0
 1b6:	43 9f       	mul	r20, r19
 1b8:	90 0d       	add	r25, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	64 e6       	ldi	r22, 0x64	; 100
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	f7 d0       	rcall	.+494    	; 0x3b0 <__divmodhi4>
 1c2:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
	OCR2B = (uint8_t)((abs(speed)*255)/100);
 1c6:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7c00b4>
	OCR4A = (uint8_t)((abs(speed)*255)/100);
 1ca:	77 27       	eor	r23, r23
 1cc:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 1d0:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4C = (uint8_t)((abs(speed)*255)/100);
 1d4:	70 93 ad 00 	sts	0x00AD, r23	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7c00ad>
 1d8:	60 93 ac 00 	sts	0x00AC, r22	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7c00ac>
}
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	08 95       	ret

000001e6 <InitAll>:
void InitAll(void){
	//UartInit();
	//I2cInit();
	//ExpInit(EXP_DEF_ADDR);
	//AdcInit();
	DcMotInit();
 1e6:	b5 df       	rcall	.-150    	; 0x152 <DcMotInit>
	DDRB|=(1<<7);
 1e8:	27 9a       	sbi	0x04, 7	; 4
 1ea:	08 95       	ret

000001ec <main>:

void InitAll(void);
uint8_t angle;

int main(void){
	InitAll();
 1ec:	fc df       	rcall	.-8      	; 0x1e6 <InitAll>
	EICRA=(1<<ISC01);
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	EIMSK=(1<<INT0);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	8d bb       	out	0x1d, r24	; 29
	//настройка формы сигнала
	sei();
 1f8:	78 94       	sei
	
	while (1)
	{
		DcMotGo(angle);
 1fa:	60 91 00 02 	lds	r22, 0x0200	; 0x800200 <_edata>
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	47 d0       	rcall	.+142    	; 0x294 <__floatunsisf>
 206:	b3 df       	rcall	.-154    	; 0x16e <DcMotGo>
 208:	f8 cf       	rjmp	.-16     	; 0x1fa <main+0xe>

0000020a <__vector_1>:
	//_delay_ms(100);
	//sei();
}

ISR (INT0_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
	PORTB^=(1<<7);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	85 b9       	out	0x05, r24	; 5
	angle+=1;
 21c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
}
 226:	8f 91       	pop	r24
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__fixsfsi>:
 232:	04 d0       	rcall	.+8      	; 0x23c <__fixunssfsi>
 234:	68 94       	set
 236:	b1 11       	cpse	r27, r1
 238:	8d c0       	rjmp	.+282    	; 0x354 <__fp_szero>
 23a:	08 95       	ret

0000023c <__fixunssfsi>:
 23c:	70 d0       	rcall	.+224    	; 0x31e <__fp_splitA>
 23e:	88 f0       	brcs	.+34     	; 0x262 <__fixunssfsi+0x26>
 240:	9f 57       	subi	r25, 0x7F	; 127
 242:	90 f0       	brcs	.+36     	; 0x268 <__fixunssfsi+0x2c>
 244:	b9 2f       	mov	r27, r25
 246:	99 27       	eor	r25, r25
 248:	b7 51       	subi	r27, 0x17	; 23
 24a:	a0 f0       	brcs	.+40     	; 0x274 <__fixunssfsi+0x38>
 24c:	d1 f0       	breq	.+52     	; 0x282 <__fixunssfsi+0x46>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	1a f0       	brmi	.+6      	; 0x25e <__fixunssfsi+0x22>
 258:	ba 95       	dec	r27
 25a:	c9 f7       	brne	.-14     	; 0x24e <__fixunssfsi+0x12>
 25c:	12 c0       	rjmp	.+36     	; 0x282 <__fixunssfsi+0x46>
 25e:	b1 30       	cpi	r27, 0x01	; 1
 260:	81 f0       	breq	.+32     	; 0x282 <__fixunssfsi+0x46>
 262:	77 d0       	rcall	.+238    	; 0x352 <__fp_zero>
 264:	b1 e0       	ldi	r27, 0x01	; 1
 266:	08 95       	ret
 268:	74 c0       	rjmp	.+232    	; 0x352 <__fp_zero>
 26a:	67 2f       	mov	r22, r23
 26c:	78 2f       	mov	r23, r24
 26e:	88 27       	eor	r24, r24
 270:	b8 5f       	subi	r27, 0xF8	; 248
 272:	39 f0       	breq	.+14     	; 0x282 <__fixunssfsi+0x46>
 274:	b9 3f       	cpi	r27, 0xF9	; 249
 276:	cc f3       	brlt	.-14     	; 0x26a <__fixunssfsi+0x2e>
 278:	86 95       	lsr	r24
 27a:	77 95       	ror	r23
 27c:	67 95       	ror	r22
 27e:	b3 95       	inc	r27
 280:	d9 f7       	brne	.-10     	; 0x278 <__fixunssfsi+0x3c>
 282:	3e f4       	brtc	.+14     	; 0x292 <__fixunssfsi+0x56>
 284:	90 95       	com	r25
 286:	80 95       	com	r24
 288:	70 95       	com	r23
 28a:	61 95       	neg	r22
 28c:	7f 4f       	sbci	r23, 0xFF	; 255
 28e:	8f 4f       	sbci	r24, 0xFF	; 255
 290:	9f 4f       	sbci	r25, 0xFF	; 255
 292:	08 95       	ret

00000294 <__floatunsisf>:
 294:	e8 94       	clt
 296:	09 c0       	rjmp	.+18     	; 0x2aa <__floatsisf+0x12>

00000298 <__floatsisf>:
 298:	97 fb       	bst	r25, 7
 29a:	3e f4       	brtc	.+14     	; 0x2aa <__floatsisf+0x12>
 29c:	90 95       	com	r25
 29e:	80 95       	com	r24
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255
 2a6:	8f 4f       	sbci	r24, 0xFF	; 255
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	99 23       	and	r25, r25
 2ac:	a9 f0       	breq	.+42     	; 0x2d8 <__floatsisf+0x40>
 2ae:	f9 2f       	mov	r31, r25
 2b0:	96 e9       	ldi	r25, 0x96	; 150
 2b2:	bb 27       	eor	r27, r27
 2b4:	93 95       	inc	r25
 2b6:	f6 95       	lsr	r31
 2b8:	87 95       	ror	r24
 2ba:	77 95       	ror	r23
 2bc:	67 95       	ror	r22
 2be:	b7 95       	ror	r27
 2c0:	f1 11       	cpse	r31, r1
 2c2:	f8 cf       	rjmp	.-16     	; 0x2b4 <__floatsisf+0x1c>
 2c4:	fa f4       	brpl	.+62     	; 0x304 <__floatsisf+0x6c>
 2c6:	bb 0f       	add	r27, r27
 2c8:	11 f4       	brne	.+4      	; 0x2ce <__floatsisf+0x36>
 2ca:	60 ff       	sbrs	r22, 0
 2cc:	1b c0       	rjmp	.+54     	; 0x304 <__floatsisf+0x6c>
 2ce:	6f 5f       	subi	r22, 0xFF	; 255
 2d0:	7f 4f       	sbci	r23, 0xFF	; 255
 2d2:	8f 4f       	sbci	r24, 0xFF	; 255
 2d4:	9f 4f       	sbci	r25, 0xFF	; 255
 2d6:	16 c0       	rjmp	.+44     	; 0x304 <__floatsisf+0x6c>
 2d8:	88 23       	and	r24, r24
 2da:	11 f0       	breq	.+4      	; 0x2e0 <__floatsisf+0x48>
 2dc:	96 e9       	ldi	r25, 0x96	; 150
 2de:	11 c0       	rjmp	.+34     	; 0x302 <__floatsisf+0x6a>
 2e0:	77 23       	and	r23, r23
 2e2:	21 f0       	breq	.+8      	; 0x2ec <__floatsisf+0x54>
 2e4:	9e e8       	ldi	r25, 0x8E	; 142
 2e6:	87 2f       	mov	r24, r23
 2e8:	76 2f       	mov	r23, r22
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <__floatsisf+0x5e>
 2ec:	66 23       	and	r22, r22
 2ee:	71 f0       	breq	.+28     	; 0x30c <__floatsisf+0x74>
 2f0:	96 e8       	ldi	r25, 0x86	; 134
 2f2:	86 2f       	mov	r24, r22
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	2a f0       	brmi	.+10     	; 0x304 <__floatsisf+0x6c>
 2fa:	9a 95       	dec	r25
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	da f7       	brpl	.-10     	; 0x2fa <__floatsisf+0x62>
 304:	88 0f       	add	r24, r24
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	97 f9       	bld	r25, 7
 30c:	08 95       	ret

0000030e <__fp_split3>:
 30e:	57 fd       	sbrc	r21, 7
 310:	90 58       	subi	r25, 0x80	; 128
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	59 f0       	breq	.+22     	; 0x32e <__fp_splitA+0x10>
 318:	5f 3f       	cpi	r21, 0xFF	; 255
 31a:	71 f0       	breq	.+28     	; 0x338 <__fp_splitA+0x1a>
 31c:	47 95       	ror	r20

0000031e <__fp_splitA>:
 31e:	88 0f       	add	r24, r24
 320:	97 fb       	bst	r25, 7
 322:	99 1f       	adc	r25, r25
 324:	61 f0       	breq	.+24     	; 0x33e <__fp_splitA+0x20>
 326:	9f 3f       	cpi	r25, 0xFF	; 255
 328:	79 f0       	breq	.+30     	; 0x348 <__fp_splitA+0x2a>
 32a:	87 95       	ror	r24
 32c:	08 95       	ret
 32e:	12 16       	cp	r1, r18
 330:	13 06       	cpc	r1, r19
 332:	14 06       	cpc	r1, r20
 334:	55 1f       	adc	r21, r21
 336:	f2 cf       	rjmp	.-28     	; 0x31c <__fp_split3+0xe>
 338:	46 95       	lsr	r20
 33a:	f1 df       	rcall	.-30     	; 0x31e <__fp_splitA>
 33c:	08 c0       	rjmp	.+16     	; 0x34e <__fp_splitA+0x30>
 33e:	16 16       	cp	r1, r22
 340:	17 06       	cpc	r1, r23
 342:	18 06       	cpc	r1, r24
 344:	99 1f       	adc	r25, r25
 346:	f1 cf       	rjmp	.-30     	; 0x32a <__fp_splitA+0xc>
 348:	86 95       	lsr	r24
 34a:	71 05       	cpc	r23, r1
 34c:	61 05       	cpc	r22, r1
 34e:	08 94       	sec
 350:	08 95       	ret

00000352 <__fp_zero>:
 352:	e8 94       	clt

00000354 <__fp_szero>:
 354:	bb 27       	eor	r27, r27
 356:	66 27       	eor	r22, r22
 358:	77 27       	eor	r23, r23
 35a:	cb 01       	movw	r24, r22
 35c:	97 f9       	bld	r25, 7
 35e:	08 95       	ret

00000360 <__gesf2>:
 360:	03 d0       	rcall	.+6      	; 0x368 <__fp_cmp>
 362:	08 f4       	brcc	.+2      	; 0x366 <__gesf2+0x6>
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	08 95       	ret

00000368 <__fp_cmp>:
 368:	99 0f       	add	r25, r25
 36a:	00 08       	sbc	r0, r0
 36c:	55 0f       	add	r21, r21
 36e:	aa 0b       	sbc	r26, r26
 370:	e0 e8       	ldi	r30, 0x80	; 128
 372:	fe ef       	ldi	r31, 0xFE	; 254
 374:	16 16       	cp	r1, r22
 376:	17 06       	cpc	r1, r23
 378:	e8 07       	cpc	r30, r24
 37a:	f9 07       	cpc	r31, r25
 37c:	c0 f0       	brcs	.+48     	; 0x3ae <__fp_cmp+0x46>
 37e:	12 16       	cp	r1, r18
 380:	13 06       	cpc	r1, r19
 382:	e4 07       	cpc	r30, r20
 384:	f5 07       	cpc	r31, r21
 386:	98 f0       	brcs	.+38     	; 0x3ae <__fp_cmp+0x46>
 388:	62 1b       	sub	r22, r18
 38a:	73 0b       	sbc	r23, r19
 38c:	84 0b       	sbc	r24, r20
 38e:	95 0b       	sbc	r25, r21
 390:	39 f4       	brne	.+14     	; 0x3a0 <__fp_cmp+0x38>
 392:	0a 26       	eor	r0, r26
 394:	61 f0       	breq	.+24     	; 0x3ae <__fp_cmp+0x46>
 396:	23 2b       	or	r18, r19
 398:	24 2b       	or	r18, r20
 39a:	25 2b       	or	r18, r21
 39c:	21 f4       	brne	.+8      	; 0x3a6 <__fp_cmp+0x3e>
 39e:	08 95       	ret
 3a0:	0a 26       	eor	r0, r26
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <__fp_cmp+0x3e>
 3a4:	a1 40       	sbci	r26, 0x01	; 1
 3a6:	a6 95       	lsr	r26
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	81 1d       	adc	r24, r1
 3ac:	81 1d       	adc	r24, r1
 3ae:	08 95       	ret

000003b0 <__divmodhi4>:
 3b0:	97 fb       	bst	r25, 7
 3b2:	07 2e       	mov	r0, r23
 3b4:	16 f4       	brtc	.+4      	; 0x3ba <__divmodhi4+0xa>
 3b6:	00 94       	com	r0
 3b8:	06 d0       	rcall	.+12     	; 0x3c6 <__divmodhi4_neg1>
 3ba:	77 fd       	sbrc	r23, 7
 3bc:	08 d0       	rcall	.+16     	; 0x3ce <__divmodhi4_neg2>
 3be:	0b d0       	rcall	.+22     	; 0x3d6 <__udivmodhi4>
 3c0:	07 fc       	sbrc	r0, 7
 3c2:	05 d0       	rcall	.+10     	; 0x3ce <__divmodhi4_neg2>
 3c4:	3e f4       	brtc	.+14     	; 0x3d4 <__divmodhi4_exit>

000003c6 <__divmodhi4_neg1>:
 3c6:	90 95       	com	r25
 3c8:	81 95       	neg	r24
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	08 95       	ret

000003ce <__divmodhi4_neg2>:
 3ce:	70 95       	com	r23
 3d0:	61 95       	neg	r22
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255

000003d4 <__divmodhi4_exit>:
 3d4:	08 95       	ret

000003d6 <__udivmodhi4>:
 3d6:	aa 1b       	sub	r26, r26
 3d8:	bb 1b       	sub	r27, r27
 3da:	51 e1       	ldi	r21, 0x11	; 17
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <__udivmodhi4_ep>

000003de <__udivmodhi4_loop>:
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	a6 17       	cp	r26, r22
 3e4:	b7 07       	cpc	r27, r23
 3e6:	10 f0       	brcs	.+4      	; 0x3ec <__udivmodhi4_ep>
 3e8:	a6 1b       	sub	r26, r22
 3ea:	b7 0b       	sbc	r27, r23

000003ec <__udivmodhi4_ep>:
 3ec:	88 1f       	adc	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	5a 95       	dec	r21
 3f2:	a9 f7       	brne	.-22     	; 0x3de <__udivmodhi4_loop>
 3f4:	80 95       	com	r24
 3f6:	90 95       	com	r25
 3f8:	bc 01       	movw	r22, r24
 3fa:	cd 01       	movw	r24, r26
 3fc:	08 95       	ret

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
