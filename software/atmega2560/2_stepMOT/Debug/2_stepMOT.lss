
2_stepMOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000b10  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800208  00800208  00000bac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e3  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa1  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a11  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00003bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000796  00000000  00000000  00003ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a6  00000000  00000000  0000465a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b4 c0       	rjmp	.+360    	; 0x1ba <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c2       	rjmp	.+1118   	; 0x4c4 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e1       	ldi	r30, 0x10	; 16
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 32       	cpi	r26, 0x24	; 36
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	11 d0       	rcall	.+34     	; 0x142 <main>
 120:	f5 c4       	rjmp	.+2538   	; 0xb0c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitAll>:
		//_delay_ms(500);
	}
}

void InitAll(void){
	UartInit();
 124:	96 d1       	rcall	.+812    	; 0x452 <UartInit>
	DDRB|=(1<<7);
 126:	27 9a       	sbi	0x04, 7	; 4
	DDRF|=(1<<5);
	//AdcInit();
	StMotInit();
 128:	85 9a       	sbi	0x10, 5	; 16
 12a:	26 d0       	rcall	.+76     	; 0x178 <StMotInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <InitAll+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <InitAll+0x18>
 13c:	00 00       	nop
	//StMotGo(0);
	_delay_ms(100);
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <main>:

void InitAll(void);

int main(void)
{
	InitAll();
 142:	f0 df       	rcall	.-32     	; 0x124 <InitAll>
	float angle = 0;
	while (1)
	{
		//получаем данные с терминала 0Е100 Ц скважность Ў»ћ
		angle = UartReceiveData();
 144:	b6 d1       	rcall	.+876    	; 0x4b2 <UartReceiveData>
		// выставл€ем скорость вращени€ двигател€
		SetAngle(angle);
 146:	a9 d0       	rcall	.+338    	; 0x29a <SetAngle>
		// табул€ци€ положени€ курсора в терминале
		UartTransmitByte('\t');
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	39 d1       	rcall	.+626    	; 0x3be <UartTransmitByte>
		// выводим только что переданное значение
		UartSendDec(GetCount());
 14c:	21 d0       	rcall	.+66     	; 0x190 <GetCount>
 14e:	3f d1       	rcall	.+638    	; 0x3ce <UartSendDec>
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	35 d1       	rcall	.+618    	; 0x3be <UartTransmitByte>
		
		//UartTransmitByte('\t');
		//error = data - GetSpeed();
		//UartSendDec(error);
		
		UartTransmitByte('\r');
 154:	f7 cf       	rjmp	.-18     	; 0x144 <main+0x2>

00000156 <StMotTim1Init>:
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
//
//}
void StMotGo(){
	//angle_setpoint=angle-current_angle;
	StMotDir(angle_setpoint);
	pulse_setpoint=abs(angle_setpoint) * ANGLE_TO_STEPS;
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
 160:	8b e9       	ldi	r24, 0x9B	; 155
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 168:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 16c:	ef e6       	ldi	r30, 0x6F	; 111
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	81 60       	ori	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <StMotInit>:
 178:	ee df       	rcall	.-36     	; 0x156 <StMotTim1Init>
 17a:	81 b1       	in	r24, 0x01	; 1
 17c:	85 65       	ori	r24, 0x55	; 85
 17e:	81 b9       	out	0x01, r24	; 1
 180:	81 b1       	in	r24, 0x01	; 1
 182:	8a 6a       	ori	r24, 0xAA	; 170
 184:	81 b9       	out	0x01, r24	; 1
 186:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <pulse_setpoint+0x1>
 18a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <pulse_setpoint>
 18e:	08 95       	ret

00000190 <GetCount>:
 190:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <operate_flag>
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret

00000198 <StMotPul>:
 198:	92 b1       	in	r25, 0x02	; 2
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	89 27       	eor	r24, r25
 19e:	82 b9       	out	0x02, r24	; 2
 1a0:	92 b1       	in	r25, 0x02	; 2
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	89 27       	eor	r24, r25
 1a6:	82 b9       	out	0x02, r24	; 2
 1a8:	92 b1       	in	r25, 0x02	; 2
 1aa:	80 e1       	ldi	r24, 0x10	; 16
 1ac:	89 27       	eor	r24, r25
 1ae:	82 b9       	out	0x02, r24	; 2
 1b0:	92 b1       	in	r25, 0x02	; 2
 1b2:	80 e4       	ldi	r24, 0x40	; 64
 1b4:	89 27       	eor	r24, r25
 1b6:	82 b9       	out	0x02, r24	; 2
 1b8:	08 95       	ret

000001ba <__vector_20>:
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	0b b6       	in	r0, 0x3b	; 59
 1c6:	0f 92       	push	r0
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
 1e0:	8b e9       	ldi	r24, 0x9B	; 155
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1e8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 1ec:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <operate_flag>
 1f0:	88 23       	and	r24, r24
 1f2:	61 f1       	breq	.+88     	; 0x24c <__vector_20+0x92>
 1f4:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <pulse_count>
 1f8:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <pulse_count+0x1>
 1fc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <pulse_setpoint>
 200:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <pulse_setpoint+0x1>
 204:	28 17       	cp	r18, r24
 206:	39 07       	cpc	r19, r25
 208:	58 f4       	brcc	.+22     	; 0x220 <__vector_20+0x66>
 20a:	c6 df       	rcall	.-116    	; 0x198 <StMotPul>
 20c:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <pulse_count>
 210:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <pulse_count+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <pulse_count+0x1>
 21a:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pulse_count>
 21e:	16 c0       	rjmp	.+44     	; 0x24c <__vector_20+0x92>
 220:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pulse_count+0x1>
 224:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pulse_count>
 228:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <operate_flag>
 22c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 230:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 234:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <__data_end+0x2>
 238:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <__data_end+0x3>
 23c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <current_angle>
 240:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <current_angle+0x1>
 244:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <current_angle+0x2>
 248:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <current_angle+0x3>
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0b be       	out	0x3b, r0	; 59
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <StMotDir>:
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	a9 01       	movw	r20, r18
 278:	d3 d3       	rcall	.+1958   	; 0xa20 <__gesf2>
 27a:	88 23       	and	r24, r24
 27c:	2c f0       	brlt	.+10     	; 0x288 <StMotDir+0x16>
 27e:	11 9a       	sbi	0x02, 1	; 2
 280:	13 9a       	sbi	0x02, 3	; 2
 282:	15 9a       	sbi	0x02, 5	; 2
 284:	17 9a       	sbi	0x02, 7	; 2
 286:	08 95       	ret
 288:	82 b1       	in	r24, 0x02	; 2
 28a:	12 b8       	out	0x02, r1	; 2
 28c:	82 b1       	in	r24, 0x02	; 2
 28e:	12 b8       	out	0x02, r1	; 2
 290:	82 b1       	in	r24, 0x02	; 2
 292:	12 b8       	out	0x02, r1	; 2
 294:	82 b1       	in	r24, 0x02	; 2
 296:	12 b8       	out	0x02, r1	; 2
 298:	08 95       	ret

0000029a <SetAngle>:
		ST_MOT_DIR_PORT&=(0<<PORT_DIR3);
		ST_MOT_DIR_PORT&=(0<<PORT_DIR4);
	}
}

void SetAngle(float angle){
 29a:	8f 92       	push	r8
 29c:	9f 92       	push	r9
 29e:	af 92       	push	r10
 2a0:	bf 92       	push	r11
 2a2:	cf 92       	push	r12
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	cf 93       	push	r28
 2ac:	6b 01       	movw	r12, r22
 2ae:	7c 01       	movw	r14, r24

	//limiting the setpoint +/- 90 degrees

	if(angle<MIN_ANGLE) angle=MIN_ANGLE;
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	44 eb       	ldi	r20, 0xB4	; 180
 2b6:	52 ec       	ldi	r21, 0xC2	; 194
 2b8:	64 d2       	rcall	.+1224   	; 0x782 <__cmpsf2>
 2ba:	88 23       	and	r24, r24
 2bc:	94 f0       	brlt	.+36     	; 0x2e2 <SetAngle+0x48>
	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	44 eb       	ldi	r20, 0xB4	; 180
 2c4:	52 e4       	ldi	r21, 0x42	; 66
 2c6:	c7 01       	movw	r24, r14
 2c8:	b6 01       	movw	r22, r12
 2ca:	aa d3       	rcall	.+1876   	; 0xa20 <__gesf2>
 2cc:	18 16       	cp	r1, r24
 2ce:	8c f4       	brge	.+34     	; 0x2f2 <SetAngle+0x58>
 2d0:	0f 2e       	mov	r0, r31
 2d2:	c1 2c       	mov	r12, r1
 2d4:	d1 2c       	mov	r13, r1
 2d6:	f4 eb       	ldi	r31, 0xB4	; 180
 2d8:	ef 2e       	mov	r14, r31
 2da:	f2 e4       	ldi	r31, 0x42	; 66
 2dc:	ff 2e       	mov	r15, r31
 2de:	f0 2d       	mov	r31, r0
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <SetAngle+0x58>

void SetAngle(float angle){

	//limiting the setpoint +/- 90 degrees

	if(angle<MIN_ANGLE) angle=MIN_ANGLE;
 2e2:	0f 2e       	mov	r0, r31
 2e4:	c1 2c       	mov	r12, r1
 2e6:	d1 2c       	mov	r13, r1
 2e8:	f4 eb       	ldi	r31, 0xB4	; 180
 2ea:	ef 2e       	mov	r14, r31
 2ec:	f2 ec       	ldi	r31, 0xC2	; 194
 2ee:	ff 2e       	mov	r15, r31
 2f0:	f0 2d       	mov	r31, r0
	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
	//current_angle = angle_setpoint;
	//angle_setpoint = angle - current_angle;

	if ((angle!=current_angle) & (operate_flag == 0))
 2f2:	80 90 0c 02 	lds	r8, 0x020C	; 0x80020c <current_angle>
 2f6:	90 90 0d 02 	lds	r9, 0x020D	; 0x80020d <current_angle+0x1>
 2fa:	a0 90 0e 02 	lds	r10, 0x020E	; 0x80020e <current_angle+0x2>
 2fe:	b0 90 0f 02 	lds	r11, 0x020F	; 0x80020f <current_angle+0x3>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <operate_flag>
 308:	91 11       	cpse	r25, r1
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	88 23       	and	r24, r24
 30e:	09 f4       	brne	.+2      	; 0x312 <SetAngle+0x78>
 310:	4c c0       	rjmp	.+152    	; 0x3aa <SetAngle+0x110>
 312:	c1 e0       	ldi	r28, 0x01	; 1
 314:	a5 01       	movw	r20, r10
 316:	94 01       	movw	r18, r8
 318:	c7 01       	movw	r24, r14
 31a:	b6 01       	movw	r22, r12
 31c:	32 d2       	rcall	.+1124   	; 0x782 <__cmpsf2>
 31e:	81 11       	cpse	r24, r1
 320:	01 c0       	rjmp	.+2      	; 0x324 <SetAngle+0x8a>
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	cc 23       	and	r28, r28
 326:	09 f4       	brne	.+2      	; 0x32a <SetAngle+0x90>
 328:	40 c0       	rjmp	.+128    	; 0x3aa <SetAngle+0x110>
	{
		set_angle = angle;
 32a:	c0 92 08 02 	sts	0x0208, r12	; 0x800208 <__data_end>
 32e:	d0 92 09 02 	sts	0x0209, r13	; 0x800209 <__data_end+0x1>
 332:	e0 92 0a 02 	sts	0x020A, r14	; 0x80020a <__data_end+0x2>
 336:	f0 92 0b 02 	sts	0x020B, r15	; 0x80020b <__data_end+0x3>
		angle_setpoint = angle - current_angle;
 33a:	a5 01       	movw	r20, r10
 33c:	94 01       	movw	r18, r8
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	ba d1       	rcall	.+884    	; 0x6b8 <__subsf3>
 344:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <angle_setpoint>
 348:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <angle_setpoint+0x1>
 34c:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <angle_setpoint+0x2>
 350:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <angle_setpoint+0x3>
		StMotDir(angle_setpoint);
 354:	8e df       	rcall	.-228    	; 0x272 <StMotDir>
		pulse_setpoint=abs(angle_setpoint) * ANGLE_TO_STEPS;
 356:	60 91 10 02 	lds	r22, 0x0210	; 0x800210 <angle_setpoint>
 35a:	70 91 11 02 	lds	r23, 0x0211	; 0x800211 <angle_setpoint+0x1>
 35e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <angle_setpoint+0x2>
 362:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <angle_setpoint+0x3>
 366:	79 d2       	rcall	.+1266   	; 0x85a <__fixsfsi>
 368:	9b 01       	movw	r18, r22
 36a:	77 23       	and	r23, r23
 36c:	24 f4       	brge	.+8      	; 0x376 <SetAngle+0xdc>
 36e:	22 27       	eor	r18, r18
 370:	33 27       	eor	r19, r19
 372:	26 1b       	sub	r18, r22
 374:	37 0b       	sbc	r19, r23
 376:	b9 01       	movw	r22, r18
 378:	33 0f       	add	r19, r19
 37a:	88 0b       	sbc	r24, r24
 37c:	99 0b       	sbc	r25, r25
 37e:	a0 d2       	rcall	.+1344   	; 0x8c0 <__floatsisf>
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	48 e4       	ldi	r20, 0x48	; 72
 386:	55 e4       	ldi	r21, 0x45	; 69
 388:	4f d3       	rcall	.+1694   	; 0xa28 <__mulsf3>
 38a:	9b 01       	movw	r18, r22
 38c:	ac 01       	movw	r20, r24
 38e:	95 d1       	rcall	.+810    	; 0x6ba <__addsf3>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	44 eb       	ldi	r20, 0xB4	; 180
 396:	53 e4       	ldi	r21, 0x43	; 67
 398:	f8 d1       	rcall	.+1008   	; 0x78a <__divsf3>
 39a:	64 d2       	rcall	.+1224   	; 0x864 <__fixunssfsi>
 39c:	70 93 15 02 	sts	0x0215, r23	; 0x800215 <pulse_setpoint+0x1>
 3a0:	60 93 14 02 	sts	0x0214, r22	; 0x800214 <pulse_setpoint>
		operate_flag = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <operate_flag>
	}

}
 3aa:	cf 91       	pop	r28
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	bf 90       	pop	r11
 3b6:	af 90       	pop	r10
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	08 95       	ret

000003be <UartTransmitByte>:
	}
	while(1);
	if(negative_flag==1) data=-data;
	// заканчиваем, когда увидели признак \r\n
	return(data);
}
 3be:	e0 ec       	ldi	r30, 0xC0	; 192
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	90 81       	ld	r25, Z
 3c4:	95 ff       	sbrs	r25, 5
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <UartTransmitByte+0x4>
 3c8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3cc:	08 95       	ret

000003ce <UartSendDec>:
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	7c 01       	movw	r14, r24
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	11 f1       	breq	.+68     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3e0:	2c f4       	brge	.+10     	; 0x3ec <UartSendDec+0x1e>
 3e2:	f1 94       	neg	r15
 3e4:	e1 94       	neg	r14
 3e6:	f1 08       	sbc	r15, r1
 3e8:	8d e2       	ldi	r24, 0x2D	; 45
 3ea:	e9 df       	rcall	.-46     	; 0x3be <UartTransmitByte>
 3ec:	c1 e0       	ldi	r28, 0x01	; 1
 3ee:	1e 2d       	mov	r17, r14
 3f0:	df 2d       	mov	r29, r15
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <UartSendDec+0x28>
 3f4:	ce 2d       	mov	r28, r14
 3f6:	ee 24       	eor	r14, r14
 3f8:	e3 94       	inc	r14
 3fa:	ec 0e       	add	r14, r28
 3fc:	01 2f       	mov	r16, r17
 3fe:	fd 2e       	mov	r15, r29
 400:	6c 2f       	mov	r22, r28
 402:	81 2f       	mov	r24, r17
 404:	9d 2f       	mov	r25, r29
 406:	04 d1       	rcall	.+520    	; 0x610 <Digit>
 408:	88 23       	and	r24, r24
 40a:	a1 f3       	breq	.-24     	; 0x3f4 <UartSendDec+0x26>
 40c:	c6 30       	cpi	r28, 0x06	; 6
 40e:	60 f4       	brcc	.+24     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 410:	6c 2f       	mov	r22, r28
 412:	80 2f       	mov	r24, r16
 414:	9f 2d       	mov	r25, r15
 416:	fc d0       	rcall	.+504    	; 0x610 <Digit>
 418:	80 5d       	subi	r24, 0xD0	; 208
 41a:	d1 df       	rcall	.-94     	; 0x3be <UartTransmitByte>
 41c:	cf 5f       	subi	r28, 0xFF	; 255
 41e:	c6 30       	cpi	r28, 0x06	; 6
 420:	b9 f7       	brne	.-18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	80 e3       	ldi	r24, 0x30	; 48
 426:	cb df       	rcall	.-106    	; 0x3be <UartTransmitByte>
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	ff 90       	pop	r15
 432:	ef 90       	pop	r14
 434:	08 95       	ret

00000436 <UartSendStr>:
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
 43c:	88 81       	ld	r24, Y
 43e:	88 23       	and	r24, r24
 440:	29 f0       	breq	.+10     	; 0x44c <UartSendStr+0x16>
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	bc df       	rcall	.-136    	; 0x3be <UartTransmitByte>
 446:	89 91       	ld	r24, Y+
 448:	81 11       	cpse	r24, r1
 44a:	fc cf       	rjmp	.-8      	; 0x444 <UartSendStr+0xe>
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <UartInit>:

#define INTERRUPTS
/* функци€ инициализации: настройка ћ  на приЄм и передачу данных, 
длина сообщени€ Ц 8 бит, один —“ќѕ бит, без паритета, скорость обмена Ц 19200 бод */
void UartInit(void){
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	cd b7       	in	r28, 0x3d	; 61
 458:	de b7       	in	r29, 0x3e	; 62
 45a:	28 97       	sbiw	r28, 0x08	; 8
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
	uint8_t word[]={"UART_OK"};
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	e0 e0       	ldi	r30, 0x00	; 0
 46a:	f2 e0       	ldi	r31, 0x02	; 2
 46c:	de 01       	movw	r26, r28
 46e:	11 96       	adiw	r26, 0x01	; 1
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	8a 95       	dec	r24
 476:	e1 f7       	brne	.-8      	; 0x470 <UartInit+0x1e>
	#ifdef INTERRUPTS
		UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 478:	e1 ec       	ldi	r30, 0xC1	; 193
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	88 69       	ori	r24, 0x98	; 152
 480:	80 83       	st	Z, r24
	#endif
	#ifdef NO_INTERRUPTS
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);	
	#endif
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 482:	e2 ec       	ldi	r30, 0xC2	; 194
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	86 60       	ori	r24, 0x06	; 6
 48a:	80 83       	st	Z, r24
	//скорость передачи 19200 бод
	UBRR0H=0;
 48c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	//дл€ значени€ UBRR0L = 51 = 0x33	UBRR0L=0x33;
	UBRR0L=0x33;
 490:	83 e3       	ldi	r24, 0x33	; 51
 492:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	// выводим в терминал слово TEST_OK
	UartSendStr(word);
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	cd df       	rcall	.-102    	; 0x436 <UartSendStr>
	// переходим в начало следующей строки
	UartTransmitByte('\r');
 49c:	8d e0       	ldi	r24, 0x0D	; 13
 49e:	8f df       	rcall	.-226    	; 0x3be <UartTransmitByte>
}
 4a0:	28 96       	adiw	r28, 0x08	; 8
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <UartReceiveData>:

//чтобы работали прерывани€, нужно в UCSR0B в UartInit() выставить бит RXCIE0
float UartReceiveData(void){
	return(angle_received);
 4b2:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <angle_received>
 4b6:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <angle_received+0x1>
 4ba:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <angle_received+0x2>
 4be:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <angle_received+0x3>
}
 4c2:	08 95       	ret

000004c4 <__vector_25>:

ISR(USART0_RX_vect){
 4c4:	1f 92       	push	r1
 4c6:	0f 92       	push	r0
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	0f 92       	push	r0
 4cc:	11 24       	eor	r1, r1
 4ce:	0b b6       	in	r0, 0x3b	; 59
 4d0:	0f 92       	push	r0
 4d2:	cf 92       	push	r12
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	cf 93       	push	r28
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	digit_received=UDR0;
 4f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4f8:	60 93 1b 02 	sts	0x021B, r22	; 0x80021b <digit_received>
	if(digit_received=='\r') complete_flag=0;
 4fc:	6d 30       	cpi	r22, 0x0D	; 13
 4fe:	19 f4       	brne	.+6      	; 0x506 <__vector_25+0x42>
 500:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <complete_flag>
 504:	11 c0       	rjmp	.+34     	; 0x528 <__vector_25+0x64>
	if(digit_received=='\n') complete_flag=1;
 506:	6a 30       	cpi	r22, 0x0A	; 10
 508:	21 f4       	brne	.+8      	; 0x512 <__vector_25+0x4e>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <complete_flag>
 510:	32 c0       	rjmp	.+100    	; 0x576 <__vector_25+0xb2>
	if(digit_received=='-') negative_flag=1;
 512:	6d 32       	cpi	r22, 0x2D	; 45
 514:	49 f4       	brne	.+18     	; 0x528 <__vector_25+0x64>
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <negative_flag>
	if((digit_received>='0') && (digit_received<='9')){
		digit_received-='0';
		data_received*=10;
		data_received+=digit_received;
	}
	if(complete_flag==1){
 51c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <complete_flag>
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	09 f0       	breq	.+2      	; 0x526 <__vector_25+0x62>
 524:	5d c0       	rjmp	.+186    	; 0x5e0 <__vector_25+0x11c>
 526:	2f c0       	rjmp	.+94     	; 0x586 <__vector_25+0xc2>
ISR(USART0_RX_vect){
	digit_received=UDR0;
	if(digit_received=='\r') complete_flag=0;
	if(digit_received=='\n') complete_flag=1;
	if(digit_received=='-') negative_flag=1;
	if((digit_received>='0') && (digit_received<='9')){
 528:	c0 ed       	ldi	r28, 0xD0	; 208
 52a:	c6 0f       	add	r28, r22
 52c:	ca 30       	cpi	r28, 0x0A	; 10
 52e:	18 f5       	brcc	.+70     	; 0x576 <__vector_25+0xb2>
		digit_received-='0';
 530:	c0 93 1b 02 	sts	0x021B, r28	; 0x80021b <digit_received>
		data_received*=10;
		data_received+=digit_received;
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	40 e2       	ldi	r20, 0x20	; 32
 53a:	51 e4       	ldi	r21, 0x41	; 65
 53c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <data_received>
 540:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <data_received+0x1>
 544:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <data_received+0x2>
 548:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <data_received+0x3>
 54c:	6d d2       	rcall	.+1242   	; 0xa28 <__mulsf3>
 54e:	6b 01       	movw	r12, r22
 550:	7c 01       	movw	r14, r24
 552:	6c 2f       	mov	r22, r28
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	b2 d1       	rcall	.+868    	; 0x8c0 <__floatsisf>
 55c:	9b 01       	movw	r18, r22
 55e:	ac 01       	movw	r20, r24
 560:	c7 01       	movw	r24, r14
 562:	b6 01       	movw	r22, r12
 564:	aa d0       	rcall	.+340    	; 0x6ba <__addsf3>
 566:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <data_received>
 56a:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <data_received+0x1>
 56e:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <data_received+0x2>
 572:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <data_received+0x3>
	}
	if(complete_flag==1){
 576:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <complete_flag>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	89 f5       	brne	.+98     	; 0x5e0 <__vector_25+0x11c>
		if(negative_flag==1) data_received=-data_received;
 57e:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <negative_flag>
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	89 f4       	brne	.+34     	; 0x5a8 <__vector_25+0xe4>
 586:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <data_received>
 58a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <data_received+0x1>
 58e:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <data_received+0x2>
 592:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <data_received+0x3>
 596:	b0 58       	subi	r27, 0x80	; 128
 598:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <data_received>
 59c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <data_received+0x1>
 5a0:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <data_received+0x2>
 5a4:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <data_received+0x3>
		angle_received=data_received;
 5a8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <data_received>
 5ac:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <data_received+0x1>
 5b0:	a0 91 22 02 	lds	r26, 0x0222	; 0x800222 <data_received+0x2>
 5b4:	b0 91 23 02 	lds	r27, 0x0223	; 0x800223 <data_received+0x3>
 5b8:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <angle_received>
 5bc:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <angle_received+0x1>
 5c0:	a0 93 1e 02 	sts	0x021E, r26	; 0x80021e <angle_received+0x2>
 5c4:	b0 93 1f 02 	sts	0x021F, r27	; 0x80021f <angle_received+0x3>
		complete_flag=0;
 5c8:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <complete_flag>
		negative_flag=0;
 5cc:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <negative_flag>
		data_received=0;
 5d0:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <data_received>
 5d4:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <data_received+0x1>
 5d8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <data_received+0x2>
 5dc:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <data_received+0x3>
	}
}
 5e0:	ff 91       	pop	r31
 5e2:	ef 91       	pop	r30
 5e4:	cf 91       	pop	r28
 5e6:	bf 91       	pop	r27
 5e8:	af 91       	pop	r26
 5ea:	9f 91       	pop	r25
 5ec:	8f 91       	pop	r24
 5ee:	7f 91       	pop	r23
 5f0:	6f 91       	pop	r22
 5f2:	5f 91       	pop	r21
 5f4:	4f 91       	pop	r20
 5f6:	3f 91       	pop	r19
 5f8:	2f 91       	pop	r18
 5fa:	ff 90       	pop	r15
 5fc:	ef 90       	pop	r14
 5fe:	df 90       	pop	r13
 600:	cf 90       	pop	r12
 602:	0f 90       	pop	r0
 604:	0b be       	out	0x3b, r0	; 59
 606:	0f 90       	pop	r0
 608:	0f be       	out	0x3f, r0	; 63
 60a:	0f 90       	pop	r0
 60c:	1f 90       	pop	r1
 60e:	18 95       	reti

00000610 <Digit>:
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
 610:	cf 93       	push	r28
 612:	f8 2f       	mov	r31, r24
 614:	c6 2f       	mov	r28, r22
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 616:	65 30       	cpi	r22, 0x05	; 5
 618:	09 f0       	breq	.+2      	; 0x61c <Digit+0xc>
 61a:	3d c0       	rjmp	.+122    	; 0x696 <Digit+0x86>
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
 61c:	28 2f       	mov	r18, r24
 61e:	39 2f       	mov	r19, r25
 620:	ad ec       	ldi	r26, 0xCD	; 205
 622:	bc ec       	ldi	r27, 0xCC	; 204
 624:	64 d2       	rcall	.+1224   	; 0xaee <__umulhisi3>
 626:	96 95       	lsr	r25
 628:	87 95       	ror	r24
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	96 95       	lsr	r25
 630:	87 95       	ror	r24
 632:	9c 01       	movw	r18, r24
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	88 0f       	add	r24, r24
 642:	99 1f       	adc	r25, r25
 644:	82 0f       	add	r24, r18
 646:	93 1f       	adc	r25, r19
 648:	f8 1b       	sub	r31, r24
 64a:	33 c0       	rjmp	.+102    	; 0x6b2 <Digit+0xa2>
 64c:	9a 01       	movw	r18, r20
 64e:	ad ec       	ldi	r26, 0xCD	; 205
 650:	bc ec       	ldi	r27, 0xCC	; 204
 652:	4d d2       	rcall	.+1178   	; 0xaee <__umulhisi3>
 654:	96 95       	lsr	r25
 656:	87 95       	ror	r24
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	96 95       	lsr	r25
 65e:	87 95       	ror	r24
 660:	9c 01       	movw	r18, r24
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	82 0f       	add	r24, r18
 674:	93 1f       	adc	r25, r19
 676:	f4 2f       	mov	r31, r20
 678:	f8 1b       	sub	r31, r24
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 67a:	ce 17       	cp	r28, r30
		d /= 10; //уменьшаем число в 10 раз
 67c:	d1 f0       	breq	.+52     	; 0x6b2 <Digit+0xa2>
 67e:	9a 01       	movw	r18, r20
 680:	36 d2       	rcall	.+1132   	; 0xaee <__umulhisi3>
 682:	ac 01       	movw	r20, r24
 684:	56 95       	lsr	r21
 686:	47 95       	ror	r20
 688:	56 95       	lsr	r21
 68a:	47 95       	ror	r20
 68c:	56 95       	lsr	r21
 68e:	47 95       	ror	r20
 690:	e1 50       	subi	r30, 0x01	; 1
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
 692:	e1 f6       	brne	.-72     	; 0x64c <Digit+0x3c>
 694:	0e c0       	rjmp	.+28     	; 0x6b2 <Digit+0xa2>
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
		d /= 10; //уменьшаем число в 10 раз
 696:	28 2f       	mov	r18, r24
 698:	39 2f       	mov	r19, r25
 69a:	ad ec       	ldi	r26, 0xCD	; 205
 69c:	bc ec       	ldi	r27, 0xCC	; 204
 69e:	27 d2       	rcall	.+1102   	; 0xaee <__umulhisi3>
 6a0:	ac 01       	movw	r20, r24
 6a2:	56 95       	lsr	r21
 6a4:	47 95       	ror	r20
 6a6:	56 95       	lsr	r21
 6a8:	47 95       	ror	r20
 6aa:	56 95       	lsr	r21
 6ac:	47 95       	ror	r20
 6ae:	e4 e0       	ldi	r30, 0x04	; 4
 6b0:	cd cf       	rjmp	.-102    	; 0x64c <Digit+0x3c>
	}
	return(a);
}
 6b2:	8f 2f       	mov	r24, r31
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret

000006b8 <__subsf3>:
 6b8:	50 58       	subi	r21, 0x80	; 128

000006ba <__addsf3>:
 6ba:	bb 27       	eor	r27, r27
 6bc:	aa 27       	eor	r26, r26
 6be:	0e d0       	rcall	.+28     	; 0x6dc <__addsf3x>
 6c0:	75 c1       	rjmp	.+746    	; 0x9ac <__fp_round>
 6c2:	66 d1       	rcall	.+716    	; 0x990 <__fp_pscA>
 6c4:	30 f0       	brcs	.+12     	; 0x6d2 <__addsf3+0x18>
 6c6:	6b d1       	rcall	.+726    	; 0x99e <__fp_pscB>
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <__addsf3+0x18>
 6ca:	31 f4       	brne	.+12     	; 0x6d8 <__addsf3+0x1e>
 6cc:	9f 3f       	cpi	r25, 0xFF	; 255
 6ce:	11 f4       	brne	.+4      	; 0x6d4 <__addsf3+0x1a>
 6d0:	1e f4       	brtc	.+6      	; 0x6d8 <__addsf3+0x1e>
 6d2:	5b c1       	rjmp	.+694    	; 0x98a <__fp_nan>
 6d4:	0e f4       	brtc	.+2      	; 0x6d8 <__addsf3+0x1e>
 6d6:	e0 95       	com	r30
 6d8:	e7 fb       	bst	r30, 7
 6da:	51 c1       	rjmp	.+674    	; 0x97e <__fp_inf>

000006dc <__addsf3x>:
 6dc:	e9 2f       	mov	r30, r25
 6de:	77 d1       	rcall	.+750    	; 0x9ce <__fp_split3>
 6e0:	80 f3       	brcs	.-32     	; 0x6c2 <__addsf3+0x8>
 6e2:	ba 17       	cp	r27, r26
 6e4:	62 07       	cpc	r22, r18
 6e6:	73 07       	cpc	r23, r19
 6e8:	84 07       	cpc	r24, r20
 6ea:	95 07       	cpc	r25, r21
 6ec:	18 f0       	brcs	.+6      	; 0x6f4 <__addsf3x+0x18>
 6ee:	71 f4       	brne	.+28     	; 0x70c <__addsf3x+0x30>
 6f0:	9e f5       	brtc	.+102    	; 0x758 <__addsf3x+0x7c>
 6f2:	8f c1       	rjmp	.+798    	; 0xa12 <__fp_zero>
 6f4:	0e f4       	brtc	.+2      	; 0x6f8 <__addsf3x+0x1c>
 6f6:	e0 95       	com	r30
 6f8:	0b 2e       	mov	r0, r27
 6fa:	ba 2f       	mov	r27, r26
 6fc:	a0 2d       	mov	r26, r0
 6fe:	0b 01       	movw	r0, r22
 700:	b9 01       	movw	r22, r18
 702:	90 01       	movw	r18, r0
 704:	0c 01       	movw	r0, r24
 706:	ca 01       	movw	r24, r20
 708:	a0 01       	movw	r20, r0
 70a:	11 24       	eor	r1, r1
 70c:	ff 27       	eor	r31, r31
 70e:	59 1b       	sub	r21, r25
 710:	99 f0       	breq	.+38     	; 0x738 <__addsf3x+0x5c>
 712:	59 3f       	cpi	r21, 0xF9	; 249
 714:	50 f4       	brcc	.+20     	; 0x72a <__addsf3x+0x4e>
 716:	50 3e       	cpi	r21, 0xE0	; 224
 718:	68 f1       	brcs	.+90     	; 0x774 <__addsf3x+0x98>
 71a:	1a 16       	cp	r1, r26
 71c:	f0 40       	sbci	r31, 0x00	; 0
 71e:	a2 2f       	mov	r26, r18
 720:	23 2f       	mov	r18, r19
 722:	34 2f       	mov	r19, r20
 724:	44 27       	eor	r20, r20
 726:	58 5f       	subi	r21, 0xF8	; 248
 728:	f3 cf       	rjmp	.-26     	; 0x710 <__addsf3x+0x34>
 72a:	46 95       	lsr	r20
 72c:	37 95       	ror	r19
 72e:	27 95       	ror	r18
 730:	a7 95       	ror	r26
 732:	f0 40       	sbci	r31, 0x00	; 0
 734:	53 95       	inc	r21
 736:	c9 f7       	brne	.-14     	; 0x72a <__addsf3x+0x4e>
 738:	7e f4       	brtc	.+30     	; 0x758 <__addsf3x+0x7c>
 73a:	1f 16       	cp	r1, r31
 73c:	ba 0b       	sbc	r27, r26
 73e:	62 0b       	sbc	r22, r18
 740:	73 0b       	sbc	r23, r19
 742:	84 0b       	sbc	r24, r20
 744:	ba f0       	brmi	.+46     	; 0x774 <__addsf3x+0x98>
 746:	91 50       	subi	r25, 0x01	; 1
 748:	a1 f0       	breq	.+40     	; 0x772 <__addsf3x+0x96>
 74a:	ff 0f       	add	r31, r31
 74c:	bb 1f       	adc	r27, r27
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	c2 f7       	brpl	.-16     	; 0x746 <__addsf3x+0x6a>
 756:	0e c0       	rjmp	.+28     	; 0x774 <__addsf3x+0x98>
 758:	ba 0f       	add	r27, r26
 75a:	62 1f       	adc	r22, r18
 75c:	73 1f       	adc	r23, r19
 75e:	84 1f       	adc	r24, r20
 760:	48 f4       	brcc	.+18     	; 0x774 <__addsf3x+0x98>
 762:	87 95       	ror	r24
 764:	77 95       	ror	r23
 766:	67 95       	ror	r22
 768:	b7 95       	ror	r27
 76a:	f7 95       	ror	r31
 76c:	9e 3f       	cpi	r25, 0xFE	; 254
 76e:	08 f0       	brcs	.+2      	; 0x772 <__addsf3x+0x96>
 770:	b3 cf       	rjmp	.-154    	; 0x6d8 <__addsf3+0x1e>
 772:	93 95       	inc	r25
 774:	88 0f       	add	r24, r24
 776:	08 f0       	brcs	.+2      	; 0x77a <__addsf3x+0x9e>
 778:	99 27       	eor	r25, r25
 77a:	ee 0f       	add	r30, r30
 77c:	97 95       	ror	r25
 77e:	87 95       	ror	r24
 780:	08 95       	ret

00000782 <__cmpsf2>:
 782:	d9 d0       	rcall	.+434    	; 0x936 <__fp_cmp>
 784:	08 f4       	brcc	.+2      	; 0x788 <__cmpsf2+0x6>
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	08 95       	ret

0000078a <__divsf3>:
 78a:	0c d0       	rcall	.+24     	; 0x7a4 <__divsf3x>
 78c:	0f c1       	rjmp	.+542    	; 0x9ac <__fp_round>
 78e:	07 d1       	rcall	.+526    	; 0x99e <__fp_pscB>
 790:	40 f0       	brcs	.+16     	; 0x7a2 <__divsf3+0x18>
 792:	fe d0       	rcall	.+508    	; 0x990 <__fp_pscA>
 794:	30 f0       	brcs	.+12     	; 0x7a2 <__divsf3+0x18>
 796:	21 f4       	brne	.+8      	; 0x7a0 <__divsf3+0x16>
 798:	5f 3f       	cpi	r21, 0xFF	; 255
 79a:	19 f0       	breq	.+6      	; 0x7a2 <__divsf3+0x18>
 79c:	f0 c0       	rjmp	.+480    	; 0x97e <__fp_inf>
 79e:	51 11       	cpse	r21, r1
 7a0:	39 c1       	rjmp	.+626    	; 0xa14 <__fp_szero>
 7a2:	f3 c0       	rjmp	.+486    	; 0x98a <__fp_nan>

000007a4 <__divsf3x>:
 7a4:	14 d1       	rcall	.+552    	; 0x9ce <__fp_split3>
 7a6:	98 f3       	brcs	.-26     	; 0x78e <__divsf3+0x4>

000007a8 <__divsf3_pse>:
 7a8:	99 23       	and	r25, r25
 7aa:	c9 f3       	breq	.-14     	; 0x79e <__divsf3+0x14>
 7ac:	55 23       	and	r21, r21
 7ae:	b1 f3       	breq	.-20     	; 0x79c <__divsf3+0x12>
 7b0:	95 1b       	sub	r25, r21
 7b2:	55 0b       	sbc	r21, r21
 7b4:	bb 27       	eor	r27, r27
 7b6:	aa 27       	eor	r26, r26
 7b8:	62 17       	cp	r22, r18
 7ba:	73 07       	cpc	r23, r19
 7bc:	84 07       	cpc	r24, r20
 7be:	38 f0       	brcs	.+14     	; 0x7ce <__divsf3_pse+0x26>
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	5f 4f       	sbci	r21, 0xFF	; 255
 7c4:	22 0f       	add	r18, r18
 7c6:	33 1f       	adc	r19, r19
 7c8:	44 1f       	adc	r20, r20
 7ca:	aa 1f       	adc	r26, r26
 7cc:	a9 f3       	breq	.-22     	; 0x7b8 <__divsf3_pse+0x10>
 7ce:	33 d0       	rcall	.+102    	; 0x836 <__divsf3_pse+0x8e>
 7d0:	0e 2e       	mov	r0, r30
 7d2:	3a f0       	brmi	.+14     	; 0x7e2 <__divsf3_pse+0x3a>
 7d4:	e0 e8       	ldi	r30, 0x80	; 128
 7d6:	30 d0       	rcall	.+96     	; 0x838 <__divsf3_pse+0x90>
 7d8:	91 50       	subi	r25, 0x01	; 1
 7da:	50 40       	sbci	r21, 0x00	; 0
 7dc:	e6 95       	lsr	r30
 7de:	00 1c       	adc	r0, r0
 7e0:	ca f7       	brpl	.-14     	; 0x7d4 <__divsf3_pse+0x2c>
 7e2:	29 d0       	rcall	.+82     	; 0x836 <__divsf3_pse+0x8e>
 7e4:	fe 2f       	mov	r31, r30
 7e6:	27 d0       	rcall	.+78     	; 0x836 <__divsf3_pse+0x8e>
 7e8:	66 0f       	add	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	bb 1f       	adc	r27, r27
 7f0:	26 17       	cp	r18, r22
 7f2:	37 07       	cpc	r19, r23
 7f4:	48 07       	cpc	r20, r24
 7f6:	ab 07       	cpc	r26, r27
 7f8:	b0 e8       	ldi	r27, 0x80	; 128
 7fa:	09 f0       	breq	.+2      	; 0x7fe <__divsf3_pse+0x56>
 7fc:	bb 0b       	sbc	r27, r27
 7fe:	80 2d       	mov	r24, r0
 800:	bf 01       	movw	r22, r30
 802:	ff 27       	eor	r31, r31
 804:	93 58       	subi	r25, 0x83	; 131
 806:	5f 4f       	sbci	r21, 0xFF	; 255
 808:	2a f0       	brmi	.+10     	; 0x814 <__divsf3_pse+0x6c>
 80a:	9e 3f       	cpi	r25, 0xFE	; 254
 80c:	51 05       	cpc	r21, r1
 80e:	68 f0       	brcs	.+26     	; 0x82a <__divsf3_pse+0x82>
 810:	b6 c0       	rjmp	.+364    	; 0x97e <__fp_inf>
 812:	00 c1       	rjmp	.+512    	; 0xa14 <__fp_szero>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	ec f3       	brlt	.-6      	; 0x812 <__divsf3_pse+0x6a>
 818:	98 3e       	cpi	r25, 0xE8	; 232
 81a:	dc f3       	brlt	.-10     	; 0x812 <__divsf3_pse+0x6a>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b7 95       	ror	r27
 824:	f7 95       	ror	r31
 826:	9f 5f       	subi	r25, 0xFF	; 255
 828:	c9 f7       	brne	.-14     	; 0x81c <__divsf3_pse+0x74>
 82a:	88 0f       	add	r24, r24
 82c:	91 1d       	adc	r25, r1
 82e:	96 95       	lsr	r25
 830:	87 95       	ror	r24
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret
 836:	e1 e0       	ldi	r30, 0x01	; 1
 838:	66 0f       	add	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	bb 1f       	adc	r27, r27
 840:	62 17       	cp	r22, r18
 842:	73 07       	cpc	r23, r19
 844:	84 07       	cpc	r24, r20
 846:	ba 07       	cpc	r27, r26
 848:	20 f0       	brcs	.+8      	; 0x852 <__divsf3_pse+0xaa>
 84a:	62 1b       	sub	r22, r18
 84c:	73 0b       	sbc	r23, r19
 84e:	84 0b       	sbc	r24, r20
 850:	ba 0b       	sbc	r27, r26
 852:	ee 1f       	adc	r30, r30
 854:	88 f7       	brcc	.-30     	; 0x838 <__divsf3_pse+0x90>
 856:	e0 95       	com	r30
 858:	08 95       	ret

0000085a <__fixsfsi>:
 85a:	04 d0       	rcall	.+8      	; 0x864 <__fixunssfsi>
 85c:	68 94       	set
 85e:	b1 11       	cpse	r27, r1
 860:	d9 c0       	rjmp	.+434    	; 0xa14 <__fp_szero>
 862:	08 95       	ret

00000864 <__fixunssfsi>:
 864:	bc d0       	rcall	.+376    	; 0x9de <__fp_splitA>
 866:	88 f0       	brcs	.+34     	; 0x88a <__fixunssfsi+0x26>
 868:	9f 57       	subi	r25, 0x7F	; 127
 86a:	90 f0       	brcs	.+36     	; 0x890 <__fixunssfsi+0x2c>
 86c:	b9 2f       	mov	r27, r25
 86e:	99 27       	eor	r25, r25
 870:	b7 51       	subi	r27, 0x17	; 23
 872:	a0 f0       	brcs	.+40     	; 0x89c <__fixunssfsi+0x38>
 874:	d1 f0       	breq	.+52     	; 0x8aa <__fixunssfsi+0x46>
 876:	66 0f       	add	r22, r22
 878:	77 1f       	adc	r23, r23
 87a:	88 1f       	adc	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	1a f0       	brmi	.+6      	; 0x886 <__fixunssfsi+0x22>
 880:	ba 95       	dec	r27
 882:	c9 f7       	brne	.-14     	; 0x876 <__fixunssfsi+0x12>
 884:	12 c0       	rjmp	.+36     	; 0x8aa <__fixunssfsi+0x46>
 886:	b1 30       	cpi	r27, 0x01	; 1
 888:	81 f0       	breq	.+32     	; 0x8aa <__fixunssfsi+0x46>
 88a:	c3 d0       	rcall	.+390    	; 0xa12 <__fp_zero>
 88c:	b1 e0       	ldi	r27, 0x01	; 1
 88e:	08 95       	ret
 890:	c0 c0       	rjmp	.+384    	; 0xa12 <__fp_zero>
 892:	67 2f       	mov	r22, r23
 894:	78 2f       	mov	r23, r24
 896:	88 27       	eor	r24, r24
 898:	b8 5f       	subi	r27, 0xF8	; 248
 89a:	39 f0       	breq	.+14     	; 0x8aa <__fixunssfsi+0x46>
 89c:	b9 3f       	cpi	r27, 0xF9	; 249
 89e:	cc f3       	brlt	.-14     	; 0x892 <__fixunssfsi+0x2e>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b3 95       	inc	r27
 8a8:	d9 f7       	brne	.-10     	; 0x8a0 <__fixunssfsi+0x3c>
 8aa:	3e f4       	brtc	.+14     	; 0x8ba <__fixunssfsi+0x56>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <__floatunsisf>:
 8bc:	e8 94       	clt
 8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__floatsisf+0x12>

000008c0 <__floatsisf>:
 8c0:	97 fb       	bst	r25, 7
 8c2:	3e f4       	brtc	.+14     	; 0x8d2 <__floatsisf+0x12>
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	99 23       	and	r25, r25
 8d4:	a9 f0       	breq	.+42     	; 0x900 <__floatsisf+0x40>
 8d6:	f9 2f       	mov	r31, r25
 8d8:	96 e9       	ldi	r25, 0x96	; 150
 8da:	bb 27       	eor	r27, r27
 8dc:	93 95       	inc	r25
 8de:	f6 95       	lsr	r31
 8e0:	87 95       	ror	r24
 8e2:	77 95       	ror	r23
 8e4:	67 95       	ror	r22
 8e6:	b7 95       	ror	r27
 8e8:	f1 11       	cpse	r31, r1
 8ea:	f8 cf       	rjmp	.-16     	; 0x8dc <__floatsisf+0x1c>
 8ec:	fa f4       	brpl	.+62     	; 0x92c <__floatsisf+0x6c>
 8ee:	bb 0f       	add	r27, r27
 8f0:	11 f4       	brne	.+4      	; 0x8f6 <__floatsisf+0x36>
 8f2:	60 ff       	sbrs	r22, 0
 8f4:	1b c0       	rjmp	.+54     	; 0x92c <__floatsisf+0x6c>
 8f6:	6f 5f       	subi	r22, 0xFF	; 255
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	8f 4f       	sbci	r24, 0xFF	; 255
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__floatsisf+0x6c>
 900:	88 23       	and	r24, r24
 902:	11 f0       	breq	.+4      	; 0x908 <__floatsisf+0x48>
 904:	96 e9       	ldi	r25, 0x96	; 150
 906:	11 c0       	rjmp	.+34     	; 0x92a <__floatsisf+0x6a>
 908:	77 23       	and	r23, r23
 90a:	21 f0       	breq	.+8      	; 0x914 <__floatsisf+0x54>
 90c:	9e e8       	ldi	r25, 0x8E	; 142
 90e:	87 2f       	mov	r24, r23
 910:	76 2f       	mov	r23, r22
 912:	05 c0       	rjmp	.+10     	; 0x91e <__floatsisf+0x5e>
 914:	66 23       	and	r22, r22
 916:	71 f0       	breq	.+28     	; 0x934 <__floatsisf+0x74>
 918:	96 e8       	ldi	r25, 0x86	; 134
 91a:	86 2f       	mov	r24, r22
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	60 e0       	ldi	r22, 0x00	; 0
 920:	2a f0       	brmi	.+10     	; 0x92c <__floatsisf+0x6c>
 922:	9a 95       	dec	r25
 924:	66 0f       	add	r22, r22
 926:	77 1f       	adc	r23, r23
 928:	88 1f       	adc	r24, r24
 92a:	da f7       	brpl	.-10     	; 0x922 <__floatsisf+0x62>
 92c:	88 0f       	add	r24, r24
 92e:	96 95       	lsr	r25
 930:	87 95       	ror	r24
 932:	97 f9       	bld	r25, 7
 934:	08 95       	ret

00000936 <__fp_cmp>:
 936:	99 0f       	add	r25, r25
 938:	00 08       	sbc	r0, r0
 93a:	55 0f       	add	r21, r21
 93c:	aa 0b       	sbc	r26, r26
 93e:	e0 e8       	ldi	r30, 0x80	; 128
 940:	fe ef       	ldi	r31, 0xFE	; 254
 942:	16 16       	cp	r1, r22
 944:	17 06       	cpc	r1, r23
 946:	e8 07       	cpc	r30, r24
 948:	f9 07       	cpc	r31, r25
 94a:	c0 f0       	brcs	.+48     	; 0x97c <__fp_cmp+0x46>
 94c:	12 16       	cp	r1, r18
 94e:	13 06       	cpc	r1, r19
 950:	e4 07       	cpc	r30, r20
 952:	f5 07       	cpc	r31, r21
 954:	98 f0       	brcs	.+38     	; 0x97c <__fp_cmp+0x46>
 956:	62 1b       	sub	r22, r18
 958:	73 0b       	sbc	r23, r19
 95a:	84 0b       	sbc	r24, r20
 95c:	95 0b       	sbc	r25, r21
 95e:	39 f4       	brne	.+14     	; 0x96e <__fp_cmp+0x38>
 960:	0a 26       	eor	r0, r26
 962:	61 f0       	breq	.+24     	; 0x97c <__fp_cmp+0x46>
 964:	23 2b       	or	r18, r19
 966:	24 2b       	or	r18, r20
 968:	25 2b       	or	r18, r21
 96a:	21 f4       	brne	.+8      	; 0x974 <__fp_cmp+0x3e>
 96c:	08 95       	ret
 96e:	0a 26       	eor	r0, r26
 970:	09 f4       	brne	.+2      	; 0x974 <__fp_cmp+0x3e>
 972:	a1 40       	sbci	r26, 0x01	; 1
 974:	a6 95       	lsr	r26
 976:	8f ef       	ldi	r24, 0xFF	; 255
 978:	81 1d       	adc	r24, r1
 97a:	81 1d       	adc	r24, r1
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <__fp_split3>:
 9ce:	57 fd       	sbrc	r21, 7
 9d0:	90 58       	subi	r25, 0x80	; 128
 9d2:	44 0f       	add	r20, r20
 9d4:	55 1f       	adc	r21, r21
 9d6:	59 f0       	breq	.+22     	; 0x9ee <__fp_splitA+0x10>
 9d8:	5f 3f       	cpi	r21, 0xFF	; 255
 9da:	71 f0       	breq	.+28     	; 0x9f8 <__fp_splitA+0x1a>
 9dc:	47 95       	ror	r20

000009de <__fp_splitA>:
 9de:	88 0f       	add	r24, r24
 9e0:	97 fb       	bst	r25, 7
 9e2:	99 1f       	adc	r25, r25
 9e4:	61 f0       	breq	.+24     	; 0x9fe <__fp_splitA+0x20>
 9e6:	9f 3f       	cpi	r25, 0xFF	; 255
 9e8:	79 f0       	breq	.+30     	; 0xa08 <__fp_splitA+0x2a>
 9ea:	87 95       	ror	r24
 9ec:	08 95       	ret
 9ee:	12 16       	cp	r1, r18
 9f0:	13 06       	cpc	r1, r19
 9f2:	14 06       	cpc	r1, r20
 9f4:	55 1f       	adc	r21, r21
 9f6:	f2 cf       	rjmp	.-28     	; 0x9dc <__fp_split3+0xe>
 9f8:	46 95       	lsr	r20
 9fa:	f1 df       	rcall	.-30     	; 0x9de <__fp_splitA>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <__fp_splitA+0x30>
 9fe:	16 16       	cp	r1, r22
 a00:	17 06       	cpc	r1, r23
 a02:	18 06       	cpc	r1, r24
 a04:	99 1f       	adc	r25, r25
 a06:	f1 cf       	rjmp	.-30     	; 0x9ea <__fp_splitA+0xc>
 a08:	86 95       	lsr	r24
 a0a:	71 05       	cpc	r23, r1
 a0c:	61 05       	cpc	r22, r1
 a0e:	08 94       	sec
 a10:	08 95       	ret

00000a12 <__fp_zero>:
 a12:	e8 94       	clt

00000a14 <__fp_szero>:
 a14:	bb 27       	eor	r27, r27
 a16:	66 27       	eor	r22, r22
 a18:	77 27       	eor	r23, r23
 a1a:	cb 01       	movw	r24, r22
 a1c:	97 f9       	bld	r25, 7
 a1e:	08 95       	ret

00000a20 <__gesf2>:
 a20:	8a df       	rcall	.-236    	; 0x936 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__gesf2+0x6>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <__mulsf3>:
 a28:	0b d0       	rcall	.+22     	; 0xa40 <__mulsf3x>
 a2a:	c0 cf       	rjmp	.-128    	; 0x9ac <__fp_round>
 a2c:	b1 df       	rcall	.-158    	; 0x990 <__fp_pscA>
 a2e:	28 f0       	brcs	.+10     	; 0xa3a <__mulsf3+0x12>
 a30:	b6 df       	rcall	.-148    	; 0x99e <__fp_pscB>
 a32:	18 f0       	brcs	.+6      	; 0xa3a <__mulsf3+0x12>
 a34:	95 23       	and	r25, r21
 a36:	09 f0       	breq	.+2      	; 0xa3a <__mulsf3+0x12>
 a38:	a2 cf       	rjmp	.-188    	; 0x97e <__fp_inf>
 a3a:	a7 cf       	rjmp	.-178    	; 0x98a <__fp_nan>
 a3c:	11 24       	eor	r1, r1
 a3e:	ea cf       	rjmp	.-44     	; 0xa14 <__fp_szero>

00000a40 <__mulsf3x>:
 a40:	c6 df       	rcall	.-116    	; 0x9ce <__fp_split3>
 a42:	a0 f3       	brcs	.-24     	; 0xa2c <__mulsf3+0x4>

00000a44 <__mulsf3_pse>:
 a44:	95 9f       	mul	r25, r21
 a46:	d1 f3       	breq	.-12     	; 0xa3c <__mulsf3+0x14>
 a48:	95 0f       	add	r25, r21
 a4a:	50 e0       	ldi	r21, 0x00	; 0
 a4c:	55 1f       	adc	r21, r21
 a4e:	62 9f       	mul	r22, r18
 a50:	f0 01       	movw	r30, r0
 a52:	72 9f       	mul	r23, r18
 a54:	bb 27       	eor	r27, r27
 a56:	f0 0d       	add	r31, r0
 a58:	b1 1d       	adc	r27, r1
 a5a:	63 9f       	mul	r22, r19
 a5c:	aa 27       	eor	r26, r26
 a5e:	f0 0d       	add	r31, r0
 a60:	b1 1d       	adc	r27, r1
 a62:	aa 1f       	adc	r26, r26
 a64:	64 9f       	mul	r22, r20
 a66:	66 27       	eor	r22, r22
 a68:	b0 0d       	add	r27, r0
 a6a:	a1 1d       	adc	r26, r1
 a6c:	66 1f       	adc	r22, r22
 a6e:	82 9f       	mul	r24, r18
 a70:	22 27       	eor	r18, r18
 a72:	b0 0d       	add	r27, r0
 a74:	a1 1d       	adc	r26, r1
 a76:	62 1f       	adc	r22, r18
 a78:	73 9f       	mul	r23, r19
 a7a:	b0 0d       	add	r27, r0
 a7c:	a1 1d       	adc	r26, r1
 a7e:	62 1f       	adc	r22, r18
 a80:	83 9f       	mul	r24, r19
 a82:	a0 0d       	add	r26, r0
 a84:	61 1d       	adc	r22, r1
 a86:	22 1f       	adc	r18, r18
 a88:	74 9f       	mul	r23, r20
 a8a:	33 27       	eor	r19, r19
 a8c:	a0 0d       	add	r26, r0
 a8e:	61 1d       	adc	r22, r1
 a90:	23 1f       	adc	r18, r19
 a92:	84 9f       	mul	r24, r20
 a94:	60 0d       	add	r22, r0
 a96:	21 1d       	adc	r18, r1
 a98:	82 2f       	mov	r24, r18
 a9a:	76 2f       	mov	r23, r22
 a9c:	6a 2f       	mov	r22, r26
 a9e:	11 24       	eor	r1, r1
 aa0:	9f 57       	subi	r25, 0x7F	; 127
 aa2:	50 40       	sbci	r21, 0x00	; 0
 aa4:	8a f0       	brmi	.+34     	; 0xac8 <__mulsf3_pse+0x84>
 aa6:	e1 f0       	breq	.+56     	; 0xae0 <__mulsf3_pse+0x9c>
 aa8:	88 23       	and	r24, r24
 aaa:	4a f0       	brmi	.+18     	; 0xabe <__mulsf3_pse+0x7a>
 aac:	ee 0f       	add	r30, r30
 aae:	ff 1f       	adc	r31, r31
 ab0:	bb 1f       	adc	r27, r27
 ab2:	66 1f       	adc	r22, r22
 ab4:	77 1f       	adc	r23, r23
 ab6:	88 1f       	adc	r24, r24
 ab8:	91 50       	subi	r25, 0x01	; 1
 aba:	50 40       	sbci	r21, 0x00	; 0
 abc:	a9 f7       	brne	.-22     	; 0xaa8 <__mulsf3_pse+0x64>
 abe:	9e 3f       	cpi	r25, 0xFE	; 254
 ac0:	51 05       	cpc	r21, r1
 ac2:	70 f0       	brcs	.+28     	; 0xae0 <__mulsf3_pse+0x9c>
 ac4:	5c cf       	rjmp	.-328    	; 0x97e <__fp_inf>
 ac6:	a6 cf       	rjmp	.-180    	; 0xa14 <__fp_szero>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	ec f3       	brlt	.-6      	; 0xac6 <__mulsf3_pse+0x82>
 acc:	98 3e       	cpi	r25, 0xE8	; 232
 ace:	dc f3       	brlt	.-10     	; 0xac6 <__mulsf3_pse+0x82>
 ad0:	86 95       	lsr	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b7 95       	ror	r27
 ad8:	f7 95       	ror	r31
 ada:	e7 95       	ror	r30
 adc:	9f 5f       	subi	r25, 0xFF	; 255
 ade:	c1 f7       	brne	.-16     	; 0xad0 <__mulsf3_pse+0x8c>
 ae0:	fe 2b       	or	r31, r30
 ae2:	88 0f       	add	r24, r24
 ae4:	91 1d       	adc	r25, r1
 ae6:	96 95       	lsr	r25
 ae8:	87 95       	ror	r24
 aea:	97 f9       	bld	r25, 7
 aec:	08 95       	ret

00000aee <__umulhisi3>:
 aee:	a2 9f       	mul	r26, r18
 af0:	b0 01       	movw	r22, r0
 af2:	b3 9f       	mul	r27, r19
 af4:	c0 01       	movw	r24, r0
 af6:	a3 9f       	mul	r26, r19
 af8:	70 0d       	add	r23, r0
 afa:	81 1d       	adc	r24, r1
 afc:	11 24       	eor	r1, r1
 afe:	91 1d       	adc	r25, r1
 b00:	b2 9f       	mul	r27, r18
 b02:	70 0d       	add	r23, r0
 b04:	81 1d       	adc	r24, r1
 b06:	11 24       	eor	r1, r1
 b08:	91 1d       	adc	r25, r1
 b0a:	08 95       	ret

00000b0c <_exit>:
 b0c:	f8 94       	cli

00000b0e <__stop_program>:
 b0e:	ff cf       	rjmp	.-2      	; 0xb0e <__stop_program>
