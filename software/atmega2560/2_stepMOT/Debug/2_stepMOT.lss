
2_stepMOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000a80  00000b14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800208  00800208  00000b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014e4  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb8  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00003b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000078c  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000865  00000000  00000000  00004590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	bb c0       	rjmp	.+374    	; 0x1c8 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c1       	rjmp	.+974    	; 0x434 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 31       	cpi	r26, 0x1B	; 27
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	11 d0       	rcall	.+34     	; 0x142 <main>
 120:	ad c4       	rjmp	.+2394   	; 0xa7c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitAll>:
		//_delay_ms(500);
	}
}

void InitAll(void){
	UartInit();
 124:	4e d1       	rcall	.+668    	; 0x3c2 <UartInit>
	DDRB|=(1<<7);
 126:	27 9a       	sbi	0x04, 7	; 4
	DDRF|=(1<<5);
	//AdcInit();
	StMotInit();
 128:	85 9a       	sbi	0x10, 5	; 16
 12a:	26 d0       	rcall	.+76     	; 0x178 <StMotInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <InitAll+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <InitAll+0x18>
 13c:	00 00       	nop
	//StMotGo(0);
	_delay_ms(100);
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <main>:

void InitAll(void);

int main(void)
{
	InitAll();
 142:	f0 df       	rcall	.-32     	; 0x124 <InitAll>
	float angle = 0;
	while (1)
	{
		//получаем данные с терминала 0Е100 Ц скважность Ў»ћ
		angle = UartReceiveData();
 144:	6e d1       	rcall	.+732    	; 0x422 <UartReceiveData>
		// выставл€ем скорость вращени€ двигател€
		SetAngle(angle);
 146:	95 d0       	rcall	.+298    	; 0x272 <SetAngle>
		// табул€ци€ положени€ курсора в терминале
		UartTransmitByte('\t');
 148:	89 e0       	ldi	r24, 0x09	; 9
 14a:	f1 d0       	rcall	.+482    	; 0x32e <UartTransmitByte>
		// выводим только что переданное значение
		UartSendDec(GetCount());
 14c:	21 d0       	rcall	.+66     	; 0x190 <GetCount>
 14e:	f7 d0       	rcall	.+494    	; 0x33e <UartSendDec>
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	ed d0       	rcall	.+474    	; 0x32e <UartTransmitByte>
		
		//UartTransmitByte('\t');
		//error = data - GetSpeed();
		//UartSendDec(error);
		
		UartTransmitByte('\r');
 154:	f7 cf       	rjmp	.-18     	; 0x144 <main+0x2>

00000156 <StMotTim1Init>:
 156:	e1 e8       	ldi	r30, 0x81	; 129
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
//
//}
void StMotGo(){
	//angle_setpoint=angle-current_angle;
	StMotDir(angle_setpoint);
	pulse_setpoint=abs(angle_setpoint) * ANGLE_TO_STEPS;
 15c:	83 60       	ori	r24, 0x03	; 3
 15e:	80 83       	st	Z, r24
 160:	8b e9       	ldi	r24, 0x9B	; 155
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 168:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 16c:	ef e6       	ldi	r30, 0x6F	; 111
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	81 60       	ori	r24, 0x01	; 1
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <StMotInit>:
 178:	ee df       	rcall	.-36     	; 0x156 <StMotTim1Init>
 17a:	81 b1       	in	r24, 0x01	; 1
 17c:	85 65       	ori	r24, 0x55	; 85
 17e:	81 b9       	out	0x01, r24	; 1
 180:	81 b1       	in	r24, 0x01	; 1
 182:	8a 6a       	ori	r24, 0xAA	; 170
 184:	81 b9       	out	0x01, r24	; 1
 186:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <pulse_setpoint+0x1>
 18a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <pulse_setpoint>
 18e:	08 95       	ret

00000190 <GetCount>:
 190:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
 194:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
 198:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
 19c:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
 1a0:	19 d3       	rcall	.+1586   	; 0x7d4 <__fixunssfsi>
 1a2:	cb 01       	movw	r24, r22
 1a4:	08 95       	ret

000001a6 <StMotPul>:
 1a6:	92 b1       	in	r25, 0x02	; 2
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	89 27       	eor	r24, r25
 1ac:	82 b9       	out	0x02, r24	; 2
 1ae:	92 b1       	in	r25, 0x02	; 2
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	89 27       	eor	r24, r25
 1b4:	82 b9       	out	0x02, r24	; 2
 1b6:	92 b1       	in	r25, 0x02	; 2
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	89 27       	eor	r24, r25
 1bc:	82 b9       	out	0x02, r24	; 2
 1be:	92 b1       	in	r25, 0x02	; 2
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	89 27       	eor	r24, r25
 1c4:	82 b9       	out	0x02, r24	; 2
 1c6:	08 95       	ret

000001c8 <__vector_20>:
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	0b b6       	in	r0, 0x3b	; 59
 1d4:	0f 92       	push	r0
 1d6:	2f 93       	push	r18
 1d8:	3f 93       	push	r19
 1da:	4f 93       	push	r20
 1dc:	5f 93       	push	r21
 1de:	6f 93       	push	r22
 1e0:	7f 93       	push	r23
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	ef 93       	push	r30
 1ec:	ff 93       	push	r31
 1ee:	8b e9       	ldi	r24, 0x9B	; 155
 1f0:	9f ef       	ldi	r25, 0xFF	; 255
 1f2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 1f6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
 1fa:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <pulse_count>
 1fe:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <pulse_count+0x1>
 202:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <pulse_setpoint>
 206:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <pulse_setpoint+0x1>
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	50 f4       	brcc	.+20     	; 0x224 <__vector_20+0x5c>
 210:	ca df       	rcall	.-108    	; 0x1a6 <StMotPul>
 212:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pulse_count>
 216:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <pulse_count+0x1>
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <pulse_count+0x1>
 220:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pulse_count>
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	7f 91       	pop	r23
 232:	6f 91       	pop	r22
 234:	5f 91       	pop	r21
 236:	4f 91       	pop	r20
 238:	3f 91       	pop	r19
 23a:	2f 91       	pop	r18
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <StMotDir>:
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	a9 01       	movw	r20, r18
 250:	9f d3       	rcall	.+1854   	; 0x990 <__gesf2>
 252:	88 23       	and	r24, r24
 254:	2c f0       	brlt	.+10     	; 0x260 <StMotDir+0x16>
 256:	11 9a       	sbi	0x02, 1	; 2
 258:	13 9a       	sbi	0x02, 3	; 2
 25a:	15 9a       	sbi	0x02, 5	; 2
 25c:	17 9a       	sbi	0x02, 7	; 2
 25e:	08 95       	ret
 260:	82 b1       	in	r24, 0x02	; 2
 262:	12 b8       	out	0x02, r1	; 2
 264:	82 b1       	in	r24, 0x02	; 2
 266:	12 b8       	out	0x02, r1	; 2
 268:	82 b1       	in	r24, 0x02	; 2
 26a:	12 b8       	out	0x02, r1	; 2
 26c:	82 b1       	in	r24, 0x02	; 2
 26e:	12 b8       	out	0x02, r1	; 2
 270:	08 95       	ret

00000272 <SetAngle>:
		ST_MOT_DIR_PORT&=(0<<PORT_DIR3);
		ST_MOT_DIR_PORT&=(0<<PORT_DIR4);
	}
}

void SetAngle(float angle){
 272:	cf 92       	push	r12
 274:	df 92       	push	r13
 276:	ef 92       	push	r14
 278:	ff 92       	push	r15
 27a:	6b 01       	movw	r12, r22
 27c:	7c 01       	movw	r14, r24

	//limiting the setpoint +/- 90 degrees

	if(angle<MIN_ANGLE) angle=MIN_ANGLE;
 27e:	20 e0       	ldi	r18, 0x00	; 0
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	44 eb       	ldi	r20, 0xB4	; 180
 284:	52 ec       	ldi	r21, 0xC2	; 194
 286:	35 d2       	rcall	.+1130   	; 0x6f2 <__cmpsf2>
 288:	88 23       	and	r24, r24
 28a:	94 f0       	brlt	.+36     	; 0x2b0 <SetAngle+0x3e>
	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	44 eb       	ldi	r20, 0xB4	; 180
 292:	52 e4       	ldi	r21, 0x42	; 66
 294:	c7 01       	movw	r24, r14
 296:	b6 01       	movw	r22, r12
 298:	7b d3       	rcall	.+1782   	; 0x990 <__gesf2>
 29a:	18 16       	cp	r1, r24
 29c:	8c f4       	brge	.+34     	; 0x2c0 <SetAngle+0x4e>
 29e:	0f 2e       	mov	r0, r31
 2a0:	c1 2c       	mov	r12, r1
 2a2:	d1 2c       	mov	r13, r1
 2a4:	f4 eb       	ldi	r31, 0xB4	; 180
 2a6:	ef 2e       	mov	r14, r31
 2a8:	f2 e4       	ldi	r31, 0x42	; 66
 2aa:	ff 2e       	mov	r15, r31
 2ac:	f0 2d       	mov	r31, r0
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <SetAngle+0x4e>

void SetAngle(float angle){

	//limiting the setpoint +/- 90 degrees

	if(angle<MIN_ANGLE) angle=MIN_ANGLE;
 2b0:	0f 2e       	mov	r0, r31
 2b2:	c1 2c       	mov	r12, r1
 2b4:	d1 2c       	mov	r13, r1
 2b6:	f4 eb       	ldi	r31, 0xB4	; 180
 2b8:	ef 2e       	mov	r14, r31
 2ba:	f2 ec       	ldi	r31, 0xC2	; 194
 2bc:	ff 2e       	mov	r15, r31
 2be:	f0 2d       	mov	r31, r0
	if(angle>MAX_ANGLE) angle=MAX_ANGLE;
	//current_angle = angle_setpoint;
	//angle_setpoint = angle - current_angle;
	angle_setpoint = angle;
 2c0:	c0 92 08 02 	sts	0x0208, r12	; 0x800208 <__data_end>
 2c4:	d0 92 09 02 	sts	0x0209, r13	; 0x800209 <__data_end+0x1>
 2c8:	e0 92 0a 02 	sts	0x020A, r14	; 0x80020a <__data_end+0x2>
 2cc:	f0 92 0b 02 	sts	0x020B, r15	; 0x80020b <__data_end+0x3>
	StMotDir(angle_setpoint);
 2d0:	c7 01       	movw	r24, r14
 2d2:	b6 01       	movw	r22, r12
 2d4:	ba df       	rcall	.-140    	; 0x24a <StMotDir>
	pulse_setpoint=abs(angle_setpoint) * ANGLE_TO_STEPS;
 2d6:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <__data_end>
 2da:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <__data_end+0x1>
 2de:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end+0x2>
 2e2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x3>
 2e6:	71 d2       	rcall	.+1250   	; 0x7ca <__fixsfsi>
 2e8:	9b 01       	movw	r18, r22
 2ea:	77 23       	and	r23, r23
 2ec:	24 f4       	brge	.+8      	; 0x2f6 <SetAngle+0x84>
 2ee:	22 27       	eor	r18, r18
 2f0:	33 27       	eor	r19, r19
 2f2:	26 1b       	sub	r18, r22
 2f4:	37 0b       	sbc	r19, r23
 2f6:	b9 01       	movw	r22, r18
 2f8:	33 0f       	add	r19, r19
 2fa:	88 0b       	sbc	r24, r24
 2fc:	99 0b       	sbc	r25, r25
 2fe:	98 d2       	rcall	.+1328   	; 0x830 <__floatsisf>
 300:	20 e0       	ldi	r18, 0x00	; 0
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	48 e4       	ldi	r20, 0x48	; 72
 306:	55 e4       	ldi	r21, 0x45	; 69
 308:	47 d3       	rcall	.+1678   	; 0x998 <__mulsf3>
 30a:	9b 01       	movw	r18, r22
 30c:	ac 01       	movw	r20, r24
 30e:	8d d1       	rcall	.+794    	; 0x62a <__addsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	44 eb       	ldi	r20, 0xB4	; 180
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	f0 d1       	rcall	.+992    	; 0x6fa <__divsf3>
 31a:	5c d2       	rcall	.+1208   	; 0x7d4 <__fixunssfsi>
 31c:	70 93 0d 02 	sts	0x020D, r23	; 0x80020d <pulse_setpoint+0x1>
 320:	60 93 0c 02 	sts	0x020C, r22	; 0x80020c <pulse_setpoint>

}
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	df 90       	pop	r13
 32a:	cf 90       	pop	r12
 32c:	08 95       	ret

0000032e <UartTransmitByte>:
	}
	while(1);
	if(negative_flag==1) data=-data;
	// заканчиваем, когда увидели признак \r\n
	return(data);
}
 32e:	e0 ec       	ldi	r30, 0xC0	; 192
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	90 81       	ld	r25, Z
 334:	95 ff       	sbrs	r25, 5
 336:	fd cf       	rjmp	.-6      	; 0x332 <UartTransmitByte+0x4>
 338:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 33c:	08 95       	ret

0000033e <UartSendDec>:
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	7c 01       	movw	r14, r24
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	11 f1       	breq	.+68     	; 0x394 <UartSendDec+0x56>
 350:	2c f4       	brge	.+10     	; 0x35c <UartSendDec+0x1e>
 352:	f1 94       	neg	r15
 354:	e1 94       	neg	r14
 356:	f1 08       	sbc	r15, r1
 358:	8d e2       	ldi	r24, 0x2D	; 45
 35a:	e9 df       	rcall	.-46     	; 0x32e <UartTransmitByte>
 35c:	c1 e0       	ldi	r28, 0x01	; 1
 35e:	1e 2d       	mov	r17, r14
 360:	df 2d       	mov	r29, r15
 362:	01 c0       	rjmp	.+2      	; 0x366 <UartSendDec+0x28>
 364:	ce 2d       	mov	r28, r14
 366:	ee 24       	eor	r14, r14
 368:	e3 94       	inc	r14
 36a:	ec 0e       	add	r14, r28
 36c:	01 2f       	mov	r16, r17
 36e:	fd 2e       	mov	r15, r29
 370:	6c 2f       	mov	r22, r28
 372:	81 2f       	mov	r24, r17
 374:	9d 2f       	mov	r25, r29
 376:	04 d1       	rcall	.+520    	; 0x580 <Digit>
 378:	88 23       	and	r24, r24
 37a:	a1 f3       	breq	.-24     	; 0x364 <UartSendDec+0x26>
 37c:	c6 30       	cpi	r28, 0x06	; 6
 37e:	60 f4       	brcc	.+24     	; 0x398 <UartSendDec+0x5a>
 380:	6c 2f       	mov	r22, r28
 382:	80 2f       	mov	r24, r16
 384:	9f 2d       	mov	r25, r15
 386:	fc d0       	rcall	.+504    	; 0x580 <Digit>
 388:	80 5d       	subi	r24, 0xD0	; 208
 38a:	d1 df       	rcall	.-94     	; 0x32e <UartTransmitByte>
 38c:	cf 5f       	subi	r28, 0xFF	; 255
 38e:	c6 30       	cpi	r28, 0x06	; 6
 390:	b9 f7       	brne	.-18     	; 0x380 <UartSendDec+0x42>
 392:	02 c0       	rjmp	.+4      	; 0x398 <UartSendDec+0x5a>
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	cb df       	rcall	.-106    	; 0x32e <UartTransmitByte>
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	08 95       	ret

000003a6 <UartSendStr>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	ec 01       	movw	r28, r24
 3ac:	88 81       	ld	r24, Y
 3ae:	88 23       	and	r24, r24
 3b0:	29 f0       	breq	.+10     	; 0x3bc <UartSendStr+0x16>
 3b2:	21 96       	adiw	r28, 0x01	; 1
 3b4:	bc df       	rcall	.-136    	; 0x32e <UartTransmitByte>
 3b6:	89 91       	ld	r24, Y+
 3b8:	81 11       	cpse	r24, r1
 3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <UartSendStr+0xe>
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <UartInit>:

#define INTERRUPTS
/* функци€ инициализации: настройка ћ  на приЄм и передачу данных, 
длина сообщени€ Ц 8 бит, один —“ќѕ бит, без паритета, скорость обмена Ц 19200 бод */
void UartInit(void){
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
 3ca:	28 97       	sbiw	r28, 0x08	; 8
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
	uint8_t word[]={"UART_OK"};
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	e0 e0       	ldi	r30, 0x00	; 0
 3da:	f2 e0       	ldi	r31, 0x02	; 2
 3dc:	de 01       	movw	r26, r28
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	01 90       	ld	r0, Z+
 3e2:	0d 92       	st	X+, r0
 3e4:	8a 95       	dec	r24
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <UartInit+0x1e>
	#ifdef INTERRUPTS
		UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 3e8:	e1 ec       	ldi	r30, 0xC1	; 193
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	88 69       	ori	r24, 0x98	; 152
 3f0:	80 83       	st	Z, r24
	#endif
	#ifdef NO_INTERRUPTS
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);	
	#endif
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 3f2:	e2 ec       	ldi	r30, 0xC2	; 194
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	86 60       	ori	r24, 0x06	; 6
 3fa:	80 83       	st	Z, r24
	//скорость передачи 19200 бод
	UBRR0H=0;
 3fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	//дл€ значени€ UBRR0L = 51 = 0x33	UBRR0L=0x33;
	UBRR0L=0x33;
 400:	83 e3       	ldi	r24, 0x33	; 51
 402:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	// выводим в терминал слово TEST_OK
	UartSendStr(word);
 406:	ce 01       	movw	r24, r28
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	cd df       	rcall	.-102    	; 0x3a6 <UartSendStr>
	// переходим в начало следующей строки
	UartTransmitByte('\r');
 40c:	8d e0       	ldi	r24, 0x0D	; 13
 40e:	8f df       	rcall	.-226    	; 0x32e <UartTransmitByte>
}
 410:	28 96       	adiw	r28, 0x08	; 8
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	f8 94       	cli
 416:	de bf       	out	0x3e, r29	; 62
 418:	0f be       	out	0x3f, r0	; 63
 41a:	cd bf       	out	0x3d, r28	; 61
 41c:	df 91       	pop	r29
 41e:	cf 91       	pop	r28
 420:	08 95       	ret

00000422 <UartReceiveData>:

//чтобы работали прерывани€, нужно в UCSR0B в UartInit() выставить бит RXCIE0
float UartReceiveData(void){
	return(angle_received);
 422:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <angle_received>
 426:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <angle_received+0x1>
 42a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <angle_received+0x2>
 42e:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <angle_received+0x3>
}
 432:	08 95       	ret

00000434 <__vector_25>:

ISR(USART0_RX_vect){
 434:	1f 92       	push	r1
 436:	0f 92       	push	r0
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	0f 92       	push	r0
 43c:	11 24       	eor	r1, r1
 43e:	0b b6       	in	r0, 0x3b	; 59
 440:	0f 92       	push	r0
 442:	cf 92       	push	r12
 444:	df 92       	push	r13
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	2f 93       	push	r18
 44c:	3f 93       	push	r19
 44e:	4f 93       	push	r20
 450:	5f 93       	push	r21
 452:	6f 93       	push	r22
 454:	7f 93       	push	r23
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	af 93       	push	r26
 45c:	bf 93       	push	r27
 45e:	cf 93       	push	r28
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	digit_received=UDR0;
 464:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 468:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <digit_received>
	if(digit_received=='\r') complete_flag=0;
 46c:	6d 30       	cpi	r22, 0x0D	; 13
 46e:	19 f4       	brne	.+6      	; 0x476 <__vector_25+0x42>
 470:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <complete_flag>
 474:	11 c0       	rjmp	.+34     	; 0x498 <__vector_25+0x64>
	if(digit_received=='\n') complete_flag=1;
 476:	6a 30       	cpi	r22, 0x0A	; 10
 478:	21 f4       	brne	.+8      	; 0x482 <__vector_25+0x4e>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <complete_flag>
 480:	32 c0       	rjmp	.+100    	; 0x4e6 <__vector_25+0xb2>
	if(digit_received=='-') negative_flag=1;
 482:	6d 32       	cpi	r22, 0x2D	; 45
 484:	49 f4       	brne	.+18     	; 0x498 <__vector_25+0x64>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <negative_flag>
	if((digit_received>='0') && (digit_received<='9')){
		digit_received-='0';
		data_received*=10;
		data_received+=digit_received;
	}
	if(complete_flag==1){
 48c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <complete_flag>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	09 f0       	breq	.+2      	; 0x496 <__vector_25+0x62>
 494:	5d c0       	rjmp	.+186    	; 0x550 <__vector_25+0x11c>
 496:	2f c0       	rjmp	.+94     	; 0x4f6 <__vector_25+0xc2>
ISR(USART0_RX_vect){
	digit_received=UDR0;
	if(digit_received=='\r') complete_flag=0;
	if(digit_received=='\n') complete_flag=1;
	if(digit_received=='-') negative_flag=1;
	if((digit_received>='0') && (digit_received<='9')){
 498:	c0 ed       	ldi	r28, 0xD0	; 208
 49a:	c6 0f       	add	r28, r22
 49c:	ca 30       	cpi	r28, 0x0A	; 10
 49e:	18 f5       	brcc	.+70     	; 0x4e6 <__vector_25+0xb2>
		digit_received-='0';
 4a0:	c0 93 12 02 	sts	0x0212, r28	; 0x800212 <digit_received>
		data_received*=10;
		data_received+=digit_received;
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	40 e2       	ldi	r20, 0x20	; 32
 4aa:	51 e4       	ldi	r21, 0x41	; 65
 4ac:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <data_received>
 4b0:	70 91 18 02 	lds	r23, 0x0218	; 0x800218 <data_received+0x1>
 4b4:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <data_received+0x2>
 4b8:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <data_received+0x3>
 4bc:	6d d2       	rcall	.+1242   	; 0x998 <__mulsf3>
 4be:	6b 01       	movw	r12, r22
 4c0:	7c 01       	movw	r14, r24
 4c2:	6c 2f       	mov	r22, r28
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	b2 d1       	rcall	.+868    	; 0x830 <__floatsisf>
 4cc:	9b 01       	movw	r18, r22
 4ce:	ac 01       	movw	r20, r24
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	aa d0       	rcall	.+340    	; 0x62a <__addsf3>
 4d6:	60 93 17 02 	sts	0x0217, r22	; 0x800217 <data_received>
 4da:	70 93 18 02 	sts	0x0218, r23	; 0x800218 <data_received+0x1>
 4de:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <data_received+0x2>
 4e2:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <data_received+0x3>
	}
	if(complete_flag==1){
 4e6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <complete_flag>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	89 f5       	brne	.+98     	; 0x550 <__vector_25+0x11c>
		if(negative_flag==1) data_received=-data_received;
 4ee:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <negative_flag>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	89 f4       	brne	.+34     	; 0x518 <__vector_25+0xe4>
 4f6:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <data_received>
 4fa:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <data_received+0x1>
 4fe:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <data_received+0x2>
 502:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <data_received+0x3>
 506:	b0 58       	subi	r27, 0x80	; 128
 508:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <data_received>
 50c:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <data_received+0x1>
 510:	a0 93 19 02 	sts	0x0219, r26	; 0x800219 <data_received+0x2>
 514:	b0 93 1a 02 	sts	0x021A, r27	; 0x80021a <data_received+0x3>
		angle_received=data_received;
 518:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <data_received>
 51c:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <data_received+0x1>
 520:	a0 91 19 02 	lds	r26, 0x0219	; 0x800219 <data_received+0x2>
 524:	b0 91 1a 02 	lds	r27, 0x021A	; 0x80021a <data_received+0x3>
 528:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <angle_received>
 52c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <angle_received+0x1>
 530:	a0 93 15 02 	sts	0x0215, r26	; 0x800215 <angle_received+0x2>
 534:	b0 93 16 02 	sts	0x0216, r27	; 0x800216 <angle_received+0x3>
		complete_flag=0;
 538:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <complete_flag>
		negative_flag=0;
 53c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <negative_flag>
		data_received=0;
 540:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <data_received>
 544:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <data_received+0x1>
 548:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <data_received+0x2>
 54c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <data_received+0x3>
	}
}
 550:	ff 91       	pop	r31
 552:	ef 91       	pop	r30
 554:	cf 91       	pop	r28
 556:	bf 91       	pop	r27
 558:	af 91       	pop	r26
 55a:	9f 91       	pop	r25
 55c:	8f 91       	pop	r24
 55e:	7f 91       	pop	r23
 560:	6f 91       	pop	r22
 562:	5f 91       	pop	r21
 564:	4f 91       	pop	r20
 566:	3f 91       	pop	r19
 568:	2f 91       	pop	r18
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	0f 90       	pop	r0
 574:	0b be       	out	0x3b, r0	; 59
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

00000580 <Digit>:
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
 580:	cf 93       	push	r28
 582:	f8 2f       	mov	r31, r24
 584:	c6 2f       	mov	r28, r22
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 586:	65 30       	cpi	r22, 0x05	; 5
 588:	09 f0       	breq	.+2      	; 0x58c <Digit+0xc>
 58a:	3d c0       	rjmp	.+122    	; 0x606 <Digit+0x86>
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
 58c:	28 2f       	mov	r18, r24
 58e:	39 2f       	mov	r19, r25
 590:	ad ec       	ldi	r26, 0xCD	; 205
 592:	bc ec       	ldi	r27, 0xCC	; 204
 594:	64 d2       	rcall	.+1224   	; 0xa5e <__umulhisi3>
 596:	96 95       	lsr	r25
 598:	87 95       	ror	r24
 59a:	96 95       	lsr	r25
 59c:	87 95       	ror	r24
 59e:	96 95       	lsr	r25
 5a0:	87 95       	ror	r24
 5a2:	9c 01       	movw	r18, r24
 5a4:	22 0f       	add	r18, r18
 5a6:	33 1f       	adc	r19, r19
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	88 0f       	add	r24, r24
 5b2:	99 1f       	adc	r25, r25
 5b4:	82 0f       	add	r24, r18
 5b6:	93 1f       	adc	r25, r19
 5b8:	f8 1b       	sub	r31, r24
 5ba:	33 c0       	rjmp	.+102    	; 0x622 <Digit+0xa2>
 5bc:	9a 01       	movw	r18, r20
 5be:	ad ec       	ldi	r26, 0xCD	; 205
 5c0:	bc ec       	ldi	r27, 0xCC	; 204
 5c2:	4d d2       	rcall	.+1178   	; 0xa5e <__umulhisi3>
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	96 95       	lsr	r25
 5ca:	87 95       	ror	r24
 5cc:	96 95       	lsr	r25
 5ce:	87 95       	ror	r24
 5d0:	9c 01       	movw	r18, r24
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	82 0f       	add	r24, r18
 5e4:	93 1f       	adc	r25, r19
 5e6:	f4 2f       	mov	r31, r20
 5e8:	f8 1b       	sub	r31, r24
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 5ea:	ce 17       	cp	r28, r30
		d /= 10; //уменьшаем число в 10 раз
 5ec:	d1 f0       	breq	.+52     	; 0x622 <Digit+0xa2>
 5ee:	9a 01       	movw	r18, r20
 5f0:	36 d2       	rcall	.+1132   	; 0xa5e <__umulhisi3>
 5f2:	ac 01       	movw	r20, r24
 5f4:	56 95       	lsr	r21
 5f6:	47 95       	ror	r20
 5f8:	56 95       	lsr	r21
 5fa:	47 95       	ror	r20
 5fc:	56 95       	lsr	r21
 5fe:	47 95       	ror	r20
 600:	e1 50       	subi	r30, 0x01	; 1
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
 602:	e1 f6       	brne	.-72     	; 0x5bc <Digit+0x3c>
 604:	0e c0       	rjmp	.+28     	; 0x622 <Digit+0xa2>
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
		d /= 10; //уменьшаем число в 10 раз
 606:	28 2f       	mov	r18, r24
 608:	39 2f       	mov	r19, r25
 60a:	ad ec       	ldi	r26, 0xCD	; 205
 60c:	bc ec       	ldi	r27, 0xCC	; 204
 60e:	27 d2       	rcall	.+1102   	; 0xa5e <__umulhisi3>
 610:	ac 01       	movw	r20, r24
 612:	56 95       	lsr	r21
 614:	47 95       	ror	r20
 616:	56 95       	lsr	r21
 618:	47 95       	ror	r20
 61a:	56 95       	lsr	r21
 61c:	47 95       	ror	r20
 61e:	e4 e0       	ldi	r30, 0x04	; 4
 620:	cd cf       	rjmp	.-102    	; 0x5bc <Digit+0x3c>
	}
	return(a);
}
 622:	8f 2f       	mov	r24, r31
 624:	cf 91       	pop	r28
 626:	08 95       	ret

00000628 <__subsf3>:
 628:	50 58       	subi	r21, 0x80	; 128

0000062a <__addsf3>:
 62a:	bb 27       	eor	r27, r27
 62c:	aa 27       	eor	r26, r26
 62e:	0e d0       	rcall	.+28     	; 0x64c <__addsf3x>
 630:	75 c1       	rjmp	.+746    	; 0x91c <__fp_round>
 632:	66 d1       	rcall	.+716    	; 0x900 <__fp_pscA>
 634:	30 f0       	brcs	.+12     	; 0x642 <__addsf3+0x18>
 636:	6b d1       	rcall	.+726    	; 0x90e <__fp_pscB>
 638:	20 f0       	brcs	.+8      	; 0x642 <__addsf3+0x18>
 63a:	31 f4       	brne	.+12     	; 0x648 <__addsf3+0x1e>
 63c:	9f 3f       	cpi	r25, 0xFF	; 255
 63e:	11 f4       	brne	.+4      	; 0x644 <__addsf3+0x1a>
 640:	1e f4       	brtc	.+6      	; 0x648 <__addsf3+0x1e>
 642:	5b c1       	rjmp	.+694    	; 0x8fa <__fp_nan>
 644:	0e f4       	brtc	.+2      	; 0x648 <__addsf3+0x1e>
 646:	e0 95       	com	r30
 648:	e7 fb       	bst	r30, 7
 64a:	51 c1       	rjmp	.+674    	; 0x8ee <__fp_inf>

0000064c <__addsf3x>:
 64c:	e9 2f       	mov	r30, r25
 64e:	77 d1       	rcall	.+750    	; 0x93e <__fp_split3>
 650:	80 f3       	brcs	.-32     	; 0x632 <__addsf3+0x8>
 652:	ba 17       	cp	r27, r26
 654:	62 07       	cpc	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	95 07       	cpc	r25, r21
 65c:	18 f0       	brcs	.+6      	; 0x664 <__addsf3x+0x18>
 65e:	71 f4       	brne	.+28     	; 0x67c <__addsf3x+0x30>
 660:	9e f5       	brtc	.+102    	; 0x6c8 <__addsf3x+0x7c>
 662:	8f c1       	rjmp	.+798    	; 0x982 <__fp_zero>
 664:	0e f4       	brtc	.+2      	; 0x668 <__addsf3x+0x1c>
 666:	e0 95       	com	r30
 668:	0b 2e       	mov	r0, r27
 66a:	ba 2f       	mov	r27, r26
 66c:	a0 2d       	mov	r26, r0
 66e:	0b 01       	movw	r0, r22
 670:	b9 01       	movw	r22, r18
 672:	90 01       	movw	r18, r0
 674:	0c 01       	movw	r0, r24
 676:	ca 01       	movw	r24, r20
 678:	a0 01       	movw	r20, r0
 67a:	11 24       	eor	r1, r1
 67c:	ff 27       	eor	r31, r31
 67e:	59 1b       	sub	r21, r25
 680:	99 f0       	breq	.+38     	; 0x6a8 <__addsf3x+0x5c>
 682:	59 3f       	cpi	r21, 0xF9	; 249
 684:	50 f4       	brcc	.+20     	; 0x69a <__addsf3x+0x4e>
 686:	50 3e       	cpi	r21, 0xE0	; 224
 688:	68 f1       	brcs	.+90     	; 0x6e4 <__addsf3x+0x98>
 68a:	1a 16       	cp	r1, r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	a2 2f       	mov	r26, r18
 690:	23 2f       	mov	r18, r19
 692:	34 2f       	mov	r19, r20
 694:	44 27       	eor	r20, r20
 696:	58 5f       	subi	r21, 0xF8	; 248
 698:	f3 cf       	rjmp	.-26     	; 0x680 <__addsf3x+0x34>
 69a:	46 95       	lsr	r20
 69c:	37 95       	ror	r19
 69e:	27 95       	ror	r18
 6a0:	a7 95       	ror	r26
 6a2:	f0 40       	sbci	r31, 0x00	; 0
 6a4:	53 95       	inc	r21
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__addsf3x+0x4e>
 6a8:	7e f4       	brtc	.+30     	; 0x6c8 <__addsf3x+0x7c>
 6aa:	1f 16       	cp	r1, r31
 6ac:	ba 0b       	sbc	r27, r26
 6ae:	62 0b       	sbc	r22, r18
 6b0:	73 0b       	sbc	r23, r19
 6b2:	84 0b       	sbc	r24, r20
 6b4:	ba f0       	brmi	.+46     	; 0x6e4 <__addsf3x+0x98>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	a1 f0       	breq	.+40     	; 0x6e2 <__addsf3x+0x96>
 6ba:	ff 0f       	add	r31, r31
 6bc:	bb 1f       	adc	r27, r27
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	c2 f7       	brpl	.-16     	; 0x6b6 <__addsf3x+0x6a>
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <__addsf3x+0x98>
 6c8:	ba 0f       	add	r27, r26
 6ca:	62 1f       	adc	r22, r18
 6cc:	73 1f       	adc	r23, r19
 6ce:	84 1f       	adc	r24, r20
 6d0:	48 f4       	brcc	.+18     	; 0x6e4 <__addsf3x+0x98>
 6d2:	87 95       	ror	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <__addsf3x+0x96>
 6e0:	b3 cf       	rjmp	.-154    	; 0x648 <__addsf3+0x1e>
 6e2:	93 95       	inc	r25
 6e4:	88 0f       	add	r24, r24
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__addsf3x+0x9e>
 6e8:	99 27       	eor	r25, r25
 6ea:	ee 0f       	add	r30, r30
 6ec:	97 95       	ror	r25
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret

000006f2 <__cmpsf2>:
 6f2:	d9 d0       	rcall	.+434    	; 0x8a6 <__fp_cmp>
 6f4:	08 f4       	brcc	.+2      	; 0x6f8 <__cmpsf2+0x6>
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	08 95       	ret

000006fa <__divsf3>:
 6fa:	0c d0       	rcall	.+24     	; 0x714 <__divsf3x>
 6fc:	0f c1       	rjmp	.+542    	; 0x91c <__fp_round>
 6fe:	07 d1       	rcall	.+526    	; 0x90e <__fp_pscB>
 700:	40 f0       	brcs	.+16     	; 0x712 <__divsf3+0x18>
 702:	fe d0       	rcall	.+508    	; 0x900 <__fp_pscA>
 704:	30 f0       	brcs	.+12     	; 0x712 <__divsf3+0x18>
 706:	21 f4       	brne	.+8      	; 0x710 <__divsf3+0x16>
 708:	5f 3f       	cpi	r21, 0xFF	; 255
 70a:	19 f0       	breq	.+6      	; 0x712 <__divsf3+0x18>
 70c:	f0 c0       	rjmp	.+480    	; 0x8ee <__fp_inf>
 70e:	51 11       	cpse	r21, r1
 710:	39 c1       	rjmp	.+626    	; 0x984 <__fp_szero>
 712:	f3 c0       	rjmp	.+486    	; 0x8fa <__fp_nan>

00000714 <__divsf3x>:
 714:	14 d1       	rcall	.+552    	; 0x93e <__fp_split3>
 716:	98 f3       	brcs	.-26     	; 0x6fe <__divsf3+0x4>

00000718 <__divsf3_pse>:
 718:	99 23       	and	r25, r25
 71a:	c9 f3       	breq	.-14     	; 0x70e <__divsf3+0x14>
 71c:	55 23       	and	r21, r21
 71e:	b1 f3       	breq	.-20     	; 0x70c <__divsf3+0x12>
 720:	95 1b       	sub	r25, r21
 722:	55 0b       	sbc	r21, r21
 724:	bb 27       	eor	r27, r27
 726:	aa 27       	eor	r26, r26
 728:	62 17       	cp	r22, r18
 72a:	73 07       	cpc	r23, r19
 72c:	84 07       	cpc	r24, r20
 72e:	38 f0       	brcs	.+14     	; 0x73e <__divsf3_pse+0x26>
 730:	9f 5f       	subi	r25, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	22 0f       	add	r18, r18
 736:	33 1f       	adc	r19, r19
 738:	44 1f       	adc	r20, r20
 73a:	aa 1f       	adc	r26, r26
 73c:	a9 f3       	breq	.-22     	; 0x728 <__divsf3_pse+0x10>
 73e:	33 d0       	rcall	.+102    	; 0x7a6 <__divsf3_pse+0x8e>
 740:	0e 2e       	mov	r0, r30
 742:	3a f0       	brmi	.+14     	; 0x752 <__divsf3_pse+0x3a>
 744:	e0 e8       	ldi	r30, 0x80	; 128
 746:	30 d0       	rcall	.+96     	; 0x7a8 <__divsf3_pse+0x90>
 748:	91 50       	subi	r25, 0x01	; 1
 74a:	50 40       	sbci	r21, 0x00	; 0
 74c:	e6 95       	lsr	r30
 74e:	00 1c       	adc	r0, r0
 750:	ca f7       	brpl	.-14     	; 0x744 <__divsf3_pse+0x2c>
 752:	29 d0       	rcall	.+82     	; 0x7a6 <__divsf3_pse+0x8e>
 754:	fe 2f       	mov	r31, r30
 756:	27 d0       	rcall	.+78     	; 0x7a6 <__divsf3_pse+0x8e>
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	bb 1f       	adc	r27, r27
 760:	26 17       	cp	r18, r22
 762:	37 07       	cpc	r19, r23
 764:	48 07       	cpc	r20, r24
 766:	ab 07       	cpc	r26, r27
 768:	b0 e8       	ldi	r27, 0x80	; 128
 76a:	09 f0       	breq	.+2      	; 0x76e <__divsf3_pse+0x56>
 76c:	bb 0b       	sbc	r27, r27
 76e:	80 2d       	mov	r24, r0
 770:	bf 01       	movw	r22, r30
 772:	ff 27       	eor	r31, r31
 774:	93 58       	subi	r25, 0x83	; 131
 776:	5f 4f       	sbci	r21, 0xFF	; 255
 778:	2a f0       	brmi	.+10     	; 0x784 <__divsf3_pse+0x6c>
 77a:	9e 3f       	cpi	r25, 0xFE	; 254
 77c:	51 05       	cpc	r21, r1
 77e:	68 f0       	brcs	.+26     	; 0x79a <__divsf3_pse+0x82>
 780:	b6 c0       	rjmp	.+364    	; 0x8ee <__fp_inf>
 782:	00 c1       	rjmp	.+512    	; 0x984 <__fp_szero>
 784:	5f 3f       	cpi	r21, 0xFF	; 255
 786:	ec f3       	brlt	.-6      	; 0x782 <__divsf3_pse+0x6a>
 788:	98 3e       	cpi	r25, 0xE8	; 232
 78a:	dc f3       	brlt	.-10     	; 0x782 <__divsf3_pse+0x6a>
 78c:	86 95       	lsr	r24
 78e:	77 95       	ror	r23
 790:	67 95       	ror	r22
 792:	b7 95       	ror	r27
 794:	f7 95       	ror	r31
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	c9 f7       	brne	.-14     	; 0x78c <__divsf3_pse+0x74>
 79a:	88 0f       	add	r24, r24
 79c:	91 1d       	adc	r25, r1
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret
 7a6:	e1 e0       	ldi	r30, 0x01	; 1
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	bb 1f       	adc	r27, r27
 7b0:	62 17       	cp	r22, r18
 7b2:	73 07       	cpc	r23, r19
 7b4:	84 07       	cpc	r24, r20
 7b6:	ba 07       	cpc	r27, r26
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__divsf3_pse+0xaa>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	ba 0b       	sbc	r27, r26
 7c2:	ee 1f       	adc	r30, r30
 7c4:	88 f7       	brcc	.-30     	; 0x7a8 <__divsf3_pse+0x90>
 7c6:	e0 95       	com	r30
 7c8:	08 95       	ret

000007ca <__fixsfsi>:
 7ca:	04 d0       	rcall	.+8      	; 0x7d4 <__fixunssfsi>
 7cc:	68 94       	set
 7ce:	b1 11       	cpse	r27, r1
 7d0:	d9 c0       	rjmp	.+434    	; 0x984 <__fp_szero>
 7d2:	08 95       	ret

000007d4 <__fixunssfsi>:
 7d4:	bc d0       	rcall	.+376    	; 0x94e <__fp_splitA>
 7d6:	88 f0       	brcs	.+34     	; 0x7fa <__fixunssfsi+0x26>
 7d8:	9f 57       	subi	r25, 0x7F	; 127
 7da:	90 f0       	brcs	.+36     	; 0x800 <__fixunssfsi+0x2c>
 7dc:	b9 2f       	mov	r27, r25
 7de:	99 27       	eor	r25, r25
 7e0:	b7 51       	subi	r27, 0x17	; 23
 7e2:	a0 f0       	brcs	.+40     	; 0x80c <__fixunssfsi+0x38>
 7e4:	d1 f0       	breq	.+52     	; 0x81a <__fixunssfsi+0x46>
 7e6:	66 0f       	add	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	1a f0       	brmi	.+6      	; 0x7f6 <__fixunssfsi+0x22>
 7f0:	ba 95       	dec	r27
 7f2:	c9 f7       	brne	.-14     	; 0x7e6 <__fixunssfsi+0x12>
 7f4:	12 c0       	rjmp	.+36     	; 0x81a <__fixunssfsi+0x46>
 7f6:	b1 30       	cpi	r27, 0x01	; 1
 7f8:	81 f0       	breq	.+32     	; 0x81a <__fixunssfsi+0x46>
 7fa:	c3 d0       	rcall	.+390    	; 0x982 <__fp_zero>
 7fc:	b1 e0       	ldi	r27, 0x01	; 1
 7fe:	08 95       	ret
 800:	c0 c0       	rjmp	.+384    	; 0x982 <__fp_zero>
 802:	67 2f       	mov	r22, r23
 804:	78 2f       	mov	r23, r24
 806:	88 27       	eor	r24, r24
 808:	b8 5f       	subi	r27, 0xF8	; 248
 80a:	39 f0       	breq	.+14     	; 0x81a <__fixunssfsi+0x46>
 80c:	b9 3f       	cpi	r27, 0xF9	; 249
 80e:	cc f3       	brlt	.-14     	; 0x802 <__fixunssfsi+0x2e>
 810:	86 95       	lsr	r24
 812:	77 95       	ror	r23
 814:	67 95       	ror	r22
 816:	b3 95       	inc	r27
 818:	d9 f7       	brne	.-10     	; 0x810 <__fixunssfsi+0x3c>
 81a:	3e f4       	brtc	.+14     	; 0x82a <__fixunssfsi+0x56>
 81c:	90 95       	com	r25
 81e:	80 95       	com	r24
 820:	70 95       	com	r23
 822:	61 95       	neg	r22
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__floatunsisf>:
 82c:	e8 94       	clt
 82e:	09 c0       	rjmp	.+18     	; 0x842 <__floatsisf+0x12>

00000830 <__floatsisf>:
 830:	97 fb       	bst	r25, 7
 832:	3e f4       	brtc	.+14     	; 0x842 <__floatsisf+0x12>
 834:	90 95       	com	r25
 836:	80 95       	com	r24
 838:	70 95       	com	r23
 83a:	61 95       	neg	r22
 83c:	7f 4f       	sbci	r23, 0xFF	; 255
 83e:	8f 4f       	sbci	r24, 0xFF	; 255
 840:	9f 4f       	sbci	r25, 0xFF	; 255
 842:	99 23       	and	r25, r25
 844:	a9 f0       	breq	.+42     	; 0x870 <__floatsisf+0x40>
 846:	f9 2f       	mov	r31, r25
 848:	96 e9       	ldi	r25, 0x96	; 150
 84a:	bb 27       	eor	r27, r27
 84c:	93 95       	inc	r25
 84e:	f6 95       	lsr	r31
 850:	87 95       	ror	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f1 11       	cpse	r31, r1
 85a:	f8 cf       	rjmp	.-16     	; 0x84c <__floatsisf+0x1c>
 85c:	fa f4       	brpl	.+62     	; 0x89c <__floatsisf+0x6c>
 85e:	bb 0f       	add	r27, r27
 860:	11 f4       	brne	.+4      	; 0x866 <__floatsisf+0x36>
 862:	60 ff       	sbrs	r22, 0
 864:	1b c0       	rjmp	.+54     	; 0x89c <__floatsisf+0x6c>
 866:	6f 5f       	subi	r22, 0xFF	; 255
 868:	7f 4f       	sbci	r23, 0xFF	; 255
 86a:	8f 4f       	sbci	r24, 0xFF	; 255
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	16 c0       	rjmp	.+44     	; 0x89c <__floatsisf+0x6c>
 870:	88 23       	and	r24, r24
 872:	11 f0       	breq	.+4      	; 0x878 <__floatsisf+0x48>
 874:	96 e9       	ldi	r25, 0x96	; 150
 876:	11 c0       	rjmp	.+34     	; 0x89a <__floatsisf+0x6a>
 878:	77 23       	and	r23, r23
 87a:	21 f0       	breq	.+8      	; 0x884 <__floatsisf+0x54>
 87c:	9e e8       	ldi	r25, 0x8E	; 142
 87e:	87 2f       	mov	r24, r23
 880:	76 2f       	mov	r23, r22
 882:	05 c0       	rjmp	.+10     	; 0x88e <__floatsisf+0x5e>
 884:	66 23       	and	r22, r22
 886:	71 f0       	breq	.+28     	; 0x8a4 <__floatsisf+0x74>
 888:	96 e8       	ldi	r25, 0x86	; 134
 88a:	86 2f       	mov	r24, r22
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	2a f0       	brmi	.+10     	; 0x89c <__floatsisf+0x6c>
 892:	9a 95       	dec	r25
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	da f7       	brpl	.-10     	; 0x892 <__floatsisf+0x62>
 89c:	88 0f       	add	r24, r24
 89e:	96 95       	lsr	r25
 8a0:	87 95       	ror	r24
 8a2:	97 f9       	bld	r25, 7
 8a4:	08 95       	ret

000008a6 <__fp_cmp>:
 8a6:	99 0f       	add	r25, r25
 8a8:	00 08       	sbc	r0, r0
 8aa:	55 0f       	add	r21, r21
 8ac:	aa 0b       	sbc	r26, r26
 8ae:	e0 e8       	ldi	r30, 0x80	; 128
 8b0:	fe ef       	ldi	r31, 0xFE	; 254
 8b2:	16 16       	cp	r1, r22
 8b4:	17 06       	cpc	r1, r23
 8b6:	e8 07       	cpc	r30, r24
 8b8:	f9 07       	cpc	r31, r25
 8ba:	c0 f0       	brcs	.+48     	; 0x8ec <__fp_cmp+0x46>
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	e4 07       	cpc	r30, r20
 8c2:	f5 07       	cpc	r31, r21
 8c4:	98 f0       	brcs	.+38     	; 0x8ec <__fp_cmp+0x46>
 8c6:	62 1b       	sub	r22, r18
 8c8:	73 0b       	sbc	r23, r19
 8ca:	84 0b       	sbc	r24, r20
 8cc:	95 0b       	sbc	r25, r21
 8ce:	39 f4       	brne	.+14     	; 0x8de <__fp_cmp+0x38>
 8d0:	0a 26       	eor	r0, r26
 8d2:	61 f0       	breq	.+24     	; 0x8ec <__fp_cmp+0x46>
 8d4:	23 2b       	or	r18, r19
 8d6:	24 2b       	or	r18, r20
 8d8:	25 2b       	or	r18, r21
 8da:	21 f4       	brne	.+8      	; 0x8e4 <__fp_cmp+0x3e>
 8dc:	08 95       	ret
 8de:	0a 26       	eor	r0, r26
 8e0:	09 f4       	brne	.+2      	; 0x8e4 <__fp_cmp+0x3e>
 8e2:	a1 40       	sbci	r26, 0x01	; 1
 8e4:	a6 95       	lsr	r26
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	81 1d       	adc	r24, r1
 8ea:	81 1d       	adc	r24, r1
 8ec:	08 95       	ret

000008ee <__fp_inf>:
 8ee:	97 f9       	bld	r25, 7
 8f0:	9f 67       	ori	r25, 0x7F	; 127
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__fp_nan>:
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	80 ec       	ldi	r24, 0xC0	; 192
 8fe:	08 95       	ret

00000900 <__fp_pscA>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	16 16       	cp	r1, r22
 906:	17 06       	cpc	r1, r23
 908:	18 06       	cpc	r1, r24
 90a:	09 06       	cpc	r0, r25
 90c:	08 95       	ret

0000090e <__fp_pscB>:
 90e:	00 24       	eor	r0, r0
 910:	0a 94       	dec	r0
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	05 06       	cpc	r0, r21
 91a:	08 95       	ret

0000091c <__fp_round>:
 91c:	09 2e       	mov	r0, r25
 91e:	03 94       	inc	r0
 920:	00 0c       	add	r0, r0
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0xc>
 924:	88 23       	and	r24, r24
 926:	52 f0       	brmi	.+20     	; 0x93c <__fp_round+0x20>
 928:	bb 0f       	add	r27, r27
 92a:	40 f4       	brcc	.+16     	; 0x93c <__fp_round+0x20>
 92c:	bf 2b       	or	r27, r31
 92e:	11 f4       	brne	.+4      	; 0x934 <__fp_round+0x18>
 930:	60 ff       	sbrs	r22, 0
 932:	04 c0       	rjmp	.+8      	; 0x93c <__fp_round+0x20>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <__fp_split3>:
 93e:	57 fd       	sbrc	r21, 7
 940:	90 58       	subi	r25, 0x80	; 128
 942:	44 0f       	add	r20, r20
 944:	55 1f       	adc	r21, r21
 946:	59 f0       	breq	.+22     	; 0x95e <__fp_splitA+0x10>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	71 f0       	breq	.+28     	; 0x968 <__fp_splitA+0x1a>
 94c:	47 95       	ror	r20

0000094e <__fp_splitA>:
 94e:	88 0f       	add	r24, r24
 950:	97 fb       	bst	r25, 7
 952:	99 1f       	adc	r25, r25
 954:	61 f0       	breq	.+24     	; 0x96e <__fp_splitA+0x20>
 956:	9f 3f       	cpi	r25, 0xFF	; 255
 958:	79 f0       	breq	.+30     	; 0x978 <__fp_splitA+0x2a>
 95a:	87 95       	ror	r24
 95c:	08 95       	ret
 95e:	12 16       	cp	r1, r18
 960:	13 06       	cpc	r1, r19
 962:	14 06       	cpc	r1, r20
 964:	55 1f       	adc	r21, r21
 966:	f2 cf       	rjmp	.-28     	; 0x94c <__fp_split3+0xe>
 968:	46 95       	lsr	r20
 96a:	f1 df       	rcall	.-30     	; 0x94e <__fp_splitA>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__fp_splitA+0x30>
 96e:	16 16       	cp	r1, r22
 970:	17 06       	cpc	r1, r23
 972:	18 06       	cpc	r1, r24
 974:	99 1f       	adc	r25, r25
 976:	f1 cf       	rjmp	.-30     	; 0x95a <__fp_splitA+0xc>
 978:	86 95       	lsr	r24
 97a:	71 05       	cpc	r23, r1
 97c:	61 05       	cpc	r22, r1
 97e:	08 94       	sec
 980:	08 95       	ret

00000982 <__fp_zero>:
 982:	e8 94       	clt

00000984 <__fp_szero>:
 984:	bb 27       	eor	r27, r27
 986:	66 27       	eor	r22, r22
 988:	77 27       	eor	r23, r23
 98a:	cb 01       	movw	r24, r22
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret

00000990 <__gesf2>:
 990:	8a df       	rcall	.-236    	; 0x8a6 <__fp_cmp>
 992:	08 f4       	brcc	.+2      	; 0x996 <__gesf2+0x6>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	08 95       	ret

00000998 <__mulsf3>:
 998:	0b d0       	rcall	.+22     	; 0x9b0 <__mulsf3x>
 99a:	c0 cf       	rjmp	.-128    	; 0x91c <__fp_round>
 99c:	b1 df       	rcall	.-158    	; 0x900 <__fp_pscA>
 99e:	28 f0       	brcs	.+10     	; 0x9aa <__mulsf3+0x12>
 9a0:	b6 df       	rcall	.-148    	; 0x90e <__fp_pscB>
 9a2:	18 f0       	brcs	.+6      	; 0x9aa <__mulsf3+0x12>
 9a4:	95 23       	and	r25, r21
 9a6:	09 f0       	breq	.+2      	; 0x9aa <__mulsf3+0x12>
 9a8:	a2 cf       	rjmp	.-188    	; 0x8ee <__fp_inf>
 9aa:	a7 cf       	rjmp	.-178    	; 0x8fa <__fp_nan>
 9ac:	11 24       	eor	r1, r1
 9ae:	ea cf       	rjmp	.-44     	; 0x984 <__fp_szero>

000009b0 <__mulsf3x>:
 9b0:	c6 df       	rcall	.-116    	; 0x93e <__fp_split3>
 9b2:	a0 f3       	brcs	.-24     	; 0x99c <__mulsf3+0x4>

000009b4 <__mulsf3_pse>:
 9b4:	95 9f       	mul	r25, r21
 9b6:	d1 f3       	breq	.-12     	; 0x9ac <__mulsf3+0x14>
 9b8:	95 0f       	add	r25, r21
 9ba:	50 e0       	ldi	r21, 0x00	; 0
 9bc:	55 1f       	adc	r21, r21
 9be:	62 9f       	mul	r22, r18
 9c0:	f0 01       	movw	r30, r0
 9c2:	72 9f       	mul	r23, r18
 9c4:	bb 27       	eor	r27, r27
 9c6:	f0 0d       	add	r31, r0
 9c8:	b1 1d       	adc	r27, r1
 9ca:	63 9f       	mul	r22, r19
 9cc:	aa 27       	eor	r26, r26
 9ce:	f0 0d       	add	r31, r0
 9d0:	b1 1d       	adc	r27, r1
 9d2:	aa 1f       	adc	r26, r26
 9d4:	64 9f       	mul	r22, r20
 9d6:	66 27       	eor	r22, r22
 9d8:	b0 0d       	add	r27, r0
 9da:	a1 1d       	adc	r26, r1
 9dc:	66 1f       	adc	r22, r22
 9de:	82 9f       	mul	r24, r18
 9e0:	22 27       	eor	r18, r18
 9e2:	b0 0d       	add	r27, r0
 9e4:	a1 1d       	adc	r26, r1
 9e6:	62 1f       	adc	r22, r18
 9e8:	73 9f       	mul	r23, r19
 9ea:	b0 0d       	add	r27, r0
 9ec:	a1 1d       	adc	r26, r1
 9ee:	62 1f       	adc	r22, r18
 9f0:	83 9f       	mul	r24, r19
 9f2:	a0 0d       	add	r26, r0
 9f4:	61 1d       	adc	r22, r1
 9f6:	22 1f       	adc	r18, r18
 9f8:	74 9f       	mul	r23, r20
 9fa:	33 27       	eor	r19, r19
 9fc:	a0 0d       	add	r26, r0
 9fe:	61 1d       	adc	r22, r1
 a00:	23 1f       	adc	r18, r19
 a02:	84 9f       	mul	r24, r20
 a04:	60 0d       	add	r22, r0
 a06:	21 1d       	adc	r18, r1
 a08:	82 2f       	mov	r24, r18
 a0a:	76 2f       	mov	r23, r22
 a0c:	6a 2f       	mov	r22, r26
 a0e:	11 24       	eor	r1, r1
 a10:	9f 57       	subi	r25, 0x7F	; 127
 a12:	50 40       	sbci	r21, 0x00	; 0
 a14:	8a f0       	brmi	.+34     	; 0xa38 <__mulsf3_pse+0x84>
 a16:	e1 f0       	breq	.+56     	; 0xa50 <__mulsf3_pse+0x9c>
 a18:	88 23       	and	r24, r24
 a1a:	4a f0       	brmi	.+18     	; 0xa2e <__mulsf3_pse+0x7a>
 a1c:	ee 0f       	add	r30, r30
 a1e:	ff 1f       	adc	r31, r31
 a20:	bb 1f       	adc	r27, r27
 a22:	66 1f       	adc	r22, r22
 a24:	77 1f       	adc	r23, r23
 a26:	88 1f       	adc	r24, r24
 a28:	91 50       	subi	r25, 0x01	; 1
 a2a:	50 40       	sbci	r21, 0x00	; 0
 a2c:	a9 f7       	brne	.-22     	; 0xa18 <__mulsf3_pse+0x64>
 a2e:	9e 3f       	cpi	r25, 0xFE	; 254
 a30:	51 05       	cpc	r21, r1
 a32:	70 f0       	brcs	.+28     	; 0xa50 <__mulsf3_pse+0x9c>
 a34:	5c cf       	rjmp	.-328    	; 0x8ee <__fp_inf>
 a36:	a6 cf       	rjmp	.-180    	; 0x984 <__fp_szero>
 a38:	5f 3f       	cpi	r21, 0xFF	; 255
 a3a:	ec f3       	brlt	.-6      	; 0xa36 <__mulsf3_pse+0x82>
 a3c:	98 3e       	cpi	r25, 0xE8	; 232
 a3e:	dc f3       	brlt	.-10     	; 0xa36 <__mulsf3_pse+0x82>
 a40:	86 95       	lsr	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b7 95       	ror	r27
 a48:	f7 95       	ror	r31
 a4a:	e7 95       	ror	r30
 a4c:	9f 5f       	subi	r25, 0xFF	; 255
 a4e:	c1 f7       	brne	.-16     	; 0xa40 <__mulsf3_pse+0x8c>
 a50:	fe 2b       	or	r31, r30
 a52:	88 0f       	add	r24, r24
 a54:	91 1d       	adc	r25, r1
 a56:	96 95       	lsr	r25
 a58:	87 95       	ror	r24
 a5a:	97 f9       	bld	r25, 7
 a5c:	08 95       	ret

00000a5e <__umulhisi3>:
 a5e:	a2 9f       	mul	r26, r18
 a60:	b0 01       	movw	r22, r0
 a62:	b3 9f       	mul	r27, r19
 a64:	c0 01       	movw	r24, r0
 a66:	a3 9f       	mul	r26, r19
 a68:	70 0d       	add	r23, r0
 a6a:	81 1d       	adc	r24, r1
 a6c:	11 24       	eor	r1, r1
 a6e:	91 1d       	adc	r25, r1
 a70:	b2 9f       	mul	r27, r18
 a72:	70 0d       	add	r23, r0
 a74:	81 1d       	adc	r24, r1
 a76:	11 24       	eor	r1, r1
 a78:	91 1d       	adc	r25, r1
 a7a:	08 95       	ret

00000a7c <_exit>:
 a7c:	f8 94       	cli

00000a7e <__stop_program>:
 a7e:	ff cf       	rjmp	.-2      	; 0xa7e <__stop_program>
