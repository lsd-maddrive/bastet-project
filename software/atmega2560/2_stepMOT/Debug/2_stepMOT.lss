
2_stepMOT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800208  00800208  0000045a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001378  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f35  00000000  00000000  0000193c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000088f  00000000  00000000  00002871  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00003100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000070e  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063e  00000000  00000000  00003a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__vector_20>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee eb       	ldi	r30, 0xBE	; 190
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	11 d0       	rcall	.+34     	; 0x142 <main>
 120:	4c c1       	rjmp	.+664    	; 0x3ba <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitAll>:
		//_delay_ms(500);
	}
}

void InitAll(void){
	UartInit();
 124:	b7 d0       	rcall	.+366    	; 0x294 <UartInit>
	DDRB|=(1<<7);
 126:	27 9a       	sbi	0x04, 7	; 4
	DDRF|=(1<<5);
	//AdcInit();
	StMotInit();
 128:	85 9a       	sbi	0x10, 5	; 16
 12a:	24 d0       	rcall	.+72     	; 0x174 <StMotInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	81 ee       	ldi	r24, 0xE1	; 225
 130:	94 e0       	ldi	r25, 0x04	; 4
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <InitAll+0xe>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <InitAll+0x18>
 13c:	00 00       	nop
	//StMotGo(0);
	_delay_ms(100);
	sei();
 13e:	78 94       	sei
 140:	08 95       	ret

00000142 <main>:

void InitAll(void);

int main(void)
{
	InitAll();
 142:	f0 df       	rcall	.-32     	; 0x124 <InitAll>
		
		//получаем данные с терминала 0Е100 Ц скважность Ў»ћ
		//data = UartReceiveDec();
		// выставл€ем скорость вращени€ двигател€
			// табул€ци€ положени€ курсора в терминале
		UartTransmitByte('\t');
 144:	89 e0       	ldi	r24, 0x09	; 9
		// выводим только что переданное значение
		UartSendDec(GetCount());
 146:	5c d0       	rcall	.+184    	; 0x200 <UartTransmitByte>
 148:	56 d0       	rcall	.+172    	; 0x1f6 <GetCount>
 14a:	62 d0       	rcall	.+196    	; 0x210 <UartSendDec>
		//UartTransmitByte('\t');
		//error = data - GetSpeed();
		//UartSendDec(error);
		
		UartTransmitByte('\r');
 14c:	8d e0       	ldi	r24, 0x0D	; 13
 14e:	58 d0       	rcall	.+176    	; 0x200 <UartTransmitByte>
 150:	f9 cf       	rjmp	.-14     	; 0x144 <main+0x2>

00000152 <StMotTim1Init>:
 152:	e1 e8       	ldi	r30, 0x81	; 129
//TIMSK0|=(1<<TOIE0);
//}

void StMotTim1Init(void){
	////timer in normal mode
	TCCR1B|=(1<<CS11) | (1<<CS10); //prescaler 64
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	83 60       	ori	r24, 0x03	; 3
 15a:	80 83       	st	Z, r24
	//TCCR1B|=(1<<CS12); //prescaler 256
	
	TCNT1=65536-100; //timer period = 400 us
 15c:	8c e9       	ldi	r24, 0x9C	; 156
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 164:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	TIMSK1|=(1<<TOIE1);
 168:	ef e6       	ldi	r30, 0x6F	; 111
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <StMotInit>:
}

void StMotInit(void){
	StMotTim1Init();
 174:	ee df       	rcall	.-36     	; 0x152 <StMotTim1Init>
	//#ifdef DIRECT
	//
	ST_MOT_PUL_DDR|=(1<<DD_PUL1);
 176:	08 9a       	sbi	0x01, 0	; 1
	ST_MOT_DIR_DDR|=(1<<DD_DIR1);
 178:	09 9a       	sbi	0x01, 1	; 1
	//#endif
	//PULSE
	//DDRA|=(1<<0);
	////DIR
	//DDRA|=(1<<1);
	pulse_setpoint=0;
 17a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <__data_end+0x1>
 17e:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
 182:	08 95       	ret

00000184 <__vector_20>:
	
}

ISR(TIMER1_OVF_vect){
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
	TCNT1=65536-100; //timer period = 400 us
 196:	8c e9       	ldi	r24, 0x9C	; 156
 198:	9f ef       	ldi	r25, 0xFF	; 255
 19a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 19e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	if (pulse_count < pulse_setpoint)
 1a2:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <pulse_count>
 1a6:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <pulse_count+0x1>
 1aa:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 1ae:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <__data_end+0x1>
 1b2:	28 17       	cp	r18, r24
 1b4:	39 07       	cpc	r19, r25
 1b6:	70 f4       	brcc	.+28     	; 0x1d4 <__vector_20+0x50>
	{
		ST_MOT_PUL_PORT^=(1<<PORT_PUL1);
 1b8:	92 b1       	in	r25, 0x02	; 2
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	89 27       	eor	r24, r25
 1be:	82 b9       	out	0x02, r24	; 2
		//PORTA^=(1<<0);
		pulse_count++;
 1c0:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <pulse_count>
 1c4:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <pulse_count+0x1>
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <pulse_count+0x1>
 1ce:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <pulse_count>
 1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <__vector_20+0x60>
	}
	else{
		//change dir
		ST_MOT_DIR_PORT^=(1<<PORT_DIR1);
 1d4:	92 b1       	in	r25, 0x02	; 2
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	89 27       	eor	r24, r25
 1da:	82 b9       	out	0x02, r24	; 2
		//PORTA^=(1<<1);
		pulse_count=0;
 1dc:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <pulse_count+0x1>
 1e0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <pulse_count>
		
	}

	//ST_MOT_PUL_PORT^=(1<<(st_mot_chosen-1));
	
}
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <GetCount>:

uint16_t GetCount(void){
	return(pulse_count);
}
 1f6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <pulse_count>
 1fa:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <pulse_count+0x1>
 1fe:	08 95       	ret

00000200 <UartTransmitByte>:
	}
	while(1);
	if(negative_flag==1) data=-data;
	// заканчиваем, когда увидели признак \r\n
	return(data);
}
 200:	e0 ec       	ldi	r30, 0xC0	; 192
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	90 81       	ld	r25, Z
 206:	95 ff       	sbrs	r25, 5
 208:	fd cf       	rjmp	.-6      	; 0x204 <UartTransmitByte+0x4>
 20a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 20e:	08 95       	ret

00000210 <UartSendDec>:
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	7c 01       	movw	r14, r24
 21e:	00 97       	sbiw	r24, 0x00	; 0
 220:	11 f1       	breq	.+68     	; 0x266 <UartSendDec+0x56>
 222:	2c f4       	brge	.+10     	; 0x22e <UartSendDec+0x1e>
 224:	f1 94       	neg	r15
 226:	e1 94       	neg	r14
 228:	f1 08       	sbc	r15, r1
 22a:	8d e2       	ldi	r24, 0x2D	; 45
 22c:	e9 df       	rcall	.-46     	; 0x200 <UartTransmitByte>
 22e:	c1 e0       	ldi	r28, 0x01	; 1
 230:	1e 2d       	mov	r17, r14
 232:	df 2d       	mov	r29, r15
 234:	01 c0       	rjmp	.+2      	; 0x238 <UartSendDec+0x28>
 236:	ce 2d       	mov	r28, r14
 238:	ee 24       	eor	r14, r14
 23a:	e3 94       	inc	r14
 23c:	ec 0e       	add	r14, r28
 23e:	01 2f       	mov	r16, r17
 240:	fd 2e       	mov	r15, r29
 242:	6c 2f       	mov	r22, r28
 244:	81 2f       	mov	r24, r17
 246:	9d 2f       	mov	r25, r29
 248:	55 d0       	rcall	.+170    	; 0x2f4 <Digit>
 24a:	88 23       	and	r24, r24
 24c:	a1 f3       	breq	.-24     	; 0x236 <UartSendDec+0x26>
 24e:	c6 30       	cpi	r28, 0x06	; 6
 250:	60 f4       	brcc	.+24     	; 0x26a <UartSendDec+0x5a>
 252:	6c 2f       	mov	r22, r28
 254:	80 2f       	mov	r24, r16
 256:	9f 2d       	mov	r25, r15
 258:	4d d0       	rcall	.+154    	; 0x2f4 <Digit>
 25a:	80 5d       	subi	r24, 0xD0	; 208
 25c:	d1 df       	rcall	.-94     	; 0x200 <UartTransmitByte>
 25e:	cf 5f       	subi	r28, 0xFF	; 255
 260:	c6 30       	cpi	r28, 0x06	; 6
 262:	b9 f7       	brne	.-18     	; 0x252 <UartSendDec+0x42>
 264:	02 c0       	rjmp	.+4      	; 0x26a <UartSendDec+0x5a>
 266:	80 e3       	ldi	r24, 0x30	; 48
 268:	cb df       	rcall	.-106    	; 0x200 <UartTransmitByte>
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <UartSendStr>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	88 81       	ld	r24, Y
 280:	88 23       	and	r24, r24
 282:	29 f0       	breq	.+10     	; 0x28e <UartSendStr+0x16>
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	bc df       	rcall	.-136    	; 0x200 <UartTransmitByte>
 288:	89 91       	ld	r24, Y+
 28a:	81 11       	cpse	r24, r1
 28c:	fc cf       	rjmp	.-8      	; 0x286 <UartSendStr+0xe>
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <UartInit>:

#define INTERRUPTS
/* функци€ инициализации: настройка ћ  на приЄм и передачу данных, 
длина сообщени€ Ц 8 бит, один —“ќѕ бит, без паритета, скорость обмена Ц 19200 бод */
void UartInit(void){
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	cd b7       	in	r28, 0x3d	; 61
 29a:	de b7       	in	r29, 0x3e	; 62
 29c:	28 97       	sbiw	r28, 0x08	; 8
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	f8 94       	cli
 2a2:	de bf       	out	0x3e, r29	; 62
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	cd bf       	out	0x3d, r28	; 61
	uint8_t word[]={"UART_OK"};
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	e0 e0       	ldi	r30, 0x00	; 0
 2ac:	f2 e0       	ldi	r31, 0x02	; 2
 2ae:	de 01       	movw	r26, r28
 2b0:	11 96       	adiw	r26, 0x01	; 1
 2b2:	01 90       	ld	r0, Z+
 2b4:	0d 92       	st	X+, r0
 2b6:	8a 95       	dec	r24
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <UartInit+0x1e>
	#ifdef INTERRUPTS
		UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2ba:	e1 ec       	ldi	r30, 0xC1	; 193
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 69       	ori	r24, 0x98	; 152
 2c2:	80 83       	st	Z, r24
	#endif
	#ifdef NO_INTERRUPTS
		UCSR0B|=(1<<RXEN0)|(1<<TXEN0);	
	#endif
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
 2c4:	e2 ec       	ldi	r30, 0xC2	; 194
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	86 60       	ori	r24, 0x06	; 6
 2cc:	80 83       	st	Z, r24
	//скорость передачи 19200 бод
	UBRR0H=0;
 2ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	//дл€ значени€ UBRR0L = 51 = 0x33	UBRR0L=0x33;
	UBRR0L=0x33;
 2d2:	83 e3       	ldi	r24, 0x33	; 51
 2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	// выводим в терминал слово TEST_OK
	UartSendStr(word);
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	cd df       	rcall	.-102    	; 0x278 <UartSendStr>
	// переходим в начало следующей строки
	UartTransmitByte('\r');
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	8f df       	rcall	.-226    	; 0x200 <UartTransmitByte>
}
 2e2:	28 96       	adiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <Digit>:
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
 2f4:	cf 93       	push	r28
 2f6:	f8 2f       	mov	r31, r24
 2f8:	c6 2f       	mov	r28, r22
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 2fa:	65 30       	cpi	r22, 0x05	; 5
 2fc:	09 f0       	breq	.+2      	; 0x300 <Digit+0xc>
 2fe:	3d c0       	rjmp	.+122    	; 0x37a <Digit+0x86>
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
		a=d%10; //выдел€ем очередной разр€д
 300:	28 2f       	mov	r18, r24
 302:	39 2f       	mov	r19, r25
 304:	ad ec       	ldi	r26, 0xCD	; 205
 306:	bc ec       	ldi	r27, 0xCC	; 204
 308:	49 d0       	rcall	.+146    	; 0x39c <__umulhisi3>
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	96 95       	lsr	r25
 314:	87 95       	ror	r24
 316:	9c 01       	movw	r18, r24
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	82 0f       	add	r24, r18
 32a:	93 1f       	adc	r25, r19
 32c:	f8 1b       	sub	r31, r24
 32e:	33 c0       	rjmp	.+102    	; 0x396 <Digit+0xa2>
 330:	9a 01       	movw	r18, r20
 332:	ad ec       	ldi	r26, 0xCD	; 205
 334:	bc ec       	ldi	r27, 0xCC	; 204
 336:	32 d0       	rcall	.+100    	; 0x39c <__umulhisi3>
 338:	96 95       	lsr	r25
 33a:	87 95       	ror	r24
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	9c 01       	movw	r18, r24
 346:	22 0f       	add	r18, r18
 348:	33 1f       	adc	r19, r19
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	82 0f       	add	r24, r18
 358:	93 1f       	adc	r25, r19
 35a:	f4 2f       	mov	r31, r20
 35c:	f8 1b       	sub	r31, r24
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
 35e:	ce 17       	cp	r28, r30
		d /= 10; //уменьшаем число в 10 раз
 360:	d1 f0       	breq	.+52     	; 0x396 <Digit+0xa2>
 362:	9a 01       	movw	r18, r20
 364:	1b d0       	rcall	.+54     	; 0x39c <__umulhisi3>
 366:	ac 01       	movw	r20, r24
 368:	56 95       	lsr	r21
 36a:	47 95       	ror	r20
 36c:	56 95       	lsr	r21
 36e:	47 95       	ror	r20
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	e1 50       	subi	r30, 0x01	; 1
#include "utils.h"

uint8_t Digit(uint16_t d, uint8_t m){
	uint8_t i=5, a;
	while(i){ //цикл по разр€дам числа
 376:	e1 f6       	brne	.-72     	; 0x330 <Digit+0x3c>
 378:	0e c0       	rjmp	.+28     	; 0x396 <Digit+0xa2>
		a=d%10; //выдел€ем очередной разр€д
		//выделен заданный разр€д - уходим
		if(i-- == m) break;
		d /= 10; //уменьшаем число в 10 раз
 37a:	28 2f       	mov	r18, r24
 37c:	39 2f       	mov	r19, r25
 37e:	ad ec       	ldi	r26, 0xCD	; 205
 380:	bc ec       	ldi	r27, 0xCC	; 204
 382:	0c d0       	rcall	.+24     	; 0x39c <__umulhisi3>
 384:	ac 01       	movw	r20, r24
 386:	56 95       	lsr	r21
 388:	47 95       	ror	r20
 38a:	56 95       	lsr	r21
 38c:	47 95       	ror	r20
 38e:	56 95       	lsr	r21
 390:	47 95       	ror	r20
 392:	e4 e0       	ldi	r30, 0x04	; 4
 394:	cd cf       	rjmp	.-102    	; 0x330 <Digit+0x3c>
	}
	return(a);
}
 396:	8f 2f       	mov	r24, r31
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__umulhisi3>:
 39c:	a2 9f       	mul	r26, r18
 39e:	b0 01       	movw	r22, r0
 3a0:	b3 9f       	mul	r27, r19
 3a2:	c0 01       	movw	r24, r0
 3a4:	a3 9f       	mul	r26, r19
 3a6:	70 0d       	add	r23, r0
 3a8:	81 1d       	adc	r24, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	91 1d       	adc	r25, r1
 3ae:	b2 9f       	mul	r27, r18
 3b0:	70 0d       	add	r23, r0
 3b2:	81 1d       	adc	r24, r1
 3b4:	11 24       	eor	r1, r1
 3b6:	91 1d       	adc	r25, r1
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
