
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b82  00000bf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2e  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004aa  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000024c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004db  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002ed7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  68:	07 63       	ori	r16, 0x37	; 55
  6a:	42 36       	cpi	r20, 0x62	; 98
  6c:	b7 9b       	sbis	0x16, 7	; 22
  6e:	d8 a7       	std	Y+40, r29	; 0x28
  70:	1a 39       	cpi	r17, 0x9A	; 154
  72:	68 56       	subi	r22, 0x68	; 104
  74:	18 ae       	std	Y+56, r1	; 0x38
  76:	ba ab       	std	Y+50, r27	; 0x32
  78:	55 8c       	ldd	r5, Z+29	; 0x1d
  7a:	1d 3c       	cpi	r17, 0xCD	; 205
  7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
  7e:	57 63       	ori	r21, 0x37	; 55
  80:	bd 6d       	ori	r27, 0xDD	; 221
  82:	ed fd       	.word	0xfded	; ????
  84:	75 3e       	cpi	r23, 0xE5	; 229
  86:	f6 17       	cp	r31, r22
  88:	72 31       	cpi	r23, 0x12	; 18
  8a:	bf 00       	.word	0x00bf	; ????
  8c:	00 00       	nop
  8e:	80 3f       	cpi	r24, 0xF0	; 240
  90:	08 00       	.word	0x0008	; ????
  92:	00 00       	nop
  94:	be 92       	st	-X, r11
  96:	24 49       	sbci	r18, 0x94	; 148
  98:	12 3e       	cpi	r17, 0xE2	; 226
  9a:	ab aa       	std	Y+51, r10	; 0x33
  9c:	aa 2a       	or	r10, r26
  9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
  a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
  a2:	4c 3e       	cpi	r20, 0xEC	; 236
  a4:	00 00       	nop
  a6:	00 80       	ld	r0, Z
  a8:	be ab       	std	Y+54, r27	; 0x36
  aa:	aa aa       	std	Y+50, r10	; 0x32
  ac:	aa 3e       	cpi	r26, 0xEA	; 234
  ae:	00 00       	nop
  b0:	00 00       	nop
  b2:	bf 00       	.word	0x00bf	; ????
  b4:	00 00       	nop
  b6:	80 3f       	cpi	r24, 0xF0	; 240
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	00 08       	sbc	r0, r0
  be:	41 78       	andi	r20, 0x81	; 129
  c0:	d3 bb       	out	0x13, r29	; 19
  c2:	43 87       	std	Z+11, r20	; 0x0b
  c4:	d1 13       	cpse	r29, r17
  c6:	3d 19       	sub	r19, r13
  c8:	0e 3c       	cpi	r16, 0xCE	; 206
  ca:	c3 bd       	out	0x23, r28	; 35
  cc:	42 82       	std	Z+2, r4	; 0x02
  ce:	ad 2b       	or	r26, r29
  d0:	3e 68       	ori	r19, 0x8E	; 142
  d2:	ec 82       	std	Y+4, r14	; 0x04
  d4:	76 be       	out	0x36, r7	; 54
  d6:	d9 8f       	std	Y+25, r29	; 0x19
  d8:	e1 a9       	ldd	r30, Z+49	; 0x31
  da:	3e 4c       	sbci	r19, 0xCE	; 206
  dc:	80 ef       	ldi	r24, 0xF0	; 240
  de:	ff be       	out	0x3f, r15	; 63
  e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <inverse+0x10>
  e2:	ff 7f       	andi	r31, 0xFF	; 255
  e4:	3f 00       	.word	0x003f	; ????
  e6:	00 00       	nop
	...

000000ea <__ctors_end>:
  ea:	11 24       	eor	r1, r1
  ec:	1f be       	out	0x3f, r1	; 63
  ee:	cf ef       	ldi	r28, 0xFF	; 255
  f0:	d8 e0       	ldi	r29, 0x08	; 8
  f2:	de bf       	out	0x3e, r29	; 62
  f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	e2 e8       	ldi	r30, 0x82	; 130
  fe:	fb e0       	ldi	r31, 0x0B	; 11
 100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
 102:	05 90       	lpm	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	a0 31       	cpi	r26, 0x10	; 16
 108:	b1 07       	cpc	r27, r17
 10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	a0 e1       	ldi	r26, 0x10	; 16
 110:	b1 e0       	ldi	r27, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
 114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
 116:	a0 31       	cpi	r26, 0x10	; 16
 118:	b2 07       	cpc	r27, r18
 11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
 11c:	0e 94 32 01 	call	0x264	; 0x264 <main>
 120:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <_exit>

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <uart_init>:
    data += digit;
  }
  while(1);
  // заканчиваем, когда увидели признак \r\n
  return data;
}
 128:	e1 ec       	ldi	r30, 0xC1	; 193
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 61       	ori	r24, 0x18	; 24
 130:	80 83       	st	Z, r24
 132:	e2 ec       	ldi	r30, 0xC2	; 194
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	86 60       	ori	r24, 0x06	; 6
 13a:	80 83       	st	Z, r24
 13c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 146:	08 95       	ret

00000148 <uart_transmit>:
 148:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	95 ff       	sbrs	r25, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <uart_transmit>
 150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 154:	08 95       	ret

00000156 <uart_transmit_str>:
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
 15c:	03 c0       	rjmp	.+6      	; 0x164 <uart_transmit_str+0xe>
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
 164:	88 81       	ld	r24, Y
 166:	81 11       	cpse	r24, r1
 168:	fa cf       	rjmp	.-12     	; 0x15e <uart_transmit_str+0x8>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <Digit>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	fc 01       	movw	r30, r24
 176:	d6 2f       	mov	r29, r22
 178:	45 e0       	ldi	r20, 0x05	; 5
 17a:	27 c0       	rjmp	.+78     	; 0x1ca <Digit+0x5a>
 17c:	9f 01       	movw	r18, r30
 17e:	ad ec       	ldi	r26, 0xCD	; 205
 180:	bc ec       	ldi	r27, 0xCC	; 204
 182:	0e 94 b0 05 	call	0xb60	; 0xb60 <__umulhisi3>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	96 95       	lsr	r25
 18c:	87 95       	ror	r24
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	9c 01       	movw	r18, r24
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	82 0f       	add	r24, r18
 1a6:	93 1f       	adc	r25, r19
 1a8:	ce 2f       	mov	r28, r30
 1aa:	c8 1b       	sub	r28, r24
 1ac:	5f ef       	ldi	r21, 0xFF	; 255
 1ae:	54 0f       	add	r21, r20
 1b0:	4d 17       	cp	r20, r29
 1b2:	69 f0       	breq	.+26     	; 0x1ce <Digit+0x5e>
 1b4:	9f 01       	movw	r18, r30
 1b6:	0e 94 b0 05 	call	0xb60	; 0xb60 <__umulhisi3>
 1ba:	fc 01       	movw	r30, r24
 1bc:	f6 95       	lsr	r31
 1be:	e7 95       	ror	r30
 1c0:	f6 95       	lsr	r31
 1c2:	e7 95       	ror	r30
 1c4:	f6 95       	lsr	r31
 1c6:	e7 95       	ror	r30
 1c8:	45 2f       	mov	r20, r21
 1ca:	41 11       	cpse	r20, r1
 1cc:	d7 cf       	rjmp	.-82     	; 0x17c <Digit+0xc>
 1ce:	8c 2f       	mov	r24, r28
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

000001d6 <uart_transmit_dec>:
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	8c 01       	movw	r16, r24
 1e0:	89 2b       	or	r24, r25
 1e2:	b9 f0       	breq	.+46     	; 0x212 <uart_transmit_dec+0x3c>
 1e4:	c1 e0       	ldi	r28, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <uart_transmit_dec+0x14>
 1e8:	cd 2f       	mov	r28, r29
 1ea:	d1 e0       	ldi	r29, 0x01	; 1
 1ec:	dc 0f       	add	r29, r28
 1ee:	6c 2f       	mov	r22, r28
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 b8 00 	call	0x170	; 0x170 <Digit>
 1f6:	88 23       	and	r24, r24
 1f8:	b9 f3       	breq	.-18     	; 0x1e8 <uart_transmit_dec+0x12>
 1fa:	08 c0       	rjmp	.+16     	; 0x20c <uart_transmit_dec+0x36>
 1fc:	6c 2f       	mov	r22, r28
 1fe:	c8 01       	movw	r24, r16
 200:	0e 94 b8 00 	call	0x170	; 0x170 <Digit>
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
 20a:	cf 5f       	subi	r28, 0xFF	; 255
 20c:	c6 30       	cpi	r28, 0x06	; 6
 20e:	b0 f3       	brcs	.-20     	; 0x1fc <uart_transmit_dec+0x26>
 210:	03 c0       	rjmp	.+6      	; 0x218 <uart_transmit_dec+0x42>
 212:	80 e3       	ldi	r24, 0x30	; 48
 214:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	1f 91       	pop	r17
 21e:	0f 91       	pop	r16
 220:	08 95       	ret

00000222 <readADC>:
  /* переменные, которые будут хранить результат
  преобразования АЦП, lbv–младшая, hbv–старшая части */
  uint8_t lbv=0, hbv=0;
  /* Питание – AVCC; правое выравнивание, номер канала
  АЦП - channel (входная переменная) */
  ADMUX |= (1<<REFS0) | channel;
 222:	ec e7       	ldi	r30, 0x7C	; 124
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	90 81       	ld	r25, Z
 228:	89 2b       	or	r24, r25
 22a:	80 64       	ori	r24, 0x40	; 64
 22c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22e:	85 e8       	ldi	r24, 0x85	; 133
 230:	8a 95       	dec	r24
 232:	f1 f7       	brne	.-4      	; 0x230 <readADC+0xe>
 234:	00 00       	nop
  _delay_us(25);
  //начать преобразование аналогового сигнала в цифру
  ADCSRA |= (1<<ADSC);
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
  /* Если бит ADIF = 0 – преобразование не окончено,
  если бит ADIF = 1 – преобразование окончено */
  while(!(ADCSRA & (1<<ADIF)));
 240:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 244:	84 ff       	sbrs	r24, 4
 246:	fc cf       	rjmp	.-8      	; 0x240 <readADC+0x1e>
  //сбросить ADIF – записать в него 1
  ADCSRA |= (1<<ADIF);
 248:	ea e7       	ldi	r30, 0x7A	; 122
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	80 83       	st	Z, r24
  //переприсваиваем значения регистров
  lbv = ADCL;
 252:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  hbv = ADCH;
 256:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  //«склеиваем» результат
  return ((hbv<<8)|lbv);
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	98 2f       	mov	r25, r24
 25e:	88 27       	eor	r24, r24
}
 260:	82 2b       	or	r24, r18
 262:	08 95       	ret

00000264 <main>:

int main(void)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	60 97       	sbiw	r28, 0x10	; 16
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
  uint8_t i;
  uint16_t result, av_val;
  uint8_t word[] = {"TEST"}, err[] = {"dist_error"};
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	e0 e0       	ldi	r30, 0x00	; 0
 27c:	f1 e0       	ldi	r31, 0x01	; 1
 27e:	de 01       	movw	r26, r28
 280:	11 96       	adiw	r26, 0x01	; 1
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x1e>
 28a:	8b e0       	ldi	r24, 0x0B	; 11
 28c:	e5 e0       	ldi	r30, 0x05	; 5
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	de 01       	movw	r26, r28
 292:	16 96       	adiw	r26, 0x06	; 6
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	8a 95       	dec	r24
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	80 e7       	ldi	r24, 0x70	; 112
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <main+0x3e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <main+0x48>
 2ac:	00 00       	nop
  // задержка для завершения процесса программирования
  _delay_ms(50);
  // подключаем диод к ШИМ каналу А таймера №0
  DDRD |= (1<<6);
 2ae:	8a b1       	in	r24, 0x0a	; 10
 2b0:	80 64       	ori	r24, 0x40	; 64
 2b2:	8a b9       	out	0x0a, r24	; 10
  DDRB |= (1<<1);
 2b4:	84 b1       	in	r24, 0x04	; 4
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	84 b9       	out	0x04, r24	; 4
  // настраиваем ШИМ
  TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 2ba:	83 e8       	ldi	r24, 0x83	; 131
 2bc:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1<<CS00);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	85 bd       	out	0x25, r24	; 37
  TCCR1A = (1<<COM1A0);
 2c2:	80 e4       	ldi	r24, 0x40	; 64
 2c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = (1<<WGM12) | (1<<CS10);
 2c8:	89 e0       	ldi	r24, 0x09	; 9
 2ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  //включить АЦП и выставить предделитель на 4
  ADCSRA |= (1<<ADEN) | (1<<ADPS1);
 2ce:	ea e7       	ldi	r30, 0x7A	; 122
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	82 68       	ori	r24, 0x82	; 130
 2d6:	80 83       	st	Z, r24
  uart_init();
 2d8:	0e 94 94 00 	call	0x128	; 0x128 <uart_init>
  // выводим в терминал слово TEST
  uart_transmit_str(word);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	0e 94 ab 00 	call	0x156	; 0x156 <uart_transmit_str>
  // переходим в начало следующей строки
  uart_transmit('\r');
 2e4:	8d e0       	ldi	r24, 0x0D	; 13
 2e6:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
  while(1)
  {
    result=0;
 2ea:	e1 2c       	mov	r14, r1
 2ec:	f1 2c       	mov	r15, r1
    //совершаем пять измерений через каждые 50 мс
    for(i=0; i<5; i++)
 2ee:	10 e0       	ldi	r17, 0x00	; 0
 2f0:	0f c0       	rjmp	.+30     	; 0x310 <main+0xac>
    {
      result+=readADC(1); //дальномер подключен к ADC1
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 11 01 	call	0x222	; 0x222 <readADC>
 2f8:	e8 0e       	add	r14, r24
 2fa:	f9 1e       	adc	r15, r25
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	80 e7       	ldi	r24, 0x70	; 112
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x9e>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0xa8>
 30c:	00 00       	nop
  uart_transmit('\r');
  while(1)
  {
    result=0;
    //совершаем пять измерений через каждые 50 мс
    for(i=0; i<5; i++)
 30e:	1f 5f       	subi	r17, 0xFF	; 255
 310:	15 30       	cpi	r17, 0x05	; 5
 312:	78 f3       	brcs	.-34     	; 0x2f2 <main+0x8e>
    {
      result+=readADC(1); //дальномер подключен к ADC1
      _delay_ms(50);
    }
    //получаем среднее арифметическое из пяти измерений
    av_val=result/5;
 314:	97 01       	movw	r18, r14
 316:	ad ec       	ldi	r26, 0xCD	; 205
 318:	bc ec       	ldi	r27, 0xCC	; 204
 31a:	0e 94 b0 05 	call	0xb60	; 0xb60 <__umulhisi3>
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
    //5 В АЦП / 1024 уровней АЦП = 0.0048828125
    float sens_out = av_val*0.0048828125;
 326:	bc 01       	movw	r22, r24
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 95 02 	call	0x52a	; 0x52a <__floatunsisf>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	40 ea       	ldi	r20, 0xA0	; 160
 336:	5b e3       	ldi	r21, 0x3B	; 59
 338:	0e 94 4c 03 	call	0x698	; 0x698 <__mulsf3>
    //восстанавливаем график датчика (см. рис. 4.10.5)
    float dist = 29.988*pow(sens_out,-1.173);
 33c:	2d ed       	ldi	r18, 0xDD	; 221
 33e:	34 e2       	ldi	r19, 0x24	; 36
 340:	46 e9       	ldi	r20, 0x96	; 150
 342:	5f eb       	ldi	r21, 0xBF	; 191
 344:	0e 94 b9 03 	call	0x772	; 0x772 <pow>
 348:	2d e6       	ldi	r18, 0x6D	; 109
 34a:	37 ee       	ldi	r19, 0xE7	; 231
 34c:	4f ee       	ldi	r20, 0xEF	; 239
 34e:	51 e4       	ldi	r21, 0x41	; 65
 350:	0e 94 4c 03 	call	0x698	; 0x698 <__mulsf3>
 354:	6b 01       	movw	r12, r22
 356:	7c 01       	movw	r14, r24
	if((dist <= 80) && (dist >= 10))
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 ea       	ldi	r20, 0xA0	; 160
 35e:	52 e4       	ldi	r21, 0x42	; 66
 360:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__cmpsf2>
 364:	18 16       	cp	r1, r24
 366:	c4 f1       	brlt	.+112    	; 0x3d8 <main+0x174>
 368:	20 e0       	ldi	r18, 0x00	; 0
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	40 e2       	ldi	r20, 0x20	; 32
 36e:	51 e4       	ldi	r21, 0x41	; 65
 370:	c7 01       	movw	r24, r14
 372:	b6 01       	movw	r22, r12
 374:	0e 94 47 03 	call	0x68e	; 0x68e <__gesf2>
 378:	88 23       	and	r24, r24
 37a:	74 f1       	brlt	.+92     	; 0x3d8 <main+0x174>
	{
		OCR0A = ((-4)*dist)+295;
 37c:	20 e0       	ldi	r18, 0x00	; 0
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	40 e8       	ldi	r20, 0x80	; 128
 382:	50 ec       	ldi	r21, 0xC0	; 192
 384:	c7 01       	movw	r24, r14
 386:	b6 01       	movw	r22, r12
 388:	0e 94 4c 03 	call	0x698	; 0x698 <__mulsf3>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	30 e8       	ldi	r19, 0x80	; 128
 390:	43 e9       	ldi	r20, 0x93	; 147
 392:	53 e4       	ldi	r21, 0x43	; 67
 394:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3>
 398:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fixunssfsi>
 39c:	67 bd       	out	0x27, r22	; 39
		if(dist<=15) OCR1A = 8000;
 39e:	20 e0       	ldi	r18, 0x00	; 0
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	40 e7       	ldi	r20, 0x70	; 112
 3a4:	51 e4       	ldi	r21, 0x41	; 65
 3a6:	c7 01       	movw	r24, r14
 3a8:	b6 01       	movw	r22, r12
 3aa:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__cmpsf2>
 3ae:	18 16       	cp	r1, r24
 3b0:	3c f0       	brlt	.+14     	; 0x3c0 <main+0x15c>
 3b2:	80 e4       	ldi	r24, 0x40	; 64
 3b4:	9f e1       	ldi	r25, 0x1F	; 31
 3b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <main+0x164>
		else OCR1A = 0;
 3c0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		uart_transmit_dec((uint16_t)dist); 
 3c8:	c7 01       	movw	r24, r14
 3ca:	b6 01       	movw	r22, r12
 3cc:	0e 94 66 02 	call	0x4cc	; 0x4cc <__fixunssfsi>
 3d0:	cb 01       	movw	r24, r22
 3d2:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <uart_transmit_dec>
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <main+0x17c>
	}
	else  uart_transmit_str(err);
 3d8:	ce 01       	movw	r24, r28
 3da:	06 96       	adiw	r24, 0x06	; 6
 3dc:	0e 94 ab 00 	call	0x156	; 0x156 <uart_transmit_str>
	uart_transmit('\r');
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	0e 94 a4 00 	call	0x148	; 0x148 <uart_transmit>
  }
 3e6:	81 cf       	rjmp	.-254    	; 0x2ea <main+0x86>

000003e8 <__subsf3>:
 3e8:	50 58       	subi	r21, 0x80	; 128

000003ea <__addsf3>:
 3ea:	bb 27       	eor	r27, r27
 3ec:	aa 27       	eor	r26, r26
 3ee:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3x>
 3f2:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 3f6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 3fa:	38 f0       	brcs	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fc:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 400:	20 f0       	brcs	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 402:	39 f4       	brne	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	9f 3f       	cpi	r25, 0xFF	; 255
 406:	19 f4       	brne	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 408:	26 f4       	brtc	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 40e:	0e f4       	brtc	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 410:	e0 95       	com	r30
 412:	e7 fb       	bst	r30, 7
 414:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>

00000418 <__addsf3x>:
 418:	e9 2f       	mov	r30, r25
 41a:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 41e:	58 f3       	brcs	.-42     	; 0x3f6 <__addsf3+0xc>
 420:	ba 17       	cp	r27, r26
 422:	62 07       	cpc	r22, r18
 424:	73 07       	cpc	r23, r19
 426:	84 07       	cpc	r24, r20
 428:	95 07       	cpc	r25, r21
 42a:	20 f0       	brcs	.+8      	; 0x434 <__addsf3x+0x1c>
 42c:	79 f4       	brne	.+30     	; 0x44c <__addsf3x+0x34>
 42e:	a6 f5       	brtc	.+104    	; 0x498 <__addsf3x+0x80>
 430:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 434:	0e f4       	brtc	.+2      	; 0x438 <__addsf3x+0x20>
 436:	e0 95       	com	r30
 438:	0b 2e       	mov	r0, r27
 43a:	ba 2f       	mov	r27, r26
 43c:	a0 2d       	mov	r26, r0
 43e:	0b 01       	movw	r0, r22
 440:	b9 01       	movw	r22, r18
 442:	90 01       	movw	r18, r0
 444:	0c 01       	movw	r0, r24
 446:	ca 01       	movw	r24, r20
 448:	a0 01       	movw	r20, r0
 44a:	11 24       	eor	r1, r1
 44c:	ff 27       	eor	r31, r31
 44e:	59 1b       	sub	r21, r25
 450:	99 f0       	breq	.+38     	; 0x478 <__addsf3x+0x60>
 452:	59 3f       	cpi	r21, 0xF9	; 249
 454:	50 f4       	brcc	.+20     	; 0x46a <__addsf3x+0x52>
 456:	50 3e       	cpi	r21, 0xE0	; 224
 458:	68 f1       	brcs	.+90     	; 0x4b4 <__addsf3x+0x9c>
 45a:	1a 16       	cp	r1, r26
 45c:	f0 40       	sbci	r31, 0x00	; 0
 45e:	a2 2f       	mov	r26, r18
 460:	23 2f       	mov	r18, r19
 462:	34 2f       	mov	r19, r20
 464:	44 27       	eor	r20, r20
 466:	58 5f       	subi	r21, 0xF8	; 248
 468:	f3 cf       	rjmp	.-26     	; 0x450 <__addsf3x+0x38>
 46a:	46 95       	lsr	r20
 46c:	37 95       	ror	r19
 46e:	27 95       	ror	r18
 470:	a7 95       	ror	r26
 472:	f0 40       	sbci	r31, 0x00	; 0
 474:	53 95       	inc	r21
 476:	c9 f7       	brne	.-14     	; 0x46a <__addsf3x+0x52>
 478:	7e f4       	brtc	.+30     	; 0x498 <__addsf3x+0x80>
 47a:	1f 16       	cp	r1, r31
 47c:	ba 0b       	sbc	r27, r26
 47e:	62 0b       	sbc	r22, r18
 480:	73 0b       	sbc	r23, r19
 482:	84 0b       	sbc	r24, r20
 484:	ba f0       	brmi	.+46     	; 0x4b4 <__addsf3x+0x9c>
 486:	91 50       	subi	r25, 0x01	; 1
 488:	a1 f0       	breq	.+40     	; 0x4b2 <__addsf3x+0x9a>
 48a:	ff 0f       	add	r31, r31
 48c:	bb 1f       	adc	r27, r27
 48e:	66 1f       	adc	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	c2 f7       	brpl	.-16     	; 0x486 <__addsf3x+0x6e>
 496:	0e c0       	rjmp	.+28     	; 0x4b4 <__addsf3x+0x9c>
 498:	ba 0f       	add	r27, r26
 49a:	62 1f       	adc	r22, r18
 49c:	73 1f       	adc	r23, r19
 49e:	84 1f       	adc	r24, r20
 4a0:	48 f4       	brcc	.+18     	; 0x4b4 <__addsf3x+0x9c>
 4a2:	87 95       	ror	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f7 95       	ror	r31
 4ac:	9e 3f       	cpi	r25, 0xFE	; 254
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__addsf3x+0x9a>
 4b0:	b0 cf       	rjmp	.-160    	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 4b2:	93 95       	inc	r25
 4b4:	88 0f       	add	r24, r24
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__addsf3x+0xa2>
 4b8:	99 27       	eor	r25, r25
 4ba:	ee 0f       	add	r30, r30
 4bc:	97 95       	ror	r25
 4be:	87 95       	ror	r24
 4c0:	08 95       	ret

000004c2 <__cmpsf2>:
 4c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_cmp>
 4c6:	08 f4       	brcc	.+2      	; 0x4ca <__cmpsf2+0x8>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	08 95       	ret

000004cc <__fixunssfsi>:
 4cc:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 4d0:	88 f0       	brcs	.+34     	; 0x4f4 <__fixunssfsi+0x28>
 4d2:	9f 57       	subi	r25, 0x7F	; 127
 4d4:	98 f0       	brcs	.+38     	; 0x4fc <__fixunssfsi+0x30>
 4d6:	b9 2f       	mov	r27, r25
 4d8:	99 27       	eor	r25, r25
 4da:	b7 51       	subi	r27, 0x17	; 23
 4dc:	b0 f0       	brcs	.+44     	; 0x50a <__fixunssfsi+0x3e>
 4de:	e1 f0       	breq	.+56     	; 0x518 <__fixunssfsi+0x4c>
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	1a f0       	brmi	.+6      	; 0x4f0 <__fixunssfsi+0x24>
 4ea:	ba 95       	dec	r27
 4ec:	c9 f7       	brne	.-14     	; 0x4e0 <__fixunssfsi+0x14>
 4ee:	14 c0       	rjmp	.+40     	; 0x518 <__fixunssfsi+0x4c>
 4f0:	b1 30       	cpi	r27, 0x01	; 1
 4f2:	91 f0       	breq	.+36     	; 0x518 <__fixunssfsi+0x4c>
 4f4:	0e 94 40 03 	call	0x680	; 0x680 <__fp_zero>
 4f8:	b1 e0       	ldi	r27, 0x01	; 1
 4fa:	08 95       	ret
 4fc:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 500:	67 2f       	mov	r22, r23
 502:	78 2f       	mov	r23, r24
 504:	88 27       	eor	r24, r24
 506:	b8 5f       	subi	r27, 0xF8	; 248
 508:	39 f0       	breq	.+14     	; 0x518 <__fixunssfsi+0x4c>
 50a:	b9 3f       	cpi	r27, 0xF9	; 249
 50c:	cc f3       	brlt	.-14     	; 0x500 <__fixunssfsi+0x34>
 50e:	86 95       	lsr	r24
 510:	77 95       	ror	r23
 512:	67 95       	ror	r22
 514:	b3 95       	inc	r27
 516:	d9 f7       	brne	.-10     	; 0x50e <__fixunssfsi+0x42>
 518:	3e f4       	brtc	.+14     	; 0x528 <__fixunssfsi+0x5c>
 51a:	90 95       	com	r25
 51c:	80 95       	com	r24
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	8f 4f       	sbci	r24, 0xFF	; 255
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__floatunsisf>:
 52a:	e8 94       	clt
 52c:	09 c0       	rjmp	.+18     	; 0x540 <__floatsisf+0x12>

0000052e <__floatsisf>:
 52e:	97 fb       	bst	r25, 7
 530:	3e f4       	brtc	.+14     	; 0x540 <__floatsisf+0x12>
 532:	90 95       	com	r25
 534:	80 95       	com	r24
 536:	70 95       	com	r23
 538:	61 95       	neg	r22
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	99 23       	and	r25, r25
 542:	a9 f0       	breq	.+42     	; 0x56e <__floatsisf+0x40>
 544:	f9 2f       	mov	r31, r25
 546:	96 e9       	ldi	r25, 0x96	; 150
 548:	bb 27       	eor	r27, r27
 54a:	93 95       	inc	r25
 54c:	f6 95       	lsr	r31
 54e:	87 95       	ror	r24
 550:	77 95       	ror	r23
 552:	67 95       	ror	r22
 554:	b7 95       	ror	r27
 556:	f1 11       	cpse	r31, r1
 558:	f8 cf       	rjmp	.-16     	; 0x54a <__floatsisf+0x1c>
 55a:	fa f4       	brpl	.+62     	; 0x59a <__floatsisf+0x6c>
 55c:	bb 0f       	add	r27, r27
 55e:	11 f4       	brne	.+4      	; 0x564 <__floatsisf+0x36>
 560:	60 ff       	sbrs	r22, 0
 562:	1b c0       	rjmp	.+54     	; 0x59a <__floatsisf+0x6c>
 564:	6f 5f       	subi	r22, 0xFF	; 255
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	8f 4f       	sbci	r24, 0xFF	; 255
 56a:	9f 4f       	sbci	r25, 0xFF	; 255
 56c:	16 c0       	rjmp	.+44     	; 0x59a <__floatsisf+0x6c>
 56e:	88 23       	and	r24, r24
 570:	11 f0       	breq	.+4      	; 0x576 <__floatsisf+0x48>
 572:	96 e9       	ldi	r25, 0x96	; 150
 574:	11 c0       	rjmp	.+34     	; 0x598 <__floatsisf+0x6a>
 576:	77 23       	and	r23, r23
 578:	21 f0       	breq	.+8      	; 0x582 <__floatsisf+0x54>
 57a:	9e e8       	ldi	r25, 0x8E	; 142
 57c:	87 2f       	mov	r24, r23
 57e:	76 2f       	mov	r23, r22
 580:	05 c0       	rjmp	.+10     	; 0x58c <__floatsisf+0x5e>
 582:	66 23       	and	r22, r22
 584:	71 f0       	breq	.+28     	; 0x5a2 <__floatsisf+0x74>
 586:	96 e8       	ldi	r25, 0x86	; 134
 588:	86 2f       	mov	r24, r22
 58a:	70 e0       	ldi	r23, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	2a f0       	brmi	.+10     	; 0x59a <__floatsisf+0x6c>
 590:	9a 95       	dec	r25
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	da f7       	brpl	.-10     	; 0x590 <__floatsisf+0x62>
 59a:	88 0f       	add	r24, r24
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret

000005a4 <__fp_cmp>:
 5a4:	99 0f       	add	r25, r25
 5a6:	00 08       	sbc	r0, r0
 5a8:	55 0f       	add	r21, r21
 5aa:	aa 0b       	sbc	r26, r26
 5ac:	e0 e8       	ldi	r30, 0x80	; 128
 5ae:	fe ef       	ldi	r31, 0xFE	; 254
 5b0:	16 16       	cp	r1, r22
 5b2:	17 06       	cpc	r1, r23
 5b4:	e8 07       	cpc	r30, r24
 5b6:	f9 07       	cpc	r31, r25
 5b8:	c0 f0       	brcs	.+48     	; 0x5ea <__fp_cmp+0x46>
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	e4 07       	cpc	r30, r20
 5c0:	f5 07       	cpc	r31, r21
 5c2:	98 f0       	brcs	.+38     	; 0x5ea <__fp_cmp+0x46>
 5c4:	62 1b       	sub	r22, r18
 5c6:	73 0b       	sbc	r23, r19
 5c8:	84 0b       	sbc	r24, r20
 5ca:	95 0b       	sbc	r25, r21
 5cc:	39 f4       	brne	.+14     	; 0x5dc <__fp_cmp+0x38>
 5ce:	0a 26       	eor	r0, r26
 5d0:	61 f0       	breq	.+24     	; 0x5ea <__fp_cmp+0x46>
 5d2:	23 2b       	or	r18, r19
 5d4:	24 2b       	or	r18, r20
 5d6:	25 2b       	or	r18, r21
 5d8:	21 f4       	brne	.+8      	; 0x5e2 <__fp_cmp+0x3e>
 5da:	08 95       	ret
 5dc:	0a 26       	eor	r0, r26
 5de:	09 f4       	brne	.+2      	; 0x5e2 <__fp_cmp+0x3e>
 5e0:	a1 40       	sbci	r26, 0x01	; 1
 5e2:	a6 95       	lsr	r26
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	81 1d       	adc	r24, r1
 5e8:	81 1d       	adc	r24, r1
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__gesf2>:
 68e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_cmp>
 692:	08 f4       	brcc	.+2      	; 0x696 <__gesf2+0x8>
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	08 95       	ret

00000698 <__mulsf3>:
 698:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3x>
 69c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 6a0:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 6a4:	38 f0       	brcs	.+14     	; 0x6b4 <__mulsf3+0x1c>
 6a6:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 6aa:	20 f0       	brcs	.+8      	; 0x6b4 <__mulsf3+0x1c>
 6ac:	95 23       	and	r25, r21
 6ae:	11 f0       	breq	.+4      	; 0x6b4 <__mulsf3+0x1c>
 6b0:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 6b4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 6b8:	11 24       	eor	r1, r1
 6ba:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>

000006be <__mulsf3x>:
 6be:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 6c2:	70 f3       	brcs	.-36     	; 0x6a0 <__mulsf3+0x8>

000006c4 <__mulsf3_pse>:
 6c4:	95 9f       	mul	r25, r21
 6c6:	c1 f3       	breq	.-16     	; 0x6b8 <__mulsf3+0x20>
 6c8:	95 0f       	add	r25, r21
 6ca:	50 e0       	ldi	r21, 0x00	; 0
 6cc:	55 1f       	adc	r21, r21
 6ce:	62 9f       	mul	r22, r18
 6d0:	f0 01       	movw	r30, r0
 6d2:	72 9f       	mul	r23, r18
 6d4:	bb 27       	eor	r27, r27
 6d6:	f0 0d       	add	r31, r0
 6d8:	b1 1d       	adc	r27, r1
 6da:	63 9f       	mul	r22, r19
 6dc:	aa 27       	eor	r26, r26
 6de:	f0 0d       	add	r31, r0
 6e0:	b1 1d       	adc	r27, r1
 6e2:	aa 1f       	adc	r26, r26
 6e4:	64 9f       	mul	r22, r20
 6e6:	66 27       	eor	r22, r22
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	66 1f       	adc	r22, r22
 6ee:	82 9f       	mul	r24, r18
 6f0:	22 27       	eor	r18, r18
 6f2:	b0 0d       	add	r27, r0
 6f4:	a1 1d       	adc	r26, r1
 6f6:	62 1f       	adc	r22, r18
 6f8:	73 9f       	mul	r23, r19
 6fa:	b0 0d       	add	r27, r0
 6fc:	a1 1d       	adc	r26, r1
 6fe:	62 1f       	adc	r22, r18
 700:	83 9f       	mul	r24, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	22 1f       	adc	r18, r18
 708:	74 9f       	mul	r23, r20
 70a:	33 27       	eor	r19, r19
 70c:	a0 0d       	add	r26, r0
 70e:	61 1d       	adc	r22, r1
 710:	23 1f       	adc	r18, r19
 712:	84 9f       	mul	r24, r20
 714:	60 0d       	add	r22, r0
 716:	21 1d       	adc	r18, r1
 718:	82 2f       	mov	r24, r18
 71a:	76 2f       	mov	r23, r22
 71c:	6a 2f       	mov	r22, r26
 71e:	11 24       	eor	r1, r1
 720:	9f 57       	subi	r25, 0x7F	; 127
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	9a f0       	brmi	.+38     	; 0x74c <__mulsf3_pse+0x88>
 726:	f1 f0       	breq	.+60     	; 0x764 <__mulsf3_pse+0xa0>
 728:	88 23       	and	r24, r24
 72a:	4a f0       	brmi	.+18     	; 0x73e <__mulsf3_pse+0x7a>
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	bb 1f       	adc	r27, r27
 732:	66 1f       	adc	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	88 1f       	adc	r24, r24
 738:	91 50       	subi	r25, 0x01	; 1
 73a:	50 40       	sbci	r21, 0x00	; 0
 73c:	a9 f7       	brne	.-22     	; 0x728 <__mulsf3_pse+0x64>
 73e:	9e 3f       	cpi	r25, 0xFE	; 254
 740:	51 05       	cpc	r21, r1
 742:	80 f0       	brcs	.+32     	; 0x764 <__mulsf3_pse+0xa0>
 744:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 748:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	e4 f3       	brlt	.-8      	; 0x748 <__mulsf3_pse+0x84>
 750:	98 3e       	cpi	r25, 0xE8	; 232
 752:	d4 f3       	brlt	.-12     	; 0x748 <__mulsf3_pse+0x84>
 754:	86 95       	lsr	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f7 95       	ror	r31
 75e:	e7 95       	ror	r30
 760:	9f 5f       	subi	r25, 0xFF	; 255
 762:	c1 f7       	brne	.-16     	; 0x754 <__mulsf3_pse+0x90>
 764:	fe 2b       	or	r31, r30
 766:	88 0f       	add	r24, r24
 768:	91 1d       	adc	r25, r1
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <pow>:
 772:	fa 01       	movw	r30, r20
 774:	ee 0f       	add	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	30 96       	adiw	r30, 0x00	; 0
 77a:	21 05       	cpc	r18, r1
 77c:	31 05       	cpc	r19, r1
 77e:	a1 f1       	breq	.+104    	; 0x7e8 <pow+0x76>
 780:	61 15       	cp	r22, r1
 782:	71 05       	cpc	r23, r1
 784:	61 f4       	brne	.+24     	; 0x79e <pow+0x2c>
 786:	80 38       	cpi	r24, 0x80	; 128
 788:	bf e3       	ldi	r27, 0x3F	; 63
 78a:	9b 07       	cpc	r25, r27
 78c:	49 f1       	breq	.+82     	; 0x7e0 <pow+0x6e>
 78e:	68 94       	set
 790:	90 38       	cpi	r25, 0x80	; 128
 792:	81 05       	cpc	r24, r1
 794:	61 f0       	breq	.+24     	; 0x7ae <pow+0x3c>
 796:	80 38       	cpi	r24, 0x80	; 128
 798:	bf ef       	ldi	r27, 0xFF	; 255
 79a:	9b 07       	cpc	r25, r27
 79c:	41 f0       	breq	.+16     	; 0x7ae <pow+0x3c>
 79e:	99 23       	and	r25, r25
 7a0:	4a f5       	brpl	.+82     	; 0x7f4 <pow+0x82>
 7a2:	ff 3f       	cpi	r31, 0xFF	; 255
 7a4:	e1 05       	cpc	r30, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	21 05       	cpc	r18, r1
 7aa:	19 f1       	breq	.+70     	; 0x7f2 <pow+0x80>
 7ac:	e8 94       	clt
 7ae:	08 94       	sec
 7b0:	e7 95       	ror	r30
 7b2:	d9 01       	movw	r26, r18
 7b4:	aa 23       	and	r26, r26
 7b6:	29 f4       	brne	.+10     	; 0x7c2 <pow+0x50>
 7b8:	ab 2f       	mov	r26, r27
 7ba:	be 2f       	mov	r27, r30
 7bc:	f8 5f       	subi	r31, 0xF8	; 248
 7be:	d0 f3       	brcs	.-12     	; 0x7b4 <pow+0x42>
 7c0:	10 c0       	rjmp	.+32     	; 0x7e2 <pow+0x70>
 7c2:	ff 5f       	subi	r31, 0xFF	; 255
 7c4:	70 f4       	brcc	.+28     	; 0x7e2 <pow+0x70>
 7c6:	a6 95       	lsr	r26
 7c8:	e0 f7       	brcc	.-8      	; 0x7c2 <pow+0x50>
 7ca:	f7 39       	cpi	r31, 0x97	; 151
 7cc:	50 f0       	brcs	.+20     	; 0x7e2 <pow+0x70>
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <pow+0x64>
 7d0:	ff 3a       	cpi	r31, 0xAF	; 175
 7d2:	38 f4       	brcc	.+14     	; 0x7e2 <pow+0x70>
 7d4:	9f 77       	andi	r25, 0x7F	; 127
 7d6:	9f 93       	push	r25
 7d8:	0d d0       	rcall	.+26     	; 0x7f4 <pow+0x82>
 7da:	0f 90       	pop	r0
 7dc:	07 fc       	sbrc	r0, 7
 7de:	90 58       	subi	r25, 0x80	; 128
 7e0:	08 95       	ret
 7e2:	46 f0       	brts	.+16     	; 0x7f4 <pow+0x82>
 7e4:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 7e8:	60 e0       	ldi	r22, 0x00	; 0
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	80 e8       	ldi	r24, 0x80	; 128
 7ee:	9f e3       	ldi	r25, 0x3F	; 63
 7f0:	08 95       	ret
 7f2:	4f e7       	ldi	r20, 0x7F	; 127
 7f4:	9f 77       	andi	r25, 0x7F	; 127
 7f6:	5f 93       	push	r21
 7f8:	4f 93       	push	r20
 7fa:	3f 93       	push	r19
 7fc:	2f 93       	push	r18
 7fe:	0e 94 b4 04 	call	0x968	; 0x968 <log>
 802:	2f 91       	pop	r18
 804:	3f 91       	pop	r19
 806:	4f 91       	pop	r20
 808:	5f 91       	pop	r21
 80a:	0e 94 4c 03 	call	0x698	; 0x698 <__mulsf3>
 80e:	0c 94 11 04 	jmp	0x822	; 0x822 <exp>
 812:	29 f4       	brne	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 814:	16 f0       	brts	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 816:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 81a:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 81e:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>

00000822 <exp>:
 822:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 826:	a8 f3       	brcs	.-22     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 828:	96 38       	cpi	r25, 0x86	; 134
 82a:	a0 f7       	brcc	.-24     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 82c:	07 f8       	bld	r0, 7
 82e:	0f 92       	push	r0
 830:	e8 94       	clt
 832:	2b e3       	ldi	r18, 0x3B	; 59
 834:	3a ea       	ldi	r19, 0xAA	; 170
 836:	48 eb       	ldi	r20, 0xB8	; 184
 838:	5f e7       	ldi	r21, 0x7F	; 127
 83a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__mulsf3_pse>
 83e:	0f 92       	push	r0
 840:	0f 92       	push	r0
 842:	0f 92       	push	r0
 844:	4d b7       	in	r20, 0x3d	; 61
 846:	5e b7       	in	r21, 0x3e	; 62
 848:	0f 92       	push	r0
 84a:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <modf>
 84e:	e8 e6       	ldi	r30, 0x68	; 104
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	0e 94 43 04 	call	0x886	; 0x886 <__fp_powser>
 856:	4f 91       	pop	r20
 858:	5f 91       	pop	r21
 85a:	ef 91       	pop	r30
 85c:	ff 91       	pop	r31
 85e:	e5 95       	asr	r30
 860:	ee 1f       	adc	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	49 f0       	breq	.+18     	; 0x878 <exp+0x56>
 866:	fe 57       	subi	r31, 0x7E	; 126
 868:	e0 68       	ori	r30, 0x80	; 128
 86a:	44 27       	eor	r20, r20
 86c:	ee 0f       	add	r30, r30
 86e:	44 1f       	adc	r20, r20
 870:	fa 95       	dec	r31
 872:	e1 f7       	brne	.-8      	; 0x86c <exp+0x4a>
 874:	41 95       	neg	r20
 876:	55 0b       	sbc	r21, r21
 878:	0e 94 76 04 	call	0x8ec	; 0x8ec <ldexp>
 87c:	0f 90       	pop	r0
 87e:	07 fe       	sbrs	r0, 7
 880:	0c 94 6a 04 	jmp	0x8d4	; 0x8d4 <inverse>
 884:	08 95       	ret

00000886 <__fp_powser>:
 886:	df 93       	push	r29
 888:	cf 93       	push	r28
 88a:	1f 93       	push	r17
 88c:	0f 93       	push	r16
 88e:	ff 92       	push	r15
 890:	ef 92       	push	r14
 892:	df 92       	push	r13
 894:	7b 01       	movw	r14, r22
 896:	8c 01       	movw	r16, r24
 898:	68 94       	set
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__fp_powser+0x22>
 89c:	da 2e       	mov	r13, r26
 89e:	ef 01       	movw	r28, r30
 8a0:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3x>
 8a4:	fe 01       	movw	r30, r28
 8a6:	e8 94       	clt
 8a8:	a5 91       	lpm	r26, Z+
 8aa:	25 91       	lpm	r18, Z+
 8ac:	35 91       	lpm	r19, Z+
 8ae:	45 91       	lpm	r20, Z+
 8b0:	55 91       	lpm	r21, Z+
 8b2:	a6 f3       	brts	.-24     	; 0x89c <__fp_powser+0x16>
 8b4:	ef 01       	movw	r28, r30
 8b6:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3x>
 8ba:	fe 01       	movw	r30, r28
 8bc:	97 01       	movw	r18, r14
 8be:	a8 01       	movw	r20, r16
 8c0:	da 94       	dec	r13
 8c2:	69 f7       	brne	.-38     	; 0x89e <__fp_powser+0x18>
 8c4:	df 90       	pop	r13
 8c6:	ef 90       	pop	r14
 8c8:	ff 90       	pop	r15
 8ca:	0f 91       	pop	r16
 8cc:	1f 91       	pop	r17
 8ce:	cf 91       	pop	r28
 8d0:	df 91       	pop	r29
 8d2:	08 95       	ret

000008d4 <inverse>:
 8d4:	9b 01       	movw	r18, r22
 8d6:	ac 01       	movw	r20, r24
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	70 e0       	ldi	r23, 0x00	; 0
 8dc:	80 e8       	ldi	r24, 0x80	; 128
 8de:	9f e3       	ldi	r25, 0x3F	; 63
 8e0:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__divsf3>
 8e4:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 8e8:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_mpack>

000008ec <ldexp>:
 8ec:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 8f0:	d8 f3       	brcs	.-10     	; 0x8e8 <inverse+0x14>
 8f2:	99 23       	and	r25, r25
 8f4:	c9 f3       	breq	.-14     	; 0x8e8 <inverse+0x14>
 8f6:	94 0f       	add	r25, r20
 8f8:	51 1d       	adc	r21, r1
 8fa:	a3 f3       	brvs	.-24     	; 0x8e4 <inverse+0x10>
 8fc:	91 50       	subi	r25, 0x01	; 1
 8fe:	50 40       	sbci	r21, 0x00	; 0
 900:	94 f0       	brlt	.+36     	; 0x926 <__stack+0x27>
 902:	59 f0       	breq	.+22     	; 0x91a <__stack+0x1b>
 904:	88 23       	and	r24, r24
 906:	32 f0       	brmi	.+12     	; 0x914 <__stack+0x15>
 908:	66 0f       	add	r22, r22
 90a:	77 1f       	adc	r23, r23
 90c:	88 1f       	adc	r24, r24
 90e:	91 50       	subi	r25, 0x01	; 1
 910:	50 40       	sbci	r21, 0x00	; 0
 912:	c1 f7       	brne	.-16     	; 0x904 <__stack+0x5>
 914:	9e 3f       	cpi	r25, 0xFE	; 254
 916:	51 05       	cpc	r21, r1
 918:	2c f7       	brge	.-54     	; 0x8e4 <inverse+0x10>
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret
 926:	5f 3f       	cpi	r21, 0xFF	; 255
 928:	ac f0       	brlt	.+42     	; 0x954 <__stack+0x55>
 92a:	98 3e       	cpi	r25, 0xE8	; 232
 92c:	9c f0       	brlt	.+38     	; 0x954 <__stack+0x55>
 92e:	bb 27       	eor	r27, r27
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	08 f4       	brcc	.+2      	; 0x93c <__stack+0x3d>
 93a:	b1 60       	ori	r27, 0x01	; 1
 93c:	93 95       	inc	r25
 93e:	c1 f7       	brne	.-16     	; 0x930 <__stack+0x31>
 940:	bb 0f       	add	r27, r27
 942:	58 f7       	brcc	.-42     	; 0x91a <__stack+0x1b>
 944:	11 f4       	brne	.+4      	; 0x94a <__stack+0x4b>
 946:	60 ff       	sbrs	r22, 0
 948:	e8 cf       	rjmp	.-48     	; 0x91a <__stack+0x1b>
 94a:	6f 5f       	subi	r22, 0xFF	; 255
 94c:	7f 4f       	sbci	r23, 0xFF	; 255
 94e:	8f 4f       	sbci	r24, 0xFF	; 255
 950:	9f 4f       	sbci	r25, 0xFF	; 255
 952:	e3 cf       	rjmp	.-58     	; 0x91a <__stack+0x1b>
 954:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 958:	16 f0       	brts	.+4      	; 0x95e <__stack+0x5f>
 95a:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__fp_mpack>
 95e:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 962:	68 94       	set
 964:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>

00000968 <log>:
 968:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 96c:	a8 f3       	brcs	.-22     	; 0x958 <__stack+0x59>
 96e:	99 23       	and	r25, r25
 970:	c1 f3       	breq	.-16     	; 0x962 <__stack+0x63>
 972:	ae f3       	brts	.-22     	; 0x95e <__stack+0x5f>
 974:	df 93       	push	r29
 976:	cf 93       	push	r28
 978:	1f 93       	push	r17
 97a:	0f 93       	push	r16
 97c:	ff 92       	push	r15
 97e:	c9 2f       	mov	r28, r25
 980:	dd 27       	eor	r29, r29
 982:	88 23       	and	r24, r24
 984:	2a f0       	brmi	.+10     	; 0x990 <log+0x28>
 986:	21 97       	sbiw	r28, 0x01	; 1
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	da f7       	brpl	.-10     	; 0x986 <log+0x1e>
 990:	20 e0       	ldi	r18, 0x00	; 0
 992:	30 e0       	ldi	r19, 0x00	; 0
 994:	40 e8       	ldi	r20, 0x80	; 128
 996:	5f eb       	ldi	r21, 0xBF	; 191
 998:	9f e3       	ldi	r25, 0x3F	; 63
 99a:	88 39       	cpi	r24, 0x98	; 152
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <log+0x3e>
 99e:	80 3e       	cpi	r24, 0xE0	; 224
 9a0:	38 f0       	brcs	.+14     	; 0x9b0 <log+0x48>
 9a2:	21 96       	adiw	r28, 0x01	; 1
 9a4:	8f 77       	andi	r24, 0x7F	; 127
 9a6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3>
 9aa:	e0 e9       	ldi	r30, 0x90	; 144
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <log+0x50>
 9b0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__addsf3>
 9b4:	ed eb       	ldi	r30, 0xBD	; 189
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	0e 94 43 04 	call	0x886	; 0x886 <__fp_powser>
 9bc:	8b 01       	movw	r16, r22
 9be:	be 01       	movw	r22, r28
 9c0:	ec 01       	movw	r28, r24
 9c2:	fb 2e       	mov	r15, r27
 9c4:	6f 57       	subi	r22, 0x7F	; 127
 9c6:	71 09       	sbc	r23, r1
 9c8:	75 95       	asr	r23
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 0b       	sbc	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	0e 94 97 02 	call	0x52e	; 0x52e <__floatsisf>
 9d4:	28 e1       	ldi	r18, 0x18	; 24
 9d6:	32 e7       	ldi	r19, 0x72	; 114
 9d8:	41 e3       	ldi	r20, 0x31	; 49
 9da:	5f e3       	ldi	r21, 0x3F	; 63
 9dc:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3x>
 9e0:	af 2d       	mov	r26, r15
 9e2:	98 01       	movw	r18, r16
 9e4:	ae 01       	movw	r20, r28
 9e6:	ff 90       	pop	r15
 9e8:	0f 91       	pop	r16
 9ea:	1f 91       	pop	r17
 9ec:	cf 91       	pop	r28
 9ee:	df 91       	pop	r29
 9f0:	0e 94 0c 02 	call	0x418	; 0x418 <__addsf3x>
 9f4:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>

000009f8 <modf>:
 9f8:	fa 01       	movw	r30, r20
 9fa:	dc 01       	movw	r26, r24
 9fc:	aa 0f       	add	r26, r26
 9fe:	bb 1f       	adc	r27, r27
 a00:	9b 01       	movw	r18, r22
 a02:	ac 01       	movw	r20, r24
 a04:	bf 57       	subi	r27, 0x7F	; 127
 a06:	28 f4       	brcc	.+10     	; 0xa12 <modf+0x1a>
 a08:	22 27       	eor	r18, r18
 a0a:	33 27       	eor	r19, r19
 a0c:	44 27       	eor	r20, r20
 a0e:	50 78       	andi	r21, 0x80	; 128
 a10:	20 c0       	rjmp	.+64     	; 0xa52 <modf+0x5a>
 a12:	b7 51       	subi	r27, 0x17	; 23
 a14:	90 f4       	brcc	.+36     	; 0xa3a <modf+0x42>
 a16:	ab 2f       	mov	r26, r27
 a18:	00 24       	eor	r0, r0
 a1a:	46 95       	lsr	r20
 a1c:	37 95       	ror	r19
 a1e:	27 95       	ror	r18
 a20:	01 1c       	adc	r0, r1
 a22:	a3 95       	inc	r26
 a24:	d2 f3       	brmi	.-12     	; 0xa1a <modf+0x22>
 a26:	00 20       	and	r0, r0
 a28:	71 f0       	breq	.+28     	; 0xa46 <modf+0x4e>
 a2a:	22 0f       	add	r18, r18
 a2c:	33 1f       	adc	r19, r19
 a2e:	44 1f       	adc	r20, r20
 a30:	b3 95       	inc	r27
 a32:	da f3       	brmi	.-10     	; 0xa2a <modf+0x32>
 a34:	0e d0       	rcall	.+28     	; 0xa52 <modf+0x5a>
 a36:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__subsf3>
 a3a:	61 30       	cpi	r22, 0x01	; 1
 a3c:	71 05       	cpc	r23, r1
 a3e:	a0 e8       	ldi	r26, 0x80	; 128
 a40:	8a 07       	cpc	r24, r26
 a42:	b9 46       	sbci	r27, 0x69	; 105
 a44:	30 f4       	brcc	.+12     	; 0xa52 <modf+0x5a>
 a46:	9b 01       	movw	r18, r22
 a48:	ac 01       	movw	r20, r24
 a4a:	66 27       	eor	r22, r22
 a4c:	77 27       	eor	r23, r23
 a4e:	88 27       	eor	r24, r24
 a50:	90 78       	andi	r25, 0x80	; 128
 a52:	30 96       	adiw	r30, 0x00	; 0
 a54:	21 f0       	breq	.+8      	; 0xa5e <modf+0x66>
 a56:	20 83       	st	Z, r18
 a58:	31 83       	std	Z+1, r19	; 0x01
 a5a:	42 83       	std	Z+2, r20	; 0x02
 a5c:	53 83       	std	Z+3, r21	; 0x03
 a5e:	08 95       	ret

00000a60 <__divsf3>:
 a60:	0e 94 44 05 	call	0xa88	; 0xa88 <__divsf3x>
 a64:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 a68:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 a6c:	58 f0       	brcs	.+22     	; 0xa84 <__divsf3+0x24>
 a6e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 a72:	40 f0       	brcs	.+16     	; 0xa84 <__divsf3+0x24>
 a74:	29 f4       	brne	.+10     	; 0xa80 <__divsf3+0x20>
 a76:	5f 3f       	cpi	r21, 0xFF	; 255
 a78:	29 f0       	breq	.+10     	; 0xa84 <__divsf3+0x24>
 a7a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 a7e:	51 11       	cpse	r21, r1
 a80:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 a84:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>

00000a88 <__divsf3x>:
 a88:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 a8c:	68 f3       	brcs	.-38     	; 0xa68 <__divsf3+0x8>

00000a8e <__divsf3_pse>:
 a8e:	99 23       	and	r25, r25
 a90:	b1 f3       	breq	.-20     	; 0xa7e <__divsf3+0x1e>
 a92:	55 23       	and	r21, r21
 a94:	91 f3       	breq	.-28     	; 0xa7a <__divsf3+0x1a>
 a96:	95 1b       	sub	r25, r21
 a98:	55 0b       	sbc	r21, r21
 a9a:	bb 27       	eor	r27, r27
 a9c:	aa 27       	eor	r26, r26
 a9e:	62 17       	cp	r22, r18
 aa0:	73 07       	cpc	r23, r19
 aa2:	84 07       	cpc	r24, r20
 aa4:	38 f0       	brcs	.+14     	; 0xab4 <__divsf3_pse+0x26>
 aa6:	9f 5f       	subi	r25, 0xFF	; 255
 aa8:	5f 4f       	sbci	r21, 0xFF	; 255
 aaa:	22 0f       	add	r18, r18
 aac:	33 1f       	adc	r19, r19
 aae:	44 1f       	adc	r20, r20
 ab0:	aa 1f       	adc	r26, r26
 ab2:	a9 f3       	breq	.-22     	; 0xa9e <__divsf3_pse+0x10>
 ab4:	35 d0       	rcall	.+106    	; 0xb20 <__divsf3_pse+0x92>
 ab6:	0e 2e       	mov	r0, r30
 ab8:	3a f0       	brmi	.+14     	; 0xac8 <__divsf3_pse+0x3a>
 aba:	e0 e8       	ldi	r30, 0x80	; 128
 abc:	32 d0       	rcall	.+100    	; 0xb22 <__divsf3_pse+0x94>
 abe:	91 50       	subi	r25, 0x01	; 1
 ac0:	50 40       	sbci	r21, 0x00	; 0
 ac2:	e6 95       	lsr	r30
 ac4:	00 1c       	adc	r0, r0
 ac6:	ca f7       	brpl	.-14     	; 0xaba <__divsf3_pse+0x2c>
 ac8:	2b d0       	rcall	.+86     	; 0xb20 <__divsf3_pse+0x92>
 aca:	fe 2f       	mov	r31, r30
 acc:	29 d0       	rcall	.+82     	; 0xb20 <__divsf3_pse+0x92>
 ace:	66 0f       	add	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	bb 1f       	adc	r27, r27
 ad6:	26 17       	cp	r18, r22
 ad8:	37 07       	cpc	r19, r23
 ada:	48 07       	cpc	r20, r24
 adc:	ab 07       	cpc	r26, r27
 ade:	b0 e8       	ldi	r27, 0x80	; 128
 ae0:	09 f0       	breq	.+2      	; 0xae4 <__divsf3_pse+0x56>
 ae2:	bb 0b       	sbc	r27, r27
 ae4:	80 2d       	mov	r24, r0
 ae6:	bf 01       	movw	r22, r30
 ae8:	ff 27       	eor	r31, r31
 aea:	93 58       	subi	r25, 0x83	; 131
 aec:	5f 4f       	sbci	r21, 0xFF	; 255
 aee:	3a f0       	brmi	.+14     	; 0xafe <__divsf3_pse+0x70>
 af0:	9e 3f       	cpi	r25, 0xFE	; 254
 af2:	51 05       	cpc	r21, r1
 af4:	78 f0       	brcs	.+30     	; 0xb14 <__divsf3_pse+0x86>
 af6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 afa:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 afe:	5f 3f       	cpi	r21, 0xFF	; 255
 b00:	e4 f3       	brlt	.-8      	; 0xafa <__divsf3_pse+0x6c>
 b02:	98 3e       	cpi	r25, 0xE8	; 232
 b04:	d4 f3       	brlt	.-12     	; 0xafa <__divsf3_pse+0x6c>
 b06:	86 95       	lsr	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	b7 95       	ror	r27
 b0e:	f7 95       	ror	r31
 b10:	9f 5f       	subi	r25, 0xFF	; 255
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__divsf3_pse+0x78>
 b14:	88 0f       	add	r24, r24
 b16:	91 1d       	adc	r25, r1
 b18:	96 95       	lsr	r25
 b1a:	87 95       	ror	r24
 b1c:	97 f9       	bld	r25, 7
 b1e:	08 95       	ret
 b20:	e1 e0       	ldi	r30, 0x01	; 1
 b22:	66 0f       	add	r22, r22
 b24:	77 1f       	adc	r23, r23
 b26:	88 1f       	adc	r24, r24
 b28:	bb 1f       	adc	r27, r27
 b2a:	62 17       	cp	r22, r18
 b2c:	73 07       	cpc	r23, r19
 b2e:	84 07       	cpc	r24, r20
 b30:	ba 07       	cpc	r27, r26
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__divsf3_pse+0xae>
 b34:	62 1b       	sub	r22, r18
 b36:	73 0b       	sbc	r23, r19
 b38:	84 0b       	sbc	r24, r20
 b3a:	ba 0b       	sbc	r27, r26
 b3c:	ee 1f       	adc	r30, r30
 b3e:	88 f7       	brcc	.-30     	; 0xb22 <__divsf3_pse+0x94>
 b40:	e0 95       	com	r30
 b42:	08 95       	ret

00000b44 <__fp_mpack>:
 b44:	9f 3f       	cpi	r25, 0xFF	; 255
 b46:	31 f0       	breq	.+12     	; 0xb54 <__fp_mpack_finite+0xc>

00000b48 <__fp_mpack_finite>:
 b48:	91 50       	subi	r25, 0x01	; 1
 b4a:	20 f4       	brcc	.+8      	; 0xb54 <__fp_mpack_finite+0xc>
 b4c:	87 95       	ror	r24
 b4e:	77 95       	ror	r23
 b50:	67 95       	ror	r22
 b52:	b7 95       	ror	r27
 b54:	88 0f       	add	r24, r24
 b56:	91 1d       	adc	r25, r1
 b58:	96 95       	lsr	r25
 b5a:	87 95       	ror	r24
 b5c:	97 f9       	bld	r25, 7
 b5e:	08 95       	ret

00000b60 <__umulhisi3>:
 b60:	a2 9f       	mul	r26, r18
 b62:	b0 01       	movw	r22, r0
 b64:	b3 9f       	mul	r27, r19
 b66:	c0 01       	movw	r24, r0
 b68:	a3 9f       	mul	r26, r19
 b6a:	70 0d       	add	r23, r0
 b6c:	81 1d       	adc	r24, r1
 b6e:	11 24       	eor	r1, r1
 b70:	91 1d       	adc	r25, r1
 b72:	b2 9f       	mul	r27, r18
 b74:	70 0d       	add	r23, r0
 b76:	81 1d       	adc	r24, r1
 b78:	11 24       	eor	r1, r1
 b7a:	91 1d       	adc	r25, r1
 b7c:	08 95       	ret

00000b7e <_exit>:
 b7e:	f8 94       	cli

00000b80 <__stop_program>:
 b80:	ff cf       	rjmp	.-2      	; 0xb80 <__stop_program>
