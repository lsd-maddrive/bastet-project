
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002c2  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800106  00800106  0000035c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000038c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a1d  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000426  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043e  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9e:	0c 94 5f 01 	jmp	0x2be	; 0x2be <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_init>:
    data += digit;
  }
  // заканчиваем, когда увидели признак \r\n
  while(1);
  return data;
}
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 61       	ori	r24, 0x18	; 24
  ae:	80 83       	st	Z, r24
  b0:	e2 ec       	ldi	r30, 0xC2	; 194
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
  ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  be:	87 e6       	ldi	r24, 0x67	; 103
  c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c4:	08 95       	ret

000000c6 <uart_transmit>:
  c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <uart_transmit>
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <uart_transmit_str>:
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
  da:	03 c0       	rjmp	.+6      	; 0xe2 <uart_transmit_str+0xe>
  dc:	21 96       	adiw	r28, 0x01	; 1
  de:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
  e2:	88 81       	ld	r24, Y
  e4:	81 11       	cpse	r24, r1
  e6:	fa cf       	rjmp	.-12     	; 0xdc <uart_transmit_str+0x8>
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <Digit>:
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	fc 01       	movw	r30, r24
  f4:	d6 2f       	mov	r29, r22
  f6:	45 e0       	ldi	r20, 0x05	; 5
  f8:	27 c0       	rjmp	.+78     	; 0x148 <Digit+0x5a>
  fa:	9f 01       	movw	r18, r30
  fc:	ad ec       	ldi	r26, 0xCD	; 205
  fe:	bc ec       	ldi	r27, 0xCC	; 204
 100:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	9c 01       	movw	r18, r24
 112:	22 0f       	add	r18, r18
 114:	33 1f       	adc	r19, r19
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	82 0f       	add	r24, r18
 124:	93 1f       	adc	r25, r19
 126:	ce 2f       	mov	r28, r30
 128:	c8 1b       	sub	r28, r24
 12a:	5f ef       	ldi	r21, 0xFF	; 255
 12c:	54 0f       	add	r21, r20
 12e:	4d 17       	cp	r20, r29
 130:	69 f0       	breq	.+26     	; 0x14c <Digit+0x5e>
 132:	9f 01       	movw	r18, r30
 134:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 138:	fc 01       	movw	r30, r24
 13a:	f6 95       	lsr	r31
 13c:	e7 95       	ror	r30
 13e:	f6 95       	lsr	r31
 140:	e7 95       	ror	r30
 142:	f6 95       	lsr	r31
 144:	e7 95       	ror	r30
 146:	45 2f       	mov	r20, r21
 148:	41 11       	cpse	r20, r1
 14a:	d7 cf       	rjmp	.-82     	; 0xfa <Digit+0xc>
 14c:	8c 2f       	mov	r24, r28
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <uart_transmit_dec>:
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	8c 01       	movw	r16, r24
 15e:	89 2b       	or	r24, r25
 160:	b9 f0       	breq	.+46     	; 0x190 <uart_transmit_dec+0x3c>
 162:	c1 e0       	ldi	r28, 0x01	; 1
 164:	01 c0       	rjmp	.+2      	; 0x168 <uart_transmit_dec+0x14>
 166:	cd 2f       	mov	r28, r29
 168:	d1 e0       	ldi	r29, 0x01	; 1
 16a:	dc 0f       	add	r29, r28
 16c:	6c 2f       	mov	r22, r28
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 77 00 	call	0xee	; 0xee <Digit>
 174:	88 23       	and	r24, r24
 176:	b9 f3       	breq	.-18     	; 0x166 <uart_transmit_dec+0x12>
 178:	08 c0       	rjmp	.+16     	; 0x18a <uart_transmit_dec+0x36>
 17a:	6c 2f       	mov	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 77 00 	call	0xee	; 0xee <Digit>
 182:	80 5d       	subi	r24, 0xD0	; 208
 184:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
 188:	cf 5f       	subi	r28, 0xFF	; 255
 18a:	c6 30       	cpi	r28, 0x06	; 6
 18c:	b0 f3       	brcs	.-20     	; 0x17a <uart_transmit_dec+0x26>
 18e:	03 c0       	rjmp	.+6      	; 0x196 <uart_transmit_dec+0x42>
 190:	80 e3       	ldi	r24, 0x30	; 48
 192:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	08 95       	ret

000001a0 <__vector_1>:

ISR (INT0_vect)
{
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	2f 93       	push	r18
 1ac:	3f 93       	push	r19
 1ae:	8f 93       	push	r24
 1b0:	9f 93       	push	r25
  //если фронт сигнала на ECHO, то сбрасываем таймер
  if((PIND & (1<<2)) != 0)
 1b2:	4a 9b       	sbis	0x09, 2	; 9
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <__vector_1+0x20>
  {
    TCNT1H = 0; 
 1b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
    TCNT1L = 0;
 1ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1be:	12 c0       	rjmp	.+36     	; 0x1e4 <__vector_1+0x44>
  //если срез сигнала на ECHO, то забираем значение
  else
  {
    /* dist Ц глобальна€ переменна€, котора€ видна и 
    функции ISR и main() */
    dist = TCNT1L; 
 1c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1ca:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    dist |= (TCNT1H << 8);
 1ce:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	32 2f       	mov	r19, r18
 1d6:	22 27       	eor	r18, r18
 1d8:	82 2b       	or	r24, r18
 1da:	93 2b       	or	r25, r19
 1dc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1e0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
  }
}
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:


int main(void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <main+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <main+0x8>
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	80 e7       	ldi	r24, 0x70	; 112
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0x14>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0x1e>
 214:	00 00       	nop
	// задержка дл€ завершени€ процесса программировани€
	_delay_ms(50);
	uint8_t word[] = {"TEST"};
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	e0 e0       	ldi	r30, 0x00	; 0
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	de 01       	movw	r26, r28
 21e:	11 96       	adiw	r26, 0x01	; 1
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	8a 95       	dec	r24
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x2a>
	// подключаем диод к Ў»ћ каналу ј таймера є1
	DDRD |= (1<<6) | (1<<3);
 228:	8a b1       	in	r24, 0x0a	; 10
 22a:	88 64       	ori	r24, 0x48	; 72
 22c:	8a b9       	out	0x0a, r24	; 10
	// настраиваем Ў»ћ
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 22e:	83 e8       	ldi	r24, 0x83	; 131
 230:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	85 bd       	out	0x25, r24	; 37
	TCCR1B = (1<<CS10) | (1<<CS11);
 236:	93 e0       	ldi	r25, 0x03	; 3
 238:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	// настраиваем прерывани€
	EIMSK = (1<<INT0);
 23c:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1<<ISC00);
 23e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	sei();
 242:	78 94       	sei
	uart_init();
 244:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_init>
	// выводим в терминал слово TEST
	uart_transmit_str(word);
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	0e 94 6a 00 	call	0xd4	; 0xd4 <uart_transmit_str>
	// переходим в начало следующей строки
	uart_transmit('\r');
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
	while (1)
	{
		PORTD |= (1<<3);
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	88 60       	ori	r24, 0x08	; 8
 25a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	2a e6       	ldi	r18, 0x6A	; 106
 25e:	2a 95       	dec	r18
 260:	f1 f7       	brne	.-4      	; 0x25e <main+0x68>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x6e>
		_delay_us(20);
		PORTD &= ~(1<<3);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	87 7f       	andi	r24, 0xF7	; 247
 268:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	93 ec       	ldi	r25, 0xC3	; 195
 26e:	29 e0       	ldi	r18, 0x09	; 9
 270:	81 50       	subi	r24, 0x01	; 1
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	20 40       	sbci	r18, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x7a>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x84>
 27a:	00 00       	nop
		_delay_ms(200);
		// выводим рассто€ние в [см]
		uart_transmit_dec(dist/14);
 27c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
 280:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
 284:	36 95       	lsr	r19
 286:	27 95       	ror	r18
 288:	a5 e2       	ldi	r26, 0x25	; 37
 28a:	b9 e4       	ldi	r27, 0x49	; 73
 28c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__umulhisi3>
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	0e 94 aa 00 	call	0x154	; 0x154 <uart_transmit_dec>
		uart_transmit('\r');
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	0e 94 63 00 	call	0xc6	; 0xc6 <uart_transmit>
 29e:	db cf       	rjmp	.-74     	; 0x256 <main+0x60>

000002a0 <__umulhisi3>:
 2a0:	a2 9f       	mul	r26, r18
 2a2:	b0 01       	movw	r22, r0
 2a4:	b3 9f       	mul	r27, r19
 2a6:	c0 01       	movw	r24, r0
 2a8:	a3 9f       	mul	r26, r19
 2aa:	70 0d       	add	r23, r0
 2ac:	81 1d       	adc	r24, r1
 2ae:	11 24       	eor	r1, r1
 2b0:	91 1d       	adc	r25, r1
 2b2:	b2 9f       	mul	r27, r18
 2b4:	70 0d       	add	r23, r0
 2b6:	81 1d       	adc	r24, r1
 2b8:	11 24       	eor	r1, r1
 2ba:	91 1d       	adc	r25, r1
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
