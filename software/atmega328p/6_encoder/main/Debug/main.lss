
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  000003ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000093a  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000767  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003cc  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036f  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 01 	call	0x272	; 0x272 <main>
  9e:	0c 94 93 01 	jmp	0x326	; 0x326 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SPI_init>:
    }
}

void SPI_init(void) //инициализаци€ аппаратной части SPI
{
	DDRB |= (1<<0)|(1<<2)|(1<<3)|(1<<5); //выводы CS, SS, MOSI, SCK Ц на выход
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8d 62       	ori	r24, 0x2D	; 45
  aa:	84 b9       	out	0x04, r24	; 4
	//включить аппаратный SPI, режим 0, предделитель на 128
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
  ac:	83 e5       	ldi	r24, 0x53	; 83
  ae:	8c bd       	out	0x2c, r24	; 44
  b0:	08 95       	ret

000000b2 <Digit>:
}

/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	fc 01       	movw	r30, r24
  b8:	d6 2f       	mov	r29, r22
	uint8_t i = 3, a;
  ba:	43 e0       	ldi	r20, 0x03	; 3
	while(i){ //цикл по разр€дам числа
  bc:	27 c0       	rjmp	.+78     	; 0x10c <Digit+0x5a>
		a = d%10; //выдел€ем очередной разр€д
  be:	9f 01       	movw	r18, r30
  c0:	ad ec       	ldi	r26, 0xCD	; 205
  c2:	bc ec       	ldi	r27, 0xCC	; 204
  c4:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
  c8:	96 95       	lsr	r25
  ca:	87 95       	ror	r24
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	96 95       	lsr	r25
  d2:	87 95       	ror	r24
  d4:	9c 01       	movw	r18, r24
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	82 0f       	add	r24, r18
  e8:	93 1f       	adc	r25, r19
  ea:	ce 2f       	mov	r28, r30
  ec:	c8 1b       	sub	r28, r24
		if(i-- == m) break; //выделен заданный разр€д - уходим
  ee:	5f ef       	ldi	r21, 0xFF	; 255
  f0:	54 0f       	add	r21, r20
  f2:	4d 17       	cp	r20, r29
  f4:	69 f0       	breq	.+26     	; 0x110 <Digit+0x5e>
		d /= 10; //уменьшаем число в 10 раз
  f6:	9f 01       	movw	r18, r30
  f8:	0e 94 84 01 	call	0x308	; 0x308 <__umulhisi3>
  fc:	fc 01       	movw	r30, r24
  fe:	f6 95       	lsr	r31
 100:	e7 95       	ror	r30
 102:	f6 95       	lsr	r31
 104:	e7 95       	ror	r30
 106:	f6 95       	lsr	r31
 108:	e7 95       	ror	r30
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
 10a:	45 2f       	mov	r20, r21
/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
 10c:	41 11       	cpse	r20, r1
 10e:	d7 cf       	rjmp	.-82     	; 0xbe <Digit+0xc>
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
		d /= 10; //уменьшаем число в 10 раз
	}
	return(a);
}
 110:	8c 2f       	mov	r24, r28
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <showMe>:

void showMe(int16_t spiData)
{
 118:	bf 92       	push	r11
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	2f 97       	sbiw	r28, 0x0f	; 15
 130:	0f b6       	in	r0, 0x3f	; 63
 132:	f8 94       	cli
 134:	de bf       	out	0x3e, r29	; 62
 136:	0f be       	out	0x3f, r0	; 63
 138:	cd bf       	out	0x3d, r28	; 61
 13a:	7c 01       	movw	r14, r24
	int8_t i;
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	de 01       	movw	r26, r28
 14a:	14 96       	adiw	r26, 0x04	; 4
 14c:	01 90       	ld	r0, Z+
 14e:	0d 92       	st	X+, r0
 150:	8a 95       	dec	r24
 152:	e1 f7       	brne	.-8      	; 0x14c <showMe+0x34>
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
 154:	ff 20       	and	r15, r15
 156:	2c f4       	brge	.+10     	; 0x162 <showMe+0x4a>
 158:	cc 24       	eor	r12, r12
 15a:	dd 24       	eor	r13, r13
 15c:	ce 18       	sub	r12, r14
 15e:	df 08       	sbc	r13, r15
 160:	01 c0       	rjmp	.+2      	; 0x164 <showMe+0x4c>
	else res = spiData;
 162:	67 01       	movw	r12, r14
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 164:	bb 24       	eor	r11, r11
 166:	b3 94       	inc	r11
 168:	12 c0       	rjmp	.+36     	; 0x18e <showMe+0x76>
		dig[i-1] = Digit(res,i);
 16a:	0b 2d       	mov	r16, r11
 16c:	0b 2c       	mov	r0, r11
 16e:	00 0c       	add	r0, r0
 170:	11 0b       	sbc	r17, r17
 172:	01 50       	subi	r16, 0x01	; 1
 174:	11 09       	sbc	r17, r1
 176:	6b 2d       	mov	r22, r11
 178:	c6 01       	movw	r24, r12
 17a:	0e 94 59 00 	call	0xb2	; 0xb2 <Digit>
 17e:	e1 e0       	ldi	r30, 0x01	; 1
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 0f       	add	r30, r28
 184:	fd 1f       	adc	r31, r29
 186:	e0 0f       	add	r30, r16
 188:	f1 1f       	adc	r31, r17
 18a:	80 83       	st	Z, r24
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
	else res = spiData;
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 18c:	b3 94       	inc	r11
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	8b 15       	cp	r24, r11
 192:	5c f7       	brge	.-42     	; 0x16a <showMe+0x52>
		dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
 194:	cd 28       	or	r12, r13
 196:	21 f4       	brne	.+8      	; 0x1a0 <showMe+0x88>
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	43 c0       	rjmp	.+134    	; 0x222 <showMe+0x10a>
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
			j++;
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <showMe+0x8a>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
		dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
 1a2:	28 2f       	mov	r18, r24
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	e1 e0       	ldi	r30, 0x01	; 1
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ec 0f       	add	r30, r28
 1ac:	fd 1f       	adc	r31, r29
 1ae:	e2 0f       	add	r30, r18
 1b0:	f3 1f       	adc	r31, r19
 1b2:	90 81       	ld	r25, Z
 1b4:	99 23       	and	r25, r25
 1b6:	91 f3       	breq	.-28     	; 0x19c <showMe+0x84>
			j++;
		/* сначала посылаетс€ знак, потом - сотни, потом Ц дес€тки, а после всего Ц единицы */
		if(spiData < 0)
 1b8:	ff 20       	and	r15, r15
 1ba:	34 f4       	brge	.+12     	; 0x1c8 <showMe+0xb0>
		{
			SPDR=mas[11]; //отрицательное число - знак минус
 1bc:	8f e7       	ldi	r24, 0x7F	; 127
 1be:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1c0:	0d b4       	in	r0, 0x2d	; 45
 1c2:	07 fe       	sbrs	r0, 7
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <showMe+0xa8>
 1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <showMe+0xba>
		}
		else
		{
			SPDR=mas[10]; //положительное число - ничего
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1cc:	0d b4       	in	r0, 0x2d	; 45
 1ce:	07 fe       	sbrs	r0, 7
 1d0:	fd cf       	rjmp	.-6      	; 0x1cc <showMe+0xb4>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	1d c0       	rjmp	.+58     	; 0x210 <showMe+0xf8>
		}
		for(i=0; i<=2; i++)
		{
			if(i<j) SPDR=mas[10]; //вместо ненужных нулей - пусто
 1d6:	48 2f       	mov	r20, r24
 1d8:	08 2e       	mov	r0, r24
 1da:	00 0c       	add	r0, r0
 1dc:	55 0b       	sbc	r21, r21
 1de:	42 17       	cp	r20, r18
 1e0:	53 07       	cpc	r21, r19
 1e2:	1c f4       	brge	.+6      	; 0x1ea <showMe+0xd2>
 1e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e6:	9e bd       	out	0x2e, r25	; 46
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <showMe+0xf0>
			else SPDR=mas[dig[i]];
 1ea:	e1 e0       	ldi	r30, 0x01	; 1
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	ec 0f       	add	r30, r28
 1f0:	fd 1f       	adc	r31, r29
 1f2:	e4 0f       	add	r30, r20
 1f4:	f5 1f       	adc	r31, r21
 1f6:	90 81       	ld	r25, Z
 1f8:	e4 e0       	ldi	r30, 0x04	; 4
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e9 0f       	add	r30, r25
 202:	f1 1d       	adc	r31, r1
 204:	90 81       	ld	r25, Z
 206:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
 208:	0d b4       	in	r0, 0x2d	; 45
 20a:	07 fe       	sbrs	r0, 7
 20c:	fd cf       	rjmp	.-6      	; 0x208 <showMe+0xf0>
		else
		{
			SPDR=mas[10]; //положительное число - ничего
			while(!(SPSR&(1<<SPIF)));
		}
		for(i=0; i<=2; i++)
 20e:	8f 5f       	subi	r24, 0xFF	; 255
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	0c f3       	brlt	.-62     	; 0x1d6 <showMe+0xbe>
 214:	0d c0       	rjmp	.+26     	; 0x230 <showMe+0x118>
	}
	else
	{
		for(i=0; i<=2; i++)
		{
			SPDR=mas[10];
 216:	9e 85       	ldd	r25, Y+14	; 0x0e
 218:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF)));
 21a:	0d b4       	in	r0, 0x2d	; 45
 21c:	07 fe       	sbrs	r0, 7
 21e:	fd cf       	rjmp	.-6      	; 0x21a <showMe+0x102>
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
		}
	}
	else
	{
		for(i=0; i<=2; i++)
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	83 30       	cpi	r24, 0x03	; 3
 224:	c4 f3       	brlt	.-16     	; 0x216 <showMe+0xfe>
		{
			SPDR=mas[10];
			while(!(SPSR&(1<<SPIF)));
		}
		SPDR=mas[0]; //если res == 0, выводим на экран ___0
 226:	8c 81       	ldd	r24, Y+4	; 0x04
 228:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR&(1<<SPIF)));
 22a:	0d b4       	in	r0, 0x2d	; 45
 22c:	07 fe       	sbrs	r0, 7
 22e:	fd cf       	rjmp	.-6      	; 0x22a <showMe+0x112>
	}
	PORTB &= ~(1<<0); //защелкиваем выводимое число
 230:	85 b1       	in	r24, 0x05	; 5
 232:	8e 7f       	andi	r24, 0xFE	; 254
 234:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8a e6       	ldi	r24, 0x6A	; 106
 238:	8a 95       	dec	r24
 23a:	f1 f7       	brne	.-4      	; 0x238 <showMe+0x120>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <showMe+0x126>
	_delay_us(20);
	PORTB |= (1<<0);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	81 60       	ori	r24, 0x01	; 1
 242:	85 b9       	out	0x05, r24	; 5
 244:	8a e6       	ldi	r24, 0x6A	; 106
 246:	8a 95       	dec	r24
 248:	f1 f7       	brne	.-4      	; 0x246 <showMe+0x12e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <showMe+0x134>
	_delay_us(20);
	PORTB &= ~(1<<0);
 24c:	85 b1       	in	r24, 0x05	; 5
 24e:	8e 7f       	andi	r24, 0xFE	; 254
 250:	85 b9       	out	0x05, r24	; 5
}
 252:	2f 96       	adiw	r28, 0x0f	; 15
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	f8 94       	cli
 258:	de bf       	out	0x3e, r29	; 62
 25a:	0f be       	out	0x3f, r0	; 63
 25c:	cd bf       	out	0x3d, r28	; 61
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	ff 90       	pop	r15
 268:	ef 90       	pop	r14
 26a:	df 90       	pop	r13
 26c:	cf 90       	pop	r12
 26e:	bf 90       	pop	r11
 270:	08 95       	ret

00000272 <main>:

uint8_t angle, flag = 0;

int main(void)
{
	EIMSK = (1<<INT0);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	8d bb       	out	0x1d, r24	; 29
	//настройка формы сигнала
	EICRA = (1<<ISC00);
 276:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	
	SPI_init();
 27a:	0e 94 53 00 	call	0xa6	; 0xa6 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	83 ec       	ldi	r24, 0xC3	; 195
 282:	99 e0       	ldi	r25, 0x09	; 9
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x12>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x1c>
 28e:	00 00       	nop
	_delay_ms(200);	

	//глобальное разрешение прерываний
	sei();
 290:	78 94       	sei
	
	while (1)
    {
		cli();
 292:	f8 94       	cli
		showMe(angle);
 294:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <angle>
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 8c 00 	call	0x118	; 0x118 <showMe>
		sei();
 29e:	78 94       	sei
 2a0:	f8 cf       	rjmp	.-16     	; 0x292 <main+0x20>

000002a2 <__vector_1>:
	_delay_us(20);
	PORTB &= ~(1<<0);
}

ISR (INT0_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	8f 93       	push	r24
	if(flag == 1)
 2ae:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	01 f5       	brne	.+64     	; 0x2f6 <__vector_1+0x54>
	{
		flag = 0;
 2b6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		//провер€ем фронт/срез на канале A
		if((PIND & (1 << 2)) != 0)
 2ba:	4a 9b       	sbis	0x09, 2	; 9
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <__vector_1+0x38>
		{
			//провер€ем фронт/срез на канале B
			if((PIND & (1 << 3)) != 0) angle--;
 2be:	4b 9b       	sbis	0x09, 3	; 9
 2c0:	06 c0       	rjmp	.+12     	; 0x2ce <__vector_1+0x2c>
 2c2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <angle>
 2c6:	81 50       	subi	r24, 0x01	; 1
 2c8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <angle>
 2cc:	17 c0       	rjmp	.+46     	; 0x2fc <__vector_1+0x5a>
			else angle++;
 2ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <angle>
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <angle>
 2d8:	11 c0       	rjmp	.+34     	; 0x2fc <__vector_1+0x5a>
		}
		else
		{
			if((PIND & (1 << 3)) != 0) angle++;
 2da:	4b 9b       	sbis	0x09, 3	; 9
 2dc:	06 c0       	rjmp	.+12     	; 0x2ea <__vector_1+0x48>
 2de:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <angle>
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <angle>
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <__vector_1+0x5a>
			else angle--;
 2ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <angle>
 2ee:	81 50       	subi	r24, 0x01	; 1
 2f0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <angle>
 2f4:	03 c0       	rjmp	.+6      	; 0x2fc <__vector_1+0x5a>
		}	
	}
	else
		flag = 1;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
}
 2fc:	8f 91       	pop	r24
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <__umulhisi3>:
 308:	a2 9f       	mul	r26, r18
 30a:	b0 01       	movw	r22, r0
 30c:	b3 9f       	mul	r27, r19
 30e:	c0 01       	movw	r24, r0
 310:	a3 9f       	mul	r26, r19
 312:	70 0d       	add	r23, r0
 314:	81 1d       	adc	r24, r1
 316:	11 24       	eor	r1, r1
 318:	91 1d       	adc	r25, r1
 31a:	b2 9f       	mul	r27, r18
 31c:	70 0d       	add	r23, r0
 31e:	81 1d       	adc	r24, r1
 320:	11 24       	eor	r1, r1
 322:	91 1d       	adc	r25, r1
 324:	08 95       	ret

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
