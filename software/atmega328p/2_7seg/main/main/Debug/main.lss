
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000332  000003a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000332  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a06  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000762  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000469  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001a30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e3  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000225f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e3       	ldi	r30, 0x32	; 50
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  8e:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <SPI_init>:
    }
}

void SPI_init(void) //инициализаци€ аппаратной части SPI
{
	DDRB |= (1<<2)|(1<<3)|(1<<5); //выводы SS, MOSI, SCK Ц на выход
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8c 62       	ori	r24, 0x2C	; 44
  9a:	84 b9       	out	0x04, r24	; 4
	//muu - сделал такт
	DDRD |= (1<<0); //вывод CS Ц на выход
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	8a b9       	out	0x0a, r24	; 10
	//включить аппаратный SPI, режим 0, предделитель на 128
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
  a2:	83 e5       	ldi	r24, 0x53	; 83
  a4:	8c bd       	out	0x2c, r24	; 44
	PORTB &= ~(1<<3);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	87 7f       	andi	r24, 0xF7	; 247
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	08 95       	ret

000000ae <Digit>:
}

/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	fc 01       	movw	r30, r24
  b4:	d6 2f       	mov	r29, r22
	uint8_t i = 3, a;
  b6:	43 e0       	ldi	r20, 0x03	; 3
	while(i){ //цикл по разр€дам числа
  b8:	27 c0       	rjmp	.+78     	; 0x108 <Digit+0x5a>
		a = d%10; //выдел€ем очередной разр€д
  ba:	9f 01       	movw	r18, r30
  bc:	ad ec       	ldi	r26, 0xCD	; 205
  be:	bc ec       	ldi	r27, 0xCC	; 204
  c0:	0e 94 88 01 	call	0x310	; 0x310 <__umulhisi3>
  c4:	96 95       	lsr	r25
  c6:	87 95       	ror	r24
  c8:	96 95       	lsr	r25
  ca:	87 95       	ror	r24
  cc:	96 95       	lsr	r25
  ce:	87 95       	ror	r24
  d0:	9c 01       	movw	r18, r24
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	82 0f       	add	r24, r18
  e4:	93 1f       	adc	r25, r19
  e6:	ce 2f       	mov	r28, r30
  e8:	c8 1b       	sub	r28, r24
		if(i-- == m) break; //выделен заданный разр€д - уходим
  ea:	5f ef       	ldi	r21, 0xFF	; 255
  ec:	54 0f       	add	r21, r20
  ee:	4d 17       	cp	r20, r29
  f0:	69 f0       	breq	.+26     	; 0x10c <Digit+0x5e>
		d /= 10; //уменьшаем число в 10 раз
  f2:	9f 01       	movw	r18, r30
  f4:	0e 94 88 01 	call	0x310	; 0x310 <__umulhisi3>
  f8:	fc 01       	movw	r30, r24
  fa:	f6 95       	lsr	r31
  fc:	e7 95       	ror	r30
  fe:	f6 95       	lsr	r31
 100:	e7 95       	ror	r30
 102:	f6 95       	lsr	r31
 104:	e7 95       	ror	r30
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
 106:	45 2f       	mov	r20, r21
/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
 108:	41 11       	cpse	r20, r1
 10a:	d7 cf       	rjmp	.-82     	; 0xba <Digit+0xc>
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
		d /= 10; //уменьшаем число в 10 раз
	}
	return(a);
}
 10c:	8c 2f       	mov	r24, r28
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <showMe>:

void showMe(int16_t spiData)
{
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	2f 97       	sbiw	r28, 0x0f	; 15
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
 136:	7c 01       	movw	r14, r24
	int8_t i;
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	1a 82       	std	Y+2, r1	; 0x02
 13c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
 13e:	8c e0       	ldi	r24, 0x0C	; 12
 140:	e0 e0       	ldi	r30, 0x00	; 0
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	de 01       	movw	r26, r28
 146:	14 96       	adiw	r26, 0x04	; 4
 148:	01 90       	ld	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	8a 95       	dec	r24
 14e:	e1 f7       	brne	.-8      	; 0x148 <showMe+0x34>
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
 150:	ff 20       	and	r15, r15
 152:	2c f4       	brge	.+10     	; 0x15e <showMe+0x4a>
 154:	cc 24       	eor	r12, r12
 156:	dd 24       	eor	r13, r13
 158:	ce 18       	sub	r12, r14
 15a:	df 08       	sbc	r13, r15
 15c:	01 c0       	rjmp	.+2      	; 0x160 <showMe+0x4c>
	else res = spiData;
 15e:	67 01       	movw	r12, r14
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 160:	bb 24       	eor	r11, r11
 162:	b3 94       	inc	r11
 164:	12 c0       	rjmp	.+36     	; 0x18a <showMe+0x76>
		dig[i-1] = Digit(res,i);
 166:	0b 2d       	mov	r16, r11
 168:	0b 2c       	mov	r0, r11
 16a:	00 0c       	add	r0, r0
 16c:	11 0b       	sbc	r17, r17
 16e:	01 50       	subi	r16, 0x01	; 1
 170:	11 09       	sbc	r17, r1
 172:	6b 2d       	mov	r22, r11
 174:	c6 01       	movw	r24, r12
 176:	0e 94 57 00 	call	0xae	; 0xae <Digit>
 17a:	e1 e0       	ldi	r30, 0x01	; 1
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	ec 0f       	add	r30, r28
 180:	fd 1f       	adc	r31, r29
 182:	e0 0f       	add	r30, r16
 184:	f1 1f       	adc	r31, r17
 186:	80 83       	st	Z, r24
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
	else res = spiData;
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 188:	b3 94       	inc	r11
 18a:	83 e0       	ldi	r24, 0x03	; 3
 18c:	8b 15       	cp	r24, r11
 18e:	5c f7       	brge	.-42     	; 0x166 <showMe+0x52>
		dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
 190:	cd 28       	or	r12, r13
 192:	21 f4       	brne	.+8      	; 0x19c <showMe+0x88>
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	43 c0       	rjmp	.+134    	; 0x21e <showMe+0x10a>
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
			j++;
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	01 c0       	rjmp	.+2      	; 0x19e <showMe+0x8a>
 19c:	80 e0       	ldi	r24, 0x00	; 0
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
		dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
 19e:	28 2f       	mov	r18, r24
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e2 0f       	add	r30, r18
 1ac:	f3 1f       	adc	r31, r19
 1ae:	90 81       	ld	r25, Z
 1b0:	99 23       	and	r25, r25
 1b2:	91 f3       	breq	.-28     	; 0x198 <showMe+0x84>
			j++;
		/* сначала посылаетс€ знак, потом - сотни, потом Ц дес€тки, а после всего Ц единицы */
		if(spiData < 0)
 1b4:	ff 20       	and	r15, r15
 1b6:	34 f4       	brge	.+12     	; 0x1c4 <showMe+0xb0>
		{
			SPDR=mas[11]; //отрицательное число - знак минус
 1b8:	8f e7       	ldi	r24, 0x7F	; 127
 1ba:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1bc:	0d b4       	in	r0, 0x2d	; 45
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <showMe+0xa8>
 1c2:	05 c0       	rjmp	.+10     	; 0x1ce <showMe+0xba>
		}
		else
		{
			SPDR=mas[10]; //положительное число - ничего
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1c8:	0d b4       	in	r0, 0x2d	; 45
 1ca:	07 fe       	sbrs	r0, 7
 1cc:	fd cf       	rjmp	.-6      	; 0x1c8 <showMe+0xb4>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	1d c0       	rjmp	.+58     	; 0x20c <showMe+0xf8>
		}
		for(i=0; i<=2; i++)
		{
			if(i<j) SPDR=mas[10]; //вместо ненужных нулей - пусто
 1d2:	48 2f       	mov	r20, r24
 1d4:	08 2e       	mov	r0, r24
 1d6:	00 0c       	add	r0, r0
 1d8:	55 0b       	sbc	r21, r21
 1da:	42 17       	cp	r20, r18
 1dc:	53 07       	cpc	r21, r19
 1de:	1c f4       	brge	.+6      	; 0x1e6 <showMe+0xd2>
 1e0:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e2:	9e bd       	out	0x2e, r25	; 46
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <showMe+0xf0>
			else SPDR=mas[dig[i]];
 1e6:	e1 e0       	ldi	r30, 0x01	; 1
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	ec 0f       	add	r30, r28
 1ec:	fd 1f       	adc	r31, r29
 1ee:	e4 0f       	add	r30, r20
 1f0:	f5 1f       	adc	r31, r21
 1f2:	90 81       	ld	r25, Z
 1f4:	e4 e0       	ldi	r30, 0x04	; 4
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	e9 0f       	add	r30, r25
 1fe:	f1 1d       	adc	r31, r1
 200:	90 81       	ld	r25, Z
 202:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
 204:	0d b4       	in	r0, 0x2d	; 45
 206:	07 fe       	sbrs	r0, 7
 208:	fd cf       	rjmp	.-6      	; 0x204 <showMe+0xf0>
		else
		{
			SPDR=mas[10]; //положительное число - ничего
			while(!(SPSR&(1<<SPIF)));
		}
		for(i=0; i<=2; i++)
 20a:	8f 5f       	subi	r24, 0xFF	; 255
 20c:	83 30       	cpi	r24, 0x03	; 3
 20e:	0c f3       	brlt	.-62     	; 0x1d2 <showMe+0xbe>
 210:	0d c0       	rjmp	.+26     	; 0x22c <showMe+0x118>
	}
	else
	{
		for(i=0; i<=2; i++)
		{
			SPDR=mas[10];
 212:	9e 85       	ldd	r25, Y+14	; 0x0e
 214:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF)));
 216:	0d b4       	in	r0, 0x2d	; 45
 218:	07 fe       	sbrs	r0, 7
 21a:	fd cf       	rjmp	.-6      	; 0x216 <showMe+0x102>
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
		}
	}
	else
	{
		for(i=0; i<=2; i++)
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	c4 f3       	brlt	.-16     	; 0x212 <showMe+0xfe>
		{
			SPDR=mas[10];
			while(!(SPSR&(1<<SPIF)));
		}
		SPDR=mas[0]; //если res == 0, выводим на экран ___0
 222:	8c 81       	ldd	r24, Y+4	; 0x04
 224:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR&(1<<SPIF)));
 226:	0d b4       	in	r0, 0x2d	; 45
 228:	07 fe       	sbrs	r0, 7
 22a:	fd cf       	rjmp	.-6      	; 0x226 <showMe+0x112>
	}
	PORTD &= ~(1<<0); //защелкиваем выводимое число
 22c:	8b b1       	in	r24, 0x0b	; 11
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	8a e6       	ldi	r24, 0x6A	; 106
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <showMe+0x120>
 238:	00 c0       	rjmp	.+0      	; 0x23a <showMe+0x126>
	_delay_us(20);
	PORTD |= (1<<0);
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	81 60       	ori	r24, 0x01	; 1
 23e:	8b b9       	out	0x0b, r24	; 11
 240:	8a e6       	ldi	r24, 0x6A	; 106
 242:	8a 95       	dec	r24
 244:	f1 f7       	brne	.-4      	; 0x242 <showMe+0x12e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <showMe+0x134>
	_delay_us(20);
	PORTD &= ~(1<<0);
 248:	8b b1       	in	r24, 0x0b	; 11
 24a:	8e 7f       	andi	r24, 0xFE	; 254
 24c:	8b b9       	out	0x0b, r24	; 11
}
 24e:	2f 96       	adiw	r28, 0x0f	; 15
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	df 90       	pop	r13
 268:	cf 90       	pop	r12
 26a:	bf 90       	pop	r11
 26c:	08 95       	ret

0000026e <main>:
unsigned char Digit(uint16_t d, uint8_t m);
void showMe(int16_t spiData);

int main(void)
{
	SPI_init();
 26e:	0e 94 4b 00 	call	0x96	; 0x96 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ec       	ldi	r24, 0xC3	; 195
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0xa>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x14>
 282:	00 00       	nop
	_delay_ms(200);	
	//слово AbEd
	SPDR=0b00010001; //A
 284:	81 e1       	ldi	r24, 0x11	; 17
 286:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)));
 288:	0d b4       	in	r0, 0x2d	; 45
 28a:	07 fe       	sbrs	r0, 7
 28c:	fd cf       	rjmp	.-6      	; 0x288 <main+0x1a>
	SPDR=0b00000111; //b
 28e:	87 e0       	ldi	r24, 0x07	; 7
 290:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)));
 292:	0d b4       	in	r0, 0x2d	; 45
 294:	07 fe       	sbrs	r0, 7
 296:	fd cf       	rjmp	.-6      	; 0x292 <main+0x24>
	SPDR=0b00001101; //E
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)));
 29c:	0d b4       	in	r0, 0x2d	; 45
 29e:	07 fe       	sbrs	r0, 7
 2a0:	fd cf       	rjmp	.-6      	; 0x29c <main+0x2e>
	SPDR=0b01000011; //d
 2a2:	83 e4       	ldi	r24, 0x43	; 67
 2a4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR&(1<<SPIF)));
 2a6:	0d b4       	in	r0, 0x2d	; 45
 2a8:	07 fe       	sbrs	r0, 7
 2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <main+0x38>
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	83 ed       	ldi	r24, 0xD3	; 211
 2b0:	90 e3       	ldi	r25, 0x30	; 48
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x44>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x4e>
 2bc:	00 00       	nop
	_delay_ms(1000);
	while (1)
    {
		for(int8_t i=-99; i<=99; i++)
 2be:	cd e9       	ldi	r28, 0x9D	; 157
 2c0:	10 c0       	rjmp	.+32     	; 0x2e2 <main+0x74>
		{
			showMe(i);
 2c2:	8c 2f       	mov	r24, r28
 2c4:	0c 2e       	mov	r0, r28
 2c6:	00 0c       	add	r0, r0
 2c8:	99 0b       	sbc	r25, r25
 2ca:	0e 94 8a 00 	call	0x114	; 0x114 <showMe>
 2ce:	2f e7       	ldi	r18, 0x7F	; 127
 2d0:	8a e1       	ldi	r24, 0x1A	; 26
 2d2:	96 e0       	ldi	r25, 0x06	; 6
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x66>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x70>
 2de:	00 00       	nop
	SPDR=0b01000011; //d
	while(!(SPSR&(1<<SPIF)));
	_delay_ms(1000);
	while (1)
    {
		for(int8_t i=-99; i<=99; i++)
 2e0:	cf 5f       	subi	r28, 0xFF	; 255
 2e2:	c4 36       	cpi	r28, 0x64	; 100
 2e4:	74 f3       	brlt	.-36     	; 0x2c2 <main+0x54>
 2e6:	c3 e6       	ldi	r28, 0x63	; 99
 2e8:	10 c0       	rjmp	.+32     	; 0x30a <main+0x9c>
			showMe(i);
			_delay_ms(125);
		}
		for(int8_t i=99; i>=-99; i--)
		{
			showMe(i);
 2ea:	8c 2f       	mov	r24, r28
 2ec:	0c 2e       	mov	r0, r28
 2ee:	00 0c       	add	r0, r0
 2f0:	99 0b       	sbc	r25, r25
 2f2:	0e 94 8a 00 	call	0x114	; 0x114 <showMe>
 2f6:	2f e7       	ldi	r18, 0x7F	; 127
 2f8:	8a e1       	ldi	r24, 0x1A	; 26
 2fa:	96 e0       	ldi	r25, 0x06	; 6
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <main+0x8e>
 304:	00 c0       	rjmp	.+0      	; 0x306 <main+0x98>
 306:	00 00       	nop
		for(int8_t i=-99; i<=99; i++)
		{
			showMe(i);
			_delay_ms(125);
		}
		for(int8_t i=99; i>=-99; i--)
 308:	c1 50       	subi	r28, 0x01	; 1
 30a:	cd 39       	cpi	r28, 0x9D	; 157
 30c:	74 f7       	brge	.-36     	; 0x2ea <main+0x7c>
 30e:	d7 cf       	rjmp	.-82     	; 0x2be <main+0x50>

00000310 <__umulhisi3>:
 310:	a2 9f       	mul	r26, r18
 312:	b0 01       	movw	r22, r0
 314:	b3 9f       	mul	r27, r19
 316:	c0 01       	movw	r24, r0
 318:	a3 9f       	mul	r26, r19
 31a:	70 0d       	add	r23, r0
 31c:	81 1d       	adc	r24, r1
 31e:	11 24       	eor	r1, r1
 320:	91 1d       	adc	r25, r1
 322:	b2 9f       	mul	r27, r18
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
