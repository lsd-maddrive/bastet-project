
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800106  00800106  00000404  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2a  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000799  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000490  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_1>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  9e:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:
    data += digit;
  }
  while(1);
  // заканчиваем, когда увидели признак \r\n
  return data;
}
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	08 95       	ret

000000b4 <uart_transmit_str>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	ec 01       	movw	r28, r24
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <uart_transmit_str+0xe>
  bc:	21 96       	adiw	r28, 0x01	; 1
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
  c2:	88 81       	ld	r24, Y
  c4:	81 11       	cpse	r24, r1
  c6:	fa cf       	rjmp	.-12     	; 0xbc <uart_transmit_str+0x8>
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <Digit>:
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	fc 01       	movw	r30, r24
  d4:	d6 2f       	mov	r29, r22
  d6:	45 e0       	ldi	r20, 0x05	; 5
  d8:	27 c0       	rjmp	.+78     	; 0x128 <Digit+0x5a>
  da:	9f 01       	movw	r18, r30
  dc:	ad ec       	ldi	r26, 0xCD	; 205
  de:	bc ec       	ldi	r27, 0xCC	; 204
  e0:	0e 94 a4 01 	call	0x348	; 0x348 <__umulhisi3>
  e4:	96 95       	lsr	r25
  e6:	87 95       	ror	r24
  e8:	96 95       	lsr	r25
  ea:	87 95       	ror	r24
  ec:	96 95       	lsr	r25
  ee:	87 95       	ror	r24
  f0:	9c 01       	movw	r18, r24
  f2:	22 0f       	add	r18, r18
  f4:	33 1f       	adc	r19, r19
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	ce 2f       	mov	r28, r30
 108:	c8 1b       	sub	r28, r24
 10a:	5f ef       	ldi	r21, 0xFF	; 255
 10c:	54 0f       	add	r21, r20
 10e:	4d 17       	cp	r20, r29
 110:	69 f0       	breq	.+26     	; 0x12c <Digit+0x5e>
 112:	9f 01       	movw	r18, r30
 114:	0e 94 a4 01 	call	0x348	; 0x348 <__umulhisi3>
 118:	fc 01       	movw	r30, r24
 11a:	f6 95       	lsr	r31
 11c:	e7 95       	ror	r30
 11e:	f6 95       	lsr	r31
 120:	e7 95       	ror	r30
 122:	f6 95       	lsr	r31
 124:	e7 95       	ror	r30
 126:	45 2f       	mov	r20, r21
 128:	41 11       	cpse	r20, r1
 12a:	d7 cf       	rjmp	.-82     	; 0xda <Digit+0xc>
 12c:	8c 2f       	mov	r24, r28
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <uart_transmit_dec>:
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	8c 01       	movw	r16, r24
 13e:	89 2b       	or	r24, r25
 140:	b9 f0       	breq	.+46     	; 0x170 <uart_transmit_dec+0x3c>
 142:	c1 e0       	ldi	r28, 0x01	; 1
 144:	01 c0       	rjmp	.+2      	; 0x148 <uart_transmit_dec+0x14>
 146:	cd 2f       	mov	r28, r29
 148:	d1 e0       	ldi	r29, 0x01	; 1
 14a:	dc 0f       	add	r29, r28
 14c:	6c 2f       	mov	r22, r28
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 67 00 	call	0xce	; 0xce <Digit>
 154:	88 23       	and	r24, r24
 156:	b9 f3       	breq	.-18     	; 0x146 <uart_transmit_dec+0x12>
 158:	08 c0       	rjmp	.+16     	; 0x16a <uart_transmit_dec+0x36>
 15a:	6c 2f       	mov	r22, r28
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 67 00 	call	0xce	; 0xce <Digit>
 162:	80 5d       	subi	r24, 0xD0	; 208
 164:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
 168:	cf 5f       	subi	r28, 0xFF	; 255
 16a:	c6 30       	cpi	r28, 0x06	; 6
 16c:	b0 f3       	brcs	.-20     	; 0x15a <uart_transmit_dec+0x26>
 16e:	03 c0       	rjmp	.+6      	; 0x176 <uart_transmit_dec+0x42>
 170:	80 e3       	ldi	r24, 0x30	; 48
 172:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	08 95       	ret

00000180 <uart_init>:

/* функци€ инициализации: настройка ћ  на приЄм и передачу данных, длина сообщени€ Ц 8 бит, один —“ќѕ бит, без паритета, скорость обмена Ц 9600 бод */
void uart_init(void){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <uart_init+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <uart_init+0x8>
 188:	1f 92       	push	r1
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	uint8_t word[] = {"TEST"};
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f1 e0       	ldi	r31, 0x01	; 1
 194:	de 01       	movw	r26, r28
 196:	11 96       	adiw	r26, 0x01	; 1
 198:	01 90       	ld	r0, Z+
 19a:	0d 92       	st	X+, r0
 19c:	8a 95       	dec	r24
 19e:	e1 f7       	brne	.-8      	; 0x198 <uart_init+0x18>
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 1a0:	e1 ec       	ldi	r30, 0xC1	; 193
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	88 61       	ori	r24, 0x18	; 24
 1a8:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
 1aa:	e2 ec       	ldi	r30, 0xC2	; 194
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	86 60       	ori	r24, 0x06	; 6
 1b2:	80 83       	st	Z, r24
	//скорость передачи 9600 бод
	UBRR0H = 0;
 1b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	//дл€ значени€ 9600 UBRR0L = 103 = 0x67
	UBRR0L = 0x67;
 1b8:	87 e6       	ldi	r24, 0x67	; 103
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// выводим в терминал слово TEST
	uart_transmit_str(word);
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 5a 00 	call	0xb4	; 0xb4 <uart_transmit_str>
	// переходим в начало следующей строки
	uart_transmit('\r');
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
}
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	80 e7       	ldi	r24, 0x70	; 112
 1e0:	92 e0       	ldi	r25, 0x02	; 2
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x6>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x10>
 1ec:	00 00       	nop

int main(void){
	// задержка дл€ завершени€ процесса программировани€
	_delay_ms(50);
	// подключаем диод к Ў»ћ каналу ј таймера є0
	DDRD |= (1<<5)|(1<<6);
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	80 66       	ori	r24, 0x60	; 96
 1f2:	8a b9       	out	0x0a, r24	; 10
	// настраиваем Ў»ћ
	TCCR0A = (1<<COM0A1) | (1<<COM0A0) | (1<<COM1B1) | (1<<COM1B0) | (1<<WGM01) | (1<<WGM00);
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	85 bd       	out	0x25, r24	; 37
	TCCR1B=(1<<CS11); //период таймера є1 10 мс
 1fc:	92 e0       	ldi	r25, 0x02	; 2
 1fe:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1H=0xB1; //начальное значение таймера
 202:	91 eb       	ldi	r25, 0xB1	; 177
 204:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L=0xE0;
 208:	90 ee       	ldi	r25, 0xE0	; 224
 20a:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1 = (1<<TOIE1); //прерывание по переполнению
 20e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	EIMSK = (1<<INT0) | (1<<INT1);
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	8d bb       	out	0x1d, r24	; 29
	EICRA = (1<<ISC00) | (1<<ISC10);
 216:	85 e0       	ldi	r24, 0x05	; 5
 218:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	uart_init();
 21c:	0e 94 c0 00 	call	0x180	; 0x180 <uart_init>
	//разрешить прерывани€ глобально
	sei();
 220:	78 94       	sei
 222:	ff cf       	rjmp	.-2      	; 0x222 <main+0x46>

00000224 <__vector_1>:
	{
	}
}

ISR(INT0_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	8f 93       	push	r24
	if((PIND & (1<<2)) != 0) sens_left = LINE;
 230:	4a 9b       	sbis	0x09, 2	; 9
 232:	04 c0       	rjmp	.+8      	; 0x23c <__vector_1+0x18>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <sens_left>
 23a:	02 c0       	rjmp	.+4      	; 0x240 <__vector_1+0x1c>
	else sens_left = NO_LINE;
 23c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <sens_left>
}
 240:	8f 91       	pop	r24
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_2>:

ISR(INT1_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
	if((PIND & (1<<3)) != 0) sens_right = LINE;
 258:	4b 9b       	sbis	0x09, 3	; 9
 25a:	04 c0       	rjmp	.+8      	; 0x264 <__vector_2+0x18>
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 262:	02 c0       	rjmp	.+4      	; 0x268 <__vector_2+0x1c>
	else sens_right = NO_LINE;
 264:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
}
 268:	8f 91       	pop	r24
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_13>:

/* функци€ обработчик прерывани€ (‘ќѕ)
исполн€етс€ 1 раз в 10 мс */
ISR (TIMER1_OVF_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	4f 93       	push	r20
 284:	5f 93       	push	r21
 286:	6f 93       	push	r22
 288:	7f 93       	push	r23
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	TCNT1H=0xB1; //начальное значение таймера
 296:	81 eb       	ldi	r24, 0xB1	; 177
 298:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCNT1L=0xE0;
 29c:	80 ee       	ldi	r24, 0xE0	; 224
 29e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	if(t1_flag<10) t1_flag++;
 2a2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t1_flag>
 2a6:	8a 30       	cpi	r24, 0x0A	; 10
 2a8:	20 f4       	brcc	.+8      	; 0x2b2 <__vector_13+0x3e>
 2aa:	8f 5f       	subi	r24, 0xFF	; 255
 2ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <t1_flag>
 2b0:	3a c0       	rjmp	.+116    	; 0x326 <__vector_13+0xb2>
	else
	{
		t1_flag=0;
 2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <t1_flag>
		if((sens_left == NO_LINE) && (sens_right == NO_LINE))
 2b6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sens_left>
 2ba:	81 11       	cpse	r24, r1
 2bc:	0e c0       	rjmp	.+28     	; 0x2da <__vector_13+0x66>
 2be:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2c2:	81 11       	cpse	r24, r1
 2c4:	0a c0       	rjmp	.+20     	; 0x2da <__vector_13+0x66>
		{
			OCR0A = 255;
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	87 bd       	out	0x27, r24	; 39
			OCR0B = 255;
 2ca:	88 bd       	out	0x28, r24	; 40
			uart_transmit_dec(GO_STRAIGHT);
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 9a 00 	call	0x134	; 0x134 <uart_transmit_dec>
			uart_transmit('\r');
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
		}
		if((sens_left == NO_LINE) && (sens_right == LINE))
 2da:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sens_left>
 2de:	81 11       	cpse	r24, r1
 2e0:	0f c0       	rjmp	.+30     	; 0x300 <__vector_13+0x8c>
 2e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	59 f4       	brne	.+22     	; 0x300 <__vector_13+0x8c>
		{
			OCR0A = 255;
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	87 bd       	out	0x27, r24	; 39
			OCR0B = 32;
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	88 bd       	out	0x28, r24	; 40
			uart_transmit_dec(TURN_LEFT);
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 9a 00 	call	0x134	; 0x134 <uart_transmit_dec>
			uart_transmit('\r');
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
		}
		if((sens_left == LINE) && (sens_right == NO_LINE))
 300:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <sens_left>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	79 f4       	brne	.+30     	; 0x326 <__vector_13+0xb2>
 308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 30c:	81 11       	cpse	r24, r1
 30e:	0b c0       	rjmp	.+22     	; 0x326 <__vector_13+0xb2>
		{
			OCR0A = 32;
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	87 bd       	out	0x27, r24	; 39
			OCR0B = 255;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	88 bd       	out	0x28, r24	; 40
			uart_transmit_dec(TURN_RIGHT);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 9a 00 	call	0x134	; 0x134 <uart_transmit_dec>
			uart_transmit('\r');
 320:	8d e0       	ldi	r24, 0x0D	; 13
 322:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
		}
	}
}
 326:	ff 91       	pop	r31
 328:	ef 91       	pop	r30
 32a:	bf 91       	pop	r27
 32c:	af 91       	pop	r26
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	7f 91       	pop	r23
 334:	6f 91       	pop	r22
 336:	5f 91       	pop	r21
 338:	4f 91       	pop	r20
 33a:	3f 91       	pop	r19
 33c:	2f 91       	pop	r18
 33e:	0f 90       	pop	r0
 340:	0f be       	out	0x3f, r0	; 63
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <__umulhisi3>:
 348:	a2 9f       	mul	r26, r18
 34a:	b0 01       	movw	r22, r0
 34c:	b3 9f       	mul	r27, r19
 34e:	c0 01       	movw	r24, r0
 350:	a3 9f       	mul	r26, r19
 352:	70 0d       	add	r23, r0
 354:	81 1d       	adc	r24, r1
 356:	11 24       	eor	r1, r1
 358:	91 1d       	adc	r25, r1
 35a:	b2 9f       	mul	r27, r18
 35c:	70 0d       	add	r23, r0
 35e:	81 1d       	adc	r24, r1
 360:	11 24       	eor	r1, r1
 362:	91 1d       	adc	r25, r1
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
