
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002fa  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ba  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c7  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000446  00000000  00000000  000015b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002239  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ef       	ldi	r30, 0xFA	; 250
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
  8e:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <readADC>:
{
	if(dir == 0) //определ€ем направление вращени€
		PORTD |= (1<<4);
	else
		PORTD &= ~(1<<4);
	OCR0B = speed; //определ€ем скорость вращени€
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	89 2b       	or	r24, r25
  9e:	80 66       	ori	r24, 0x60	; 96
  a0:	80 83       	st	Z, r24
  a2:	87 ec       	ldi	r24, 0xC7	; 199
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <readADC+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <readADC+0x16>
  ac:	00 00       	nop
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 83       	st	Z, r24
  b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  bc:	84 ff       	sbrs	r24, 4
  be:	fc cf       	rjmp	.-8      	; 0xb8 <readADC+0x22>
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	80 83       	st	Z, r24
  ca:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ce:	08 95       	ret

000000d0 <SPI_init>:
}

void SPI_init(void) //инициализаци€ аппаратной части SPI
{
	DDRB |= (1<<0)|(1<<2)|(1<<3)|(1<<5); //выводы CS, SS, MOSI, SCK Ц на выход
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	8d 62       	ori	r24, 0x2D	; 45
  d4:	84 b9       	out	0x04, r24	; 4
	//включить аппаратный SPI, режим 0, предделитель на 128
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
  d6:	83 e5       	ldi	r24, 0x53	; 83
  d8:	8c bd       	out	0x2c, r24	; 44
  da:	08 95       	ret

000000dc <Digit>:
}

/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	fc 01       	movw	r30, r24
  e2:	d6 2f       	mov	r29, r22
	uint8_t i = 3, a;
  e4:	43 e0       	ldi	r20, 0x03	; 3
	while(i){ //цикл по разр€дам числа
  e6:	27 c0       	rjmp	.+78     	; 0x136 <Digit+0x5a>
		a = d%10; //выдел€ем очередной разр€д
  e8:	9f 01       	movw	r18, r30
  ea:	ad ec       	ldi	r26, 0xCD	; 205
  ec:	bc ec       	ldi	r27, 0xCC	; 204
  ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__umulhisi3>
  f2:	96 95       	lsr	r25
  f4:	87 95       	ror	r24
  f6:	96 95       	lsr	r25
  f8:	87 95       	ror	r24
  fa:	96 95       	lsr	r25
  fc:	87 95       	ror	r24
  fe:	9c 01       	movw	r18, r24
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	82 0f       	add	r24, r18
 112:	93 1f       	adc	r25, r19
 114:	ce 2f       	mov	r28, r30
 116:	c8 1b       	sub	r28, r24
		if(i-- == m) break; //выделен заданный разр€д - уходим
 118:	5f ef       	ldi	r21, 0xFF	; 255
 11a:	54 0f       	add	r21, r20
 11c:	4d 17       	cp	r20, r29
 11e:	69 f0       	breq	.+26     	; 0x13a <Digit+0x5e>
		d /= 10; //уменьшаем число в 10 раз
 120:	9f 01       	movw	r18, r30
 122:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <__umulhisi3>
 126:	fc 01       	movw	r30, r24
 128:	f6 95       	lsr	r31
 12a:	e7 95       	ror	r30
 12c:	f6 95       	lsr	r31
 12e:	e7 95       	ror	r30
 130:	f6 95       	lsr	r31
 132:	e7 95       	ror	r30
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
 134:	45 2f       	mov	r20, r21
/*функци€ дл€ выделени€ из трЄхразр€дного числа d разр€да m
например, Digit(14, 3) = 4; или Digit(591, 1) = 5 */
unsigned char Digit(uint16_t d, uint8_t m)
{
	uint8_t i = 3, a;
	while(i){ //цикл по разр€дам числа
 136:	41 11       	cpse	r20, r1
 138:	d7 cf       	rjmp	.-82     	; 0xe8 <Digit+0xc>
		a = d%10; //выдел€ем очередной разр€д
		if(i-- == m) break; //выделен заданный разр€д - уходим
		d /= 10; //уменьшаем число в 10 раз
	}
	return(a);
}
 13a:	8c 2f       	mov	r24, r28
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <showMe>:

void showMe(int16_t spiData)
{
 142:	bf 92       	push	r11
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	2f 97       	sbiw	r28, 0x0f	; 15
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	7c 01       	movw	r14, r24
	int8_t i;
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
 166:	19 82       	std	Y+1, r1	; 0x01
 168:	1a 82       	std	Y+2, r1	; 0x02
 16a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	e0 e0       	ldi	r30, 0x00	; 0
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	de 01       	movw	r26, r28
 174:	14 96       	adiw	r26, 0x04	; 4
 176:	01 90       	ld	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	8a 95       	dec	r24
 17c:	e1 f7       	brne	.-8      	; 0x176 <showMe+0x34>
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
 17e:	ff 20       	and	r15, r15
 180:	2c f4       	brge	.+10     	; 0x18c <showMe+0x4a>
 182:	cc 24       	eor	r12, r12
 184:	dd 24       	eor	r13, r13
 186:	ce 18       	sub	r12, r14
 188:	df 08       	sbc	r13, r15
 18a:	01 c0       	rjmp	.+2      	; 0x18e <showMe+0x4c>
	else res = spiData;
 18c:	67 01       	movw	r12, r14
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 18e:	bb 24       	eor	r11, r11
 190:	b3 94       	inc	r11
 192:	12 c0       	rjmp	.+36     	; 0x1b8 <showMe+0x76>
	dig[i-1] = Digit(res,i);
 194:	0b 2d       	mov	r16, r11
 196:	0b 2c       	mov	r0, r11
 198:	00 0c       	add	r0, r0
 19a:	11 0b       	sbc	r17, r17
 19c:	01 50       	subi	r16, 0x01	; 1
 19e:	11 09       	sbc	r17, r1
 1a0:	6b 2d       	mov	r22, r11
 1a2:	c6 01       	movw	r24, r12
 1a4:	0e 94 6e 00 	call	0xdc	; 0xdc <Digit>
 1a8:	e1 e0       	ldi	r30, 0x01	; 1
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ec 0f       	add	r30, r28
 1ae:	fd 1f       	adc	r31, r29
 1b0:	e0 0f       	add	r30, r16
 1b2:	f1 1f       	adc	r31, r17
 1b4:	80 83       	st	Z, r24
	uint8_t dig[] = {0,0,0}, j; //разр€ды числа идут в dig[]
	uint8_t mas[] = {0x81,0xF3,0x49,0x61,0x33,0x25,0x05,0xF1,0x01,0x21,0xFF,0x7F}; //С0Т,..., С9Т, сегмент выключен, С-Т
	uint16_t res; //будем переприсваивать число в res
	if(spiData < 0) res = -spiData; //убираем отрицательность
	else res = spiData;
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
 1b6:	b3 94       	inc	r11
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	8b 15       	cp	r24, r11
 1bc:	5c f7       	brge	.-42     	; 0x194 <showMe+0x52>
	dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
 1be:	cd 28       	or	r12, r13
 1c0:	21 f4       	brne	.+8      	; 0x1ca <showMe+0x88>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	43 c0       	rjmp	.+134    	; 0x24c <showMe+0x10a>
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
		j++;
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <showMe+0x8a>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
	for(i=1; i<=3; i++) //вычлен€ем цифры из числа
	dig[i-1] = Digit(res,i);
	if(res != 0) //если передан не ноль Ц выводим число
	{
		j=0;
		while(dig[j] == 0) //убираем нули (не 0428, а _428)
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	e1 e0       	ldi	r30, 0x01	; 1
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	ec 0f       	add	r30, r28
 1d6:	fd 1f       	adc	r31, r29
 1d8:	e2 0f       	add	r30, r18
 1da:	f3 1f       	adc	r31, r19
 1dc:	90 81       	ld	r25, Z
 1de:	99 23       	and	r25, r25
 1e0:	91 f3       	breq	.-28     	; 0x1c6 <showMe+0x84>
		j++;
		/* сначала посылаетс€ знак, потом - сотни, потом Ц дес€тки, а после всего Ц единицы */
		if(spiData < 0)
 1e2:	ff 20       	and	r15, r15
 1e4:	34 f4       	brge	.+12     	; 0x1f2 <showMe+0xb0>
		{
			SPDR=mas[11]; //отрицательное число - знак минус
 1e6:	8f e7       	ldi	r24, 0x7F	; 127
 1e8:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1ea:	0d b4       	in	r0, 0x2d	; 45
 1ec:	07 fe       	sbrs	r0, 7
 1ee:	fd cf       	rjmp	.-6      	; 0x1ea <showMe+0xa8>
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <showMe+0xba>
		}
		else
		{
			SPDR=mas[10]; //положительное число - ничего
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	8e bd       	out	0x2e, r24	; 46
			while(!(SPSR&(1<<SPIF)));
 1f6:	0d b4       	in	r0, 0x2d	; 45
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <showMe+0xb4>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	1d c0       	rjmp	.+58     	; 0x23a <showMe+0xf8>
		}
		for(i=0; i<=2; i++)
		{
			if(i<j) SPDR=mas[10]; //вместо ненужных нулей - пусто
 200:	48 2f       	mov	r20, r24
 202:	08 2e       	mov	r0, r24
 204:	00 0c       	add	r0, r0
 206:	55 0b       	sbc	r21, r21
 208:	42 17       	cp	r20, r18
 20a:	53 07       	cpc	r21, r19
 20c:	1c f4       	brge	.+6      	; 0x214 <showMe+0xd2>
 20e:	9e 85       	ldd	r25, Y+14	; 0x0e
 210:	9e bd       	out	0x2e, r25	; 46
 212:	0f c0       	rjmp	.+30     	; 0x232 <showMe+0xf0>
			else SPDR=mas[dig[i]];
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ec 0f       	add	r30, r28
 21a:	fd 1f       	adc	r31, r29
 21c:	e4 0f       	add	r30, r20
 21e:	f5 1f       	adc	r31, r21
 220:	90 81       	ld	r25, Z
 222:	e4 e0       	ldi	r30, 0x04	; 4
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	ec 0f       	add	r30, r28
 228:	fd 1f       	adc	r31, r29
 22a:	e9 0f       	add	r30, r25
 22c:	f1 1d       	adc	r31, r1
 22e:	90 81       	ld	r25, Z
 230:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
 232:	0d b4       	in	r0, 0x2d	; 45
 234:	07 fe       	sbrs	r0, 7
 236:	fd cf       	rjmp	.-6      	; 0x232 <showMe+0xf0>
		else
		{
			SPDR=mas[10]; //положительное число - ничего
			while(!(SPSR&(1<<SPIF)));
		}
		for(i=0; i<=2; i++)
 238:	8f 5f       	subi	r24, 0xFF	; 255
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	0c f3       	brlt	.-62     	; 0x200 <showMe+0xbe>
 23e:	0d c0       	rjmp	.+26     	; 0x25a <showMe+0x118>
	}
	else
	{
		for(i=0; i<=2; i++)
		{
			SPDR=mas[10];
 240:	9e 85       	ldd	r25, Y+14	; 0x0e
 242:	9e bd       	out	0x2e, r25	; 46
			while(!(SPSR&(1<<SPIF)));
 244:	0d b4       	in	r0, 0x2d	; 45
 246:	07 fe       	sbrs	r0, 7
 248:	fd cf       	rjmp	.-6      	; 0x244 <showMe+0x102>
			while(!(SPSR&(1<<SPIF))); //высылаем значение SPDR
		}
	}
	else
	{
		for(i=0; i<=2; i++)
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	c4 f3       	brlt	.-16     	; 0x240 <showMe+0xfe>
		{
			SPDR=mas[10];
			while(!(SPSR&(1<<SPIF)));
		}
		SPDR=mas[0]; //если res == 0, выводим на экран ___0
 250:	8c 81       	ldd	r24, Y+4	; 0x04
 252:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR&(1<<SPIF)));
 254:	0d b4       	in	r0, 0x2d	; 45
 256:	07 fe       	sbrs	r0, 7
 258:	fd cf       	rjmp	.-6      	; 0x254 <showMe+0x112>
	}
	PORTB &= ~(1<<0); //защелкиваем выводимое число
 25a:	85 b1       	in	r24, 0x05	; 5
 25c:	8e 7f       	andi	r24, 0xFE	; 254
 25e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 260:	8a e6       	ldi	r24, 0x6A	; 106
 262:	8a 95       	dec	r24
 264:	f1 f7       	brne	.-4      	; 0x262 <showMe+0x120>
 266:	00 c0       	rjmp	.+0      	; 0x268 <showMe+0x126>
	_delay_us(20);
	PORTB |= (1<<0);
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	8a e6       	ldi	r24, 0x6A	; 106
 270:	8a 95       	dec	r24
 272:	f1 f7       	brne	.-4      	; 0x270 <showMe+0x12e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <showMe+0x134>
	_delay_us(20);
	PORTB &= ~(1<<0);
 276:	85 b1       	in	r24, 0x05	; 5
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	85 b9       	out	0x05, r24	; 5
}
 27c:	2f 96       	adiw	r28, 0x0f	; 15
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	08 95       	ret

0000029c <main>:
int main(void)			
{
  //8 битна€ переменна€ хранит результат преобразовани€ ј÷ѕ
  uint8_t result=0;
  //включить ј÷ѕ и выставить предделитель на 4
  ADCSRA |= (1<<ADEN) | (1<<ADPS1);
 29c:	ea e7       	ldi	r30, 0x7A	; 122
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	82 68       	ori	r24, 0x82	; 130
 2a4:	80 83       	st	Z, r24
  //вывод 5 Ц Ў»ћ, вывод 4 - направление
  DDRD |= (1<<4)|(1<<5); 
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	80 63       	ori	r24, 0x30	; 48
 2aa:	8a b9       	out	0x0a, r24	; 10
  /* настройка таймера: Ў»ћ с фазовой коррекцией,
  неинвертированный режим, предделитель на 1 */
  TCCR0A = (1<<COM0B1) | (1<<WGM00) | (1<<WGM01);
 2ac:	83 e2       	ldi	r24, 0x23	; 35
 2ae:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1<<CS00); 
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	85 bd       	out	0x25, r24	; 37
  SPI_init();
 2b4:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	83 ec       	ldi	r24, 0xC3	; 195
 2bc:	99 e0       	ldi	r25, 0x09	; 9
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x22>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x2c>
 2c8:	00 00       	nop
  _delay_ms(200);
  while(1)
  {
	result = readADC(0);
 2ca:	80 e0       	ldi	r24, 0x00	; 0
 2cc:	0e 94 4b 00 	call	0x96	; 0x96 <readADC>
	//motor_go(0, result);
	showMe(result);
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 a1 00 	call	0x142	; 0x142 <showMe>
 2d6:	f9 cf       	rjmp	.-14     	; 0x2ca <main+0x2e>

000002d8 <__umulhisi3>:
 2d8:	a2 9f       	mul	r26, r18
 2da:	b0 01       	movw	r22, r0
 2dc:	b3 9f       	mul	r27, r19
 2de:	c0 01       	movw	r24, r0
 2e0:	a3 9f       	mul	r26, r19
 2e2:	70 0d       	add	r23, r0
 2e4:	81 1d       	adc	r24, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	91 1d       	adc	r25, r1
 2ea:	b2 9f       	mul	r27, r18
 2ec:	70 0d       	add	r23, r0
 2ee:	81 1d       	adc	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
