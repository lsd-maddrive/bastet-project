
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038c  00000000  00000000  00001235  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000197  00000000  00000000  000019a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  78:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motor_go>:
#include <util/delay.h>

void motor_go(uint8_t dir, uint8_t speed)
{
	
	if(dir == 0)
  80:	81 11       	cpse	r24, r1
  82:	04 c0       	rjmp	.+8      	; 0x8c <motor_go+0xc>
	{
		PORTD |= (1<<7); //определяем направление вращения	
  84:	8b b1       	in	r24, 0x0b	; 11
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8b b9       	out	0x0b, r24	; 11
  8a:	03 c0       	rjmp	.+6      	; 0x92 <motor_go+0x12>
	}
	else
	{
		PORTD &= ~(1<<7);
  8c:	8b b1       	in	r24, 0x0b	; 11
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8b b9       	out	0x0b, r24	; 11
	}
	OCR0A = speed; //определяем скорость вращения
  92:	67 bd       	out	0x27, r22	; 39
	OCR0B = speed; //определяем скорость вращения
  94:	68 bd       	out	0x28, r22	; 40
	OCR1A = speed; //определяем скорость вращения
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  9c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed; //определяем скорость вращения
  a0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  a4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
  a8:	08 95       	ret

000000aa <init_pwm>:
}

void init_pwm()
{
  //вывод PD5(OC0B), PD6(OC0A) – ШИМ, вывод PD7 - направление
  DDRD |= (1<<5)|(1<<6)|(1<<7); 
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	80 6e       	ori	r24, 0xE0	; 224
  ae:	8a b9       	out	0x0a, r24	; 10
  TCCR0A |= (1<<COM0A1);
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1<<COM0B1);
  b6:	84 b5       	in	r24, 0x24	; 36
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	84 bd       	out	0x24, r24	; 36
  //вывод PB1(OC1A), PB2(OC1B) – ШИМ
  DDRB |= (1 << PORTB1) | (1 << PORTB2);
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	84 b9       	out	0x04, r24	; 4
  TCCR1A |= (1<<COM1A1);
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
  TCCR1A |= (1<<COM1B1);
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
  
  /* TIMER0 - настройка таймера: быстрый ШИМ,
  неинвертированный режим, предделитель на 1 */
  TCCR0A |= (1<<WGM00) | (1<<WGM01);
  d2:	84 b5       	in	r24, 0x24	; 36
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1<<CS00);
  d8:	85 b5       	in	r24, 0x25	; 37
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	85 bd       	out	0x25, r24	; 37
  /* TIMER1 - настройка таймера: быстрый ШИМ,
  неинвертированный режим, TOP = 0xFF, предделитель на 1*/
  TCCR1A |= (1 << WGM10);
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
  TCCR1B |= (1 << WGM12);
  e4:	e1 e8       	ldi	r30, 0x81	; 129
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
  TCCR1B |= (1<<CS10);
  ee:	80 81       	ld	r24, Z
  f0:	81 60       	ori	r24, 0x01	; 1
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <main>:


int main(void)
{

  init_pwm();
  f6:	0e 94 55 00 	call	0xaa	; 0xaa <init_pwm>
  
  while(1)
  {
    for(uint8_t i=1; i<255; i++)
  fa:	c1 e0       	ldi	r28, 0x01	; 1
  fc:	0b c0       	rjmp	.+22     	; 0x114 <main+0x1e>
	{
		motor_go(0, i);
  fe:	6c 2f       	mov	r22, r28
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 40 00 	call	0x80	; 0x80 <motor_go>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9f e1       	ldi	r25, 0x1F	; 31
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x14>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x1a>
 110:	00 00       	nop

  init_pwm();
  
  while(1)
  {
    for(uint8_t i=1; i<255; i++)
 112:	cf 5f       	subi	r28, 0xFF	; 255
 114:	cf 3f       	cpi	r28, 0xFF	; 255
 116:	99 f7       	brne	.-26     	; 0xfe <main+0x8>
 118:	c1 e0       	ldi	r28, 0x01	; 1
 11a:	0c c0       	rjmp	.+24     	; 0x134 <main+0x3e>
		motor_go(0, i);
		_delay_ms(2);	
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, 256-i);
 11c:	6c 2f       	mov	r22, r28
 11e:	61 95       	neg	r22
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 40 00 	call	0x80	; 0x80 <motor_go>
 126:	8f e3       	ldi	r24, 0x3F	; 63
 128:	9f e1       	ldi	r25, 0x1F	; 31
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x34>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x3a>
 130:	00 00       	nop
    for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, i);
		_delay_ms(2);	
	}
	for(uint8_t i=1; i<255; i++)
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	cf 3f       	cpi	r28, 0xFF	; 255
 136:	91 f7       	brne	.-28     	; 0x11c <main+0x26>
 138:	c1 e0       	ldi	r28, 0x01	; 1
 13a:	0b c0       	rjmp	.+22     	; 0x152 <main+0x5c>
		motor_go(0, 256-i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, i);
 13c:	6c 2f       	mov	r22, r28
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 40 00 	call	0x80	; 0x80 <motor_go>
 144:	8f e3       	ldi	r24, 0x3F	; 63
 146:	9f e1       	ldi	r25, 0x1F	; 31
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0x52>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0x58>
 14e:	00 00       	nop
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(0, 256-i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
 150:	cf 5f       	subi	r28, 0xFF	; 255
 152:	cf 3f       	cpi	r28, 0xFF	; 255
 154:	99 f7       	brne	.-26     	; 0x13c <main+0x46>
 156:	c1 e0       	ldi	r28, 0x01	; 1
 158:	0c c0       	rjmp	.+24     	; 0x172 <main+0x7c>
		motor_go(1, i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, 256-i);
 15a:	6c 2f       	mov	r22, r28
 15c:	61 95       	neg	r22
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 40 00 	call	0x80	; 0x80 <motor_go>
 164:	8f e3       	ldi	r24, 0x3F	; 63
 166:	9f e1       	ldi	r25, 0x1F	; 31
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x72>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x78>
 16e:	00 00       	nop
	for(uint8_t i=1; i<255; i++)
	{
		motor_go(1, i);
		_delay_ms(2);
	}
	for(uint8_t i=1; i<255; i++)
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	cf 3f       	cpi	r28, 0xFF	; 255
 174:	91 f7       	brne	.-28     	; 0x15a <main+0x64>
 176:	c1 cf       	rjmp	.-126    	; 0xfa <main+0x4>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
