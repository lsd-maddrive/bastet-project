
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000026e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000983  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000788  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  000014bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034d  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000020c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  8e:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <uart_init>:
#define F_CPU 16000000
#include <util/delay.h>

/* функция инициализации: настройка МК на приём и передачу данных, длина сообщения – 8 бит, один СТОП бит, без паритета, скорость обмена – 9600 бод */
void uart_init(void){
  UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
  96:	e1 ec       	ldi	r30, 0xC1	; 193
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	88 61       	ori	r24, 0x18	; 24
  9e:	80 83       	st	Z, r24
  UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
  a0:	e2 ec       	ldi	r30, 0xC2	; 194
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	86 60       	ori	r24, 0x06	; 6
  a8:	80 83       	st	Z, r24
  //скорость передачи 9600 бод
  UBRR0H = 0;
  aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  //для значения 9600 UBRR0L = 103 = 0x67
  UBRR0L = 0x67;
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  b4:	08 95       	ret

000000b6 <uart_transmit>:

// функция передачи байта
void uart_transmit(uint8_t byte){
  /* ожидаем выставления бита UDRE0, а затем кладем
  посылку в UDR0 */
  while(!(UCSR0A & (1<<UDRE0)));
  b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <uart_transmit>
  UDR0 = byte;
  be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c2:	08 95       	ret

000000c4 <uart_receive>:

// функция приёма байта
uint8_t uart_receive(void){
  /* ожидаем выставления бита RXC0, а затем забираем
  посылку из UDR0 */
  while(!(UCSR0A & (1<<RXC0)));
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <uart_receive>
  return UDR0;
  cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  d0:	08 95       	ret

000000d2 <uart_transmit_str>:

// функция передачи строки, слова или фразы
void uart_transmit_str(uint8_t* string){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
/* передаём данные побайтово с помощью указателя *
указатель – адрес «первого элемента» передаваемых данных*/
  while(*string)
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <uart_transmit_str+0xe>
    uart_transmit(*string++);
  da:	21 96       	adiw	r28, 0x01	; 1
  dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>

// функция передачи строки, слова или фразы
void uart_transmit_str(uint8_t* string){
/* передаём данные побайтово с помощью указателя *
указатель – адрес «первого элемента» передаваемых данных*/
  while(*string)
  e0:	88 81       	ld	r24, Y
  e2:	81 11       	cpse	r24, r1
  e4:	fa cf       	rjmp	.-12     	; 0xda <uart_transmit_str+0x8>
    uart_transmit(*string++);
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <Digit>:

uint8_t Digit(uint16_t d, uint8_t m){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	fc 01       	movw	r30, r24
  f2:	d6 2f       	mov	r29, r22
  uint8_t i = 5, a;
  f4:	45 e0       	ldi	r20, 0x05	; 5
  while(i){ //цикл по разрядам числа
  f6:	27 c0       	rjmp	.+78     	; 0x146 <Digit+0x5a>
    a = d%10; //выделяем очередной разряд
  f8:	9f 01       	movw	r18, r30
  fa:	ad ec       	ldi	r26, 0xCD	; 205
  fc:	bc ec       	ldi	r27, 0xCC	; 204
  fe:	0e 94 26 01 	call	0x24c	; 0x24c <__umulhisi3>
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	9c 01       	movw	r18, r24
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	82 0f       	add	r24, r18
 122:	93 1f       	adc	r25, r19
 124:	ce 2f       	mov	r28, r30
 126:	c8 1b       	sub	r28, r24
    //выделен заданный разряд - уходим
    if(i-- == m) break; 
 128:	5f ef       	ldi	r21, 0xFF	; 255
 12a:	54 0f       	add	r21, r20
 12c:	4d 17       	cp	r20, r29
 12e:	69 f0       	breq	.+26     	; 0x14a <Digit+0x5e>
    d /= 10; //уменьшаем число в 10 раз
 130:	9f 01       	movw	r18, r30
 132:	0e 94 26 01 	call	0x24c	; 0x24c <__umulhisi3>
 136:	fc 01       	movw	r30, r24
 138:	f6 95       	lsr	r31
 13a:	e7 95       	ror	r30
 13c:	f6 95       	lsr	r31
 13e:	e7 95       	ror	r30
 140:	f6 95       	lsr	r31
 142:	e7 95       	ror	r30
uint8_t Digit(uint16_t d, uint8_t m){
  uint8_t i = 5, a;
  while(i){ //цикл по разрядам числа
    a = d%10; //выделяем очередной разряд
    //выделен заданный разряд - уходим
    if(i-- == m) break; 
 144:	45 2f       	mov	r20, r21
    uart_transmit(*string++);
}

uint8_t Digit(uint16_t d, uint8_t m){
  uint8_t i = 5, a;
  while(i){ //цикл по разрядам числа
 146:	41 11       	cpse	r20, r1
 148:	d7 cf       	rjmp	.-82     	; 0xf8 <Digit+0xc>
    //выделен заданный разряд - уходим
    if(i-- == m) break; 
    d /= 10; //уменьшаем число в 10 раз
    }
  return(a);
}
 14a:	8c 2f       	mov	r24, r28
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <uart_transmit_dec>:
// посылка десятичного 16-битного числа с МК в терминал
void uart_transmit_dec(uint16_t val){
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	8c 01       	movw	r16, r24
  uint8_t i, j;
// если посылаемое МК число не ноль
  if(val!=0)
 15c:	89 2b       	or	r24, r25
 15e:	b9 f0       	breq	.+46     	; 0x18e <uart_transmit_dec+0x3c>
 160:	c1 e0       	ldi	r28, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <uart_transmit_dec+0x14>
  {
    /* проверяем количество нулевых разрядов в 
    пятиразрядном числе, например у числа 64 будет три 
    нулевых незначащих разряда – 00064 */
    j=1;
    while(!(Digit(val, j++)));
 164:	cd 2f       	mov	r28, r29
 166:	d1 e0       	ldi	r29, 0x01	; 1
 168:	dc 0f       	add	r29, r28
 16a:	6c 2f       	mov	r22, r28
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 76 00 	call	0xec	; 0xec <Digit>
 172:	88 23       	and	r24, r24
 174:	b9 f3       	breq	.-18     	; 0x164 <uart_transmit_dec+0x12>
 176:	08 c0       	rjmp	.+16     	; 0x188 <uart_transmit_dec+0x36>
    // не выводим незначащие нули в терминале
    for(i=j-1; i<=5; i++) uart_transmit(Digit(val, i)+'0');
 178:	6c 2f       	mov	r22, r28
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 76 00 	call	0xec	; 0xec <Digit>
 180:	80 5d       	subi	r24, 0xD0	; 208
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
 186:	cf 5f       	subi	r28, 0xFF	; 255
 188:	c6 30       	cpi	r28, 0x06	; 6
 18a:	b0 f3       	brcs	.-20     	; 0x178 <uart_transmit_dec+0x26>
 18c:	03 c0       	rjmp	.+6      	; 0x194 <uart_transmit_dec+0x42>
  }
  /* если значение ноль – выводим ноль, иначе зависнем 
  в цикле */
  else 
    uart_transmit('0');
 18e:	80 e3       	ldi	r24, 0x30	; 48
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <uart_receive_dec>:

// приём десятичного 16-битного числа на МК с терминала
uint16_t uart_receive_dec(void){
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
  uint16_t data = 0;
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t digit = 0;
// принимаем пятиразрядное число
  do
  {
    digit = uart_receive();
 1a6:	0e 94 62 00 	call	0xc4	; 0xc4 <uart_receive>
    // принимаем, пока не увидим признак конца строки
    if(digit == '\r') continue;
 1aa:	8d 30       	cpi	r24, 0x0D	; 13
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <uart_receive_dec+0x8>
    if(digit == '\n') break;
 1ae:	8a 30       	cpi	r24, 0x0A	; 10
 1b0:	89 f0       	breq	.+34     	; 0x1d4 <uart_receive_dec+0x36>
    if(!((digit >= '0') && (digit <= '9'))) break;
 1b2:	80 53       	subi	r24, 0x30	; 48
 1b4:	8a 30       	cpi	r24, 0x0A	; 10
 1b6:	70 f4       	brcc	.+28     	; 0x1d4 <uart_receive_dec+0x36>
    // выводим ASCII коды цифр
    digit -= '0';
    data *= 10;
 1b8:	9e 01       	movw	r18, r28
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	cc 0f       	add	r28, r28
 1c0:	dd 1f       	adc	r29, r29
 1c2:	cc 0f       	add	r28, r28
 1c4:	dd 1f       	adc	r29, r29
 1c6:	cc 0f       	add	r28, r28
 1c8:	dd 1f       	adc	r29, r29
 1ca:	c2 0f       	add	r28, r18
 1cc:	d3 1f       	adc	r29, r19
    data += digit;
 1ce:	c8 0f       	add	r28, r24
 1d0:	d1 1d       	adc	r29, r1
 1d2:	e9 cf       	rjmp	.-46     	; 0x1a6 <uart_receive_dec+0x8>
  }
  // заканчиваем, когда увидели признак \r\n
  while(1);
  return data;
}
 1d4:	ce 01       	movw	r24, r28
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <main>:

int main(void){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <main+0x6>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <main+0x8>
 1e4:	1f 92       	push	r1
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	80 e7       	ldi	r24, 0x70	; 112
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x14>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x1e>
 1fa:	00 00       	nop
	// задержка для завершения процесса программирования
	_delay_ms(50);
	uint8_t data, word[] = {"TEST"};
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	e0 e0       	ldi	r30, 0x00	; 0
 200:	f1 e0       	ldi	r31, 0x01	; 1
 202:	de 01       	movw	r26, r28
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	8a 95       	dec	r24
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x2a>
	// подключаем диод к ШИМ каналу А таймера №1
	DDRD |= (1<<6);
 20e:	8a b1       	in	r24, 0x0a	; 10
 210:	80 64       	ori	r24, 0x40	; 64
 212:	8a b9       	out	0x0a, r24	; 10
	// настраиваем ШИМ
	TCCR0A = (1<<COM0A1) | (1<<WGM01) | (1<<WGM00);
 214:	83 e8       	ldi	r24, 0x83	; 131
 216:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	85 bd       	out	0x25, r24	; 37
	uart_init();
 21c:	0e 94 4b 00 	call	0x96	; 0x96 <uart_init>
	// выводим в терминал слово TEST
	uart_transmit_str(word);
 220:	ce 01       	movw	r24, r28
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	0e 94 69 00 	call	0xd2	; 0xd2 <uart_transmit_str>
	// переходим в начало следующей строки
	uart_transmit('\r');
 228:	8d e0       	ldi	r24, 0x0D	; 13
 22a:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
	while (1)
	{
		// получаем данные с терминала 0…255 – скважность ШИМ
		data = uart_receive_dec();
 22e:	0e 94 cf 00 	call	0x19e	; 0x19e <uart_receive_dec>
 232:	8c 01       	movw	r16, r24
		// выставляем яркость свечения светодиода
		OCR0A = data;
 234:	87 bd       	out	0x27, r24	; 39
		// табуляция положения курсора в терминале
		uart_transmit('\t');
 236:	89 e0       	ldi	r24, 0x09	; 9
 238:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
		// выводим только что переданное значение
		uart_transmit_dec(data);
 23c:	c8 01       	movw	r24, r16
 23e:	99 27       	eor	r25, r25
 240:	0e 94 a9 00 	call	0x152	; 0x152 <uart_transmit_dec>
		uart_transmit('\r');
 244:	8d e0       	ldi	r24, 0x0D	; 13
 246:	0e 94 5b 00 	call	0xb6	; 0xb6 <uart_transmit>
 24a:	f1 cf       	rjmp	.-30     	; 0x22e <main+0x52>

0000024c <__umulhisi3>:
 24c:	a2 9f       	mul	r26, r18
 24e:	b0 01       	movw	r22, r0
 250:	b3 9f       	mul	r27, r19
 252:	c0 01       	movw	r24, r0
 254:	a3 9f       	mul	r26, r19
 256:	70 0d       	add	r23, r0
 258:	81 1d       	adc	r24, r1
 25a:	11 24       	eor	r1, r1
 25c:	91 1d       	adc	r25, r1
 25e:	b2 9f       	mul	r27, r18
 260:	70 0d       	add	r23, r0
 262:	81 1d       	adc	r24, r1
 264:	11 24       	eor	r1, r1
 266:	91 1d       	adc	r25, r1
 268:	08 95       	ret

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
